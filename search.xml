<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CTB参赛过程</title>
    <url>/2020/03/21/CTB%E5%8F%82%E8%B5%9B%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="参赛CTB-China-Thinks-Big-competition"><a href="#参赛CTB-China-Thinks-Big-competition" class="headerlink" title="参赛CTB  China Thinks Big competition"></a>参赛CTB  China Thinks Big competition</h1><p>It is a competion that encourage to do some research to solve some present problems.</p>
<p>During this competition, I use python to analyse the data.</p>
<hr>
<h2 id="Our-title"><a href="#Our-title" class="headerlink" title="Our title:"></a>Our title:</h2><p><strong>–如何通过装置革新实现高精度垃圾分类及培养公民垃圾分类意识</strong> </p>
<p><strong>–How to achieve high precision garbage classification and cultivate citizen garbage classification consciousness through device innovation</strong></p>
<hr>
<h2 id="What-we-are-going-to-do"><a href="#What-we-are-going-to-do" class="headerlink" title="What we are going to do?"></a>What we are going to do?</h2><p>before the competition:</p>
<p><strong>Q:你打算研究什么社会问题（研究问题）？请详细描述该社会话题或现象，并说明为什么这个问题很重要？</strong></p>
<p><strong>A:</strong></p>
<p>垃圾分类效果不理想。垃圾分类可以在很大程度上可以节约资源，同时通过分类回收处理节约了垃圾处理的成本，在国家节约资源的基本国策中占较大比重。然而现在垃圾分类的效果并不理想，仍然有大量的垃圾被以落后且高成本的方式进行处理。</p>
<p>在社区范围内居民垃圾分类意识薄弱，家庭方面，所有的垃圾统一用所有的垃圾袋装载并丢弃，垃圾袋内垃圾混杂，即使分类也没有意义。而垃圾桶也存在巨大问题，标出可回收不可回收的垃圾桶有时内部就是一个整体，垃圾站将所收的垃圾混在一起，说明政府的对垃圾分类不重视，以及在监督方面的不重视。这些都是亟待解决的问题。</p>
<p><strong>Q:你觉得这个社会问题是由哪些原因造成的？该研究问题可能的答案是什么（你的研究假设是什么）？</strong></p>
<p><strong>A:</strong></p>
<p>（教育宣传），装置落后</p>
<p>宣传方式不高效，没有严厉的法律措施来执行。没有足够先进的机器去监督人们自主的执行垃圾分类。尽管近年来我国国民素质有了大幅提高，但整体水平相对落后，公民的环境意识相对淡薄，无法从根本上形成自觉进行垃圾分类的意识。缺乏科学有效的垃圾分类的运行体系。<br>研究问题可能的答案：利用一些先进的技术和机器强制人们进行垃圾分类，促使人们养成垃圾分类的习惯。利用自动分类垃圾的系统使一些不知道如何垃圾分类的人也可以进行垃圾分类。还可以通过发放传单或者一些关于垃圾分类小知识的小册子来拓展垃圾分类的知识让更多的人知道如何使垃圾分类以及如何使用我们设计的便于垃圾分类的设备。</p>
<p><strong>Q:你会通过哪些方式证实这些原因是否成立或者哪些原因更主要（如何验证你的假设）？请简述你们会采用的研究方法。</strong></p>
<p><strong>A:</strong></p>
<p>试点对比</p>
<p>1.在小区里进行试点调查，设置对比试验，控制变量进行调查。<br>2.对使用过样品的人群进行采访，对数据进行分析，研究发现原因是否成立或者哪些原因更主要，在进行改进，之后再实验。不断改进后对结果进行对比，发现最适合执行的方案。<br>3.询问垃圾分类站的专家，分析样品是否适合大规模生产及放置，及对成本问题以及实用性进行研究<br>4.联系厂家，确保厂家能够精准的分别即将产生的垃圾<br>5.对样品进行大量实验，使垃圾能够被正确分类，样品减少错误</p>
<p><strong>你觉得可以采取哪些方法来改善这个社会问题和现象？请具体描述计划采取的行动，及预计最终成果形式和衡量项目成功的标准。</strong></p>
<p><strong>A:</strong></p>
<p>装置的改进，加强宣传，培养意识，奖励机制</p>
<p>用科技，宣传等辅助性手段逐步培养公民的环保意识。</p>
<p>首先，我们设计了一个辅助性的分类系统，垃圾桶是由4+1个垃圾桶组成，垃圾桶盖正常处于关闭状态，垃圾的包装上有可识别的的二维码记录了垃圾类型，系统里有识别装置可以识别垃圾类型并且打开相应的垃圾桶，当垃圾被投入后内部传感器会自动感应并关闭垃圾桶。如果识别不出会打开第五个备用垃圾桶。我们以这个装置为主题，并配合教育宣传和奖励机制的建立，通过辅助系统来配合公民垃圾分类意识的养成。</p>
<hr>
<h2 id="研究报告-research-report"><a href="#研究报告-research-report" class="headerlink" title="研究报告:  (research report)"></a>研究报告:  (research report)</h2><p>​          <strong>“继农业革命、工业革命、计算机革命之后，影响人类生存发展的又一次浪潮，将是世纪之交要出现的垃圾革命。”–美国著名的未来学家托夫勒《第三次浪潮》</strong> </p>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a><strong>摘要</strong></h3><p><strong>社会问题：</strong>垃圾分类效果不理想。即使获得社会重视，民众日常生活中意识 淡薄，对垃圾种类了解不全，没有养成垃圾分类的习惯，垃圾桶设施不完备等问题依然存在。 </p>
<p><strong>意义：</strong>将新时代的科技创新与当前社会较为关注的热点问题结合，以求缓解在环境、资源上的危机。同时，垃圾分类的逐有成效，也减少了对垃圾场劳动力的需求。垃圾分类可以减少垃圾占地、减少污染、变废为宝、减少危害。 </p>
<p><strong>研究问题：</strong>利用科技创新手段促进垃圾分类，减少垃圾的错误分类，以及培养民众垃圾分类意识。 </p>
<p><strong>假设：</strong>使用特质垃圾桶自动辅助垃圾分类，同时普及民众的垃圾分类知识。 </p>
<p><strong>主要结论：</strong>利用在商品袋上粘贴二维码识别垃圾的想法可行性不高，直接图像采集识别取得初步成功。</p>
<h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a><strong>Abstract</strong></h3><p><strong>Social problems:</strong> garbage classification is not efficient. Even if social attention is paid, people’s awareness of daily life is still weak. They do not fully understand the types of garbage, and they do not form the habit of garbage classification. And the garbage bin facilities are not complete and other problems still exist. </p>
<p><strong>Significance:</strong> combine the scientific and technological innovation of the new era with the hot issues concerned by the current society in order to alleviate the crisis in environment and resources. At the same time, the more and more effective waste separation also reduce the need for landfill labor.Garbage classification can reduce waste land, reduce pollution, and reduce harm. </p>
<p><strong>Research questions:</strong> using scientific and technological innovation means to promote garbage classification to reduce the wrong classification of garbage, and cultivate the public awareness of garbage classification. </p>
<p><strong>Hypothesis:</strong> use idiosyncratic garbage bins to automatically assist garbage classification and popularize garbage classification knowledge among the public. </p>
<p><strong>Conclusion:</strong> the idea of using two-dimensional code pasted on commodity bags to identify garbage is not feasible, and direct image acquisition and recognition has achieved initial success. </p>
<p><img src="https://s1.ax1x.com/2020/03/21/8WZ4aQ.png" alt="8WZ4aQ.png"></p>
<h3 id="主题介绍"><a href="#主题介绍" class="headerlink" title="主题介绍"></a>主题介绍</h3><p><strong>•定义社会问题</strong> </p>
<p>垃圾分类如今存在较大的问题。与一些国家不同的是，中国发展时间较短， 没有早早意识到垃圾分类的重要性, 民众的垃圾分类意识不强，也没有相关的知识储备，也没有形成习惯。这会导致资源的浪费，以及对环境造成破坏。如若解决该问题，有以下优点： </p>
<p>一、减少垃圾占地 </p>
<p>生活垃圾中有些物质不易降解，使土地受到严重侵蚀。垃圾分类，去掉可以 回收的、不易降解的物质，减少垃圾数量达 60%以上。 </p>
<p>二、减少污染 </p>
<p>目前我国的垃圾处理多采用卫生填埋甚至简易填埋的方式，占用上万亩土 地；虫蝇乱飞，污水四溢，臭气熏天，严重污染环境；废弃的电池含有金属汞、镉等有毒的物质，会对人类产生严重的危害；土壤中的废塑料会导致农作物减产。 </p>
<p>三、变废为宝 </p>
<p>据统计，中国每年使用塑料快餐盒达 40 亿个，方便面碗 5<del>7 亿个，一次性筷子数十亿双，这些占生活垃圾的 8</del>15%。生活垃圾中有 30%~40%可以回收利用， 各种固体废弃物混合在一起是垃圾，分选开就是资源。 </p>
<p>四、减少危害 </p>
<p>抛弃的废塑料被动物误食，导致动物死亡的事故时有发生。因此回收利用还可以减少危害。 </p>
<p>笔者将对问题的解决方案，定在使用科技的手段改善垃圾分类错误的问题，及用科技在投放垃圾时对民众进行教育宣传上。由于该项目对科技依赖程度较大，大部分的具体活动都为对技术的改进及创新。为达成目标，两种对垃圾桶的改造双线并行。 </p>
<p><strong>•细化研究问题</strong> </p>
<p>该研究项目将社科问题与科技相结合，关注了社会当前面临的一个热点话题，且也与新时代科技创新的重点相契合，更是考虑到利用科技不是长久之计， 唯有培养民众垃圾分类的素养，才能保证这一问题得到解决。研究问题主要针对如何解决当代中国民众垃圾分类意识不成熟，缺少垃圾分类知识的状况进行研究。目标明确，具体。 </p>
<p><strong>•论点/假设</strong> </p>
<p><strong>针对在垃圾分类上产生的问题，笔者进行了如下假设：</strong> </p>
<p>1.完全使用机器代替人工分类。经研究发现，该想法存在许多问题，如成本过高，垃圾种类较多不易完全记录数据，不易识别，错误率较高，且该方案难度 较大。因此只将该想法作为研究基础。 </p>
<p>2.在使用机器分类的同时进行科普教育。实现全民在日常生活中垃圾分类， 需要时间的过度，需要机器的辅助。 而选用机器作为过度的辅助，可以辅助现阶段的垃圾分类，提高垃圾分类效率，缓解问题。笔者认为通过垃圾分类装置的革新可以使人们逐渐加深垃圾分类的想法及增加垃圾分类的知识，形成习惯，进而促进垃圾分类的完善。 </p>
<h3 id="研究分析"><a href="#研究分析" class="headerlink" title="研究分析"></a><strong>研究分析</strong></h3><p><strong>理论介绍及文献整理</strong> </p>
<p><strong>“去年工业固体废物产生量为 19.1 亿吨，生活垃圾产生量约为 1.8 亿吨，后者处置率达 97.3％。面对生活垃圾逐年增加的趋势，垃圾处理将持续遇到压力。垃圾围城，令人担忧。”–中国环保部《2016 年全国大、中城市固体废物污染环境防治年报》</strong> </p>
<p><strong>2016 年 12 月 21 日下午，习近平总书记主持召开了中央财经领导小组第十四次会议，研究“十三五”规划纲要确定的 165 项重大工程项目进展和解决好人民群众普遍关心的突出问题等工作。“普遍推行垃圾分类制度，关系 13 亿多人生活环境改善，关系垃圾能不能减量化、资源化、无害化处理。”–习近平</strong> </p>
<p><strong>“4 月 26 日，住房和城乡建设部、国家发展和改革委员会、生态环境部等部门联合印发《关于在全国地级及以上城市全面开展生活垃圾分类工作的通知》（建城〔2019〕56 号）文件发出后，并未引起大范围的舆论关注。直至 6 月，在上海即将开始垃圾分类的影响下，舆论对于垃圾分类的相关信息日益关注。6月 28 日，‘人民网’发表文章《住建部：46 城 2020 年底前基本建成垃圾分类处理系统》，引爆舆论，‘全国 46 个重点城市试行垃圾分类’一事正式进入公众视野。”–《全国 46 个重点城市试行垃圾分类舆情分析报告》</strong> </p>
<p>垃圾分类日益严重，也已经引起人们的广泛关注。 </p>
<p>本项目核心内容为利用更加智能和先进的垃圾分类装置辅助人们养成垃圾 分类意识。笔者希望通过自主设计的智能垃圾桶从而逐步培养公民垃圾分类的意识，一 旦公民们养成这种习惯，公民将会自主的将垃圾丢入不同颜色的桶中。久而久之，人们不再需要使用智能的垃圾桶来帮助分类垃圾。  </p>
<p><strong>关于该内容有学者指出“2000 年 6 月，北京、上海、南京、杭州、桂林、广州、深圳、厦门 8 个城市率先开启了垃圾分类收集试点，实践表明垃圾分类要取得好效果既需要政府的强力推动，更需要每个家庭的认真参与。长期以来，居民参与社区治理活动的热情和动力不足，已经成为制约城市治理发展的重要瓶颈。没有“共建共治”，哪里有“共享”，垃圾分类作为全民参与的活动，能够成为破解共建共治共享难题的一个“引爆点”。“引爆点”最早源自心理学中的“破窗效应”。该理论认为环境中不好的现象如果被放任不管，会诱使人们效仿，甚至变本加厉。比如，一条人行道有少许纸屑，如果不打扫，就会出现更多的垃圾，最终人们将会理所当然地将垃圾顺手丢弃在地上。“破窗效应”作为一种有规律可循的心理现象，只要能够正确应用，可以把坏的事情转化为好的事情。以“关键点”为突破口，通过以点带面，促使整个事件发生连锁反应，朝着越来越好的方向发展。”–（中国经济时报 赵晨）</strong> </p>
<p>垃圾桶的设置不够完善也是一个影响因素： </p>
<p>许多垃圾桶带有盖子，所以人们不愿意去一个一个打开盖子，逐类将垃圾投入不同的垃圾桶中。而我们的智能垃圾桶自动识别开盖，正好解决了这一问题，不但帮助了人们对于不同种类垃圾的理解，也方便了人们扔垃圾。 因此，在此理论中本小队的智能垃圾分类装置将起到引爆点的作用，该装置 使用图像识别技术，能识别出垃圾种类并从数据库中找出对应垃圾的所属种类并 实现自动开启与关闭，在实际应用中可以为人们带来方便： </p>
<p><strong>“目前市面上销售的带盖垃圾箱，开盖时均需采用手动或脚踩方式实现，这种开盖方式主要的缺点是既不卫生又不方便。市场上也有部分智能垃圾箱出售，但开发及使用的程度并不高，主要以自动感应翻盖为主，而且不能主动对垃圾进行分类、没有垃圾满箱提示等智能化功能。”–（辽阳科技学院，辽宁 沈阳 ）</strong> </p>
<p>因此笔者所设计的智能垃圾桶更加人性化，考虑到人们使用垃圾桶时的实际困难。笔者相信垃圾分类的中心还是在人身上，一切的设备，以及宣传等最终都是为了让人们养成垃圾分类的习惯： </p>
<p><strong>“从回收可循环利用垃圾的角度出发，促使大家将可循环垃圾投入智能分类垃圾桶，从而形成“垃圾入桶”的意外和习惯，习惯一旦养成，人们手头无论有什么垃圾就会扔入垃圾箱，将垃圾投人垃圾箱将不再对人们是一种约束，而是一种乐趣和习惯。”–（天津师范大学软件学院，天津）</strong> </p>
<p>但是，对于智能垃圾分类，社会上也有一些反对的言论。 </p>
<p>智能垃圾桶只告诉人们这是什么种类的垃圾，却并未指出为何要垃圾分类。居民并没有意识到垃圾分类的重要性，所以即使知道自己的垃圾是什么种类的，也由于懒惰不愿将垃圾分类投放。 </p>
<p><strong>“切身利益是指居民的个人利益与眼前利益。 居民有分类意向，认为垃圾分类是有必要的，这通常是通过媒体了解到垃圾分类的社会效益。但是对居民本身而言，他们没有感受到利益相关性，所以在行为上缺少动力。 这方面的因素可归于个体的“经济人”理性。 如果居民严格执行垃圾分类政策，减少垃圾量，降低污染，节约资源，其正外部效应产出所承担的成本（如时间、金钱）并不会得到相应的回报（如减免垃圾费），存在社会收益与个人收益之间的偏离。 如果居民不执行垃圾分类政策，虽然对环境产生负外部效应，但自身付出成本也较少，且不会因环境污染而受到惩罚，这样也会造成社会成本与个人成本之间的偏离。在双向激励驱动下，经济人理性选择驱使部分居民放弃执行垃圾分类政策。”–《城市生活垃圾分类处理问题探究——基于上海市社区的个案调研》</strong> </p>
<p>智能垃圾桶的普及造价极高，不能大规模放置，导致只能在小范围试点，这会导致只有一部分居民知道如何垃圾分类，而他们看到试点以外的居民并不分 类，从而产生从众心理，对智能垃圾桶视而不见。 </p>
<p><strong>“阿里巴巴的负责人曹启明指出：目前全产业链前后端还没有完全打通，垃圾分类的基础设施还不完善，分类标准不统一，去向模糊，区域配套产业链建设还需进一步加强。”–《垃圾分类期待完整“闭环”》</strong> </p>
<p>垃圾分类工作并未市场化、体系化。垃圾分类处理并不应该是完全由政府承担的公益性工作，必须让垃圾分类处理工作符合市场化改革潮流，形成垃圾分类处理产业链，发展环保企业。 </p>
<p>总而言之，智能垃圾分类有优点亦有缺点。智能垃圾分类使市民投放垃圾的过程更加人性化，同时也保护了环境。但是，智能垃圾桶并未指出为何要垃圾分类，因此对人们没有起到足够的影响；而且智能垃圾桶的普及造价极高，不能大规模放置。这些都是笔者在研究过程中需要考虑的问题。</p>
<h3 id="个人垃圾分类现状调查"><a href="#个人垃圾分类现状调查" class="headerlink" title="个人垃圾分类现状调查"></a><strong>个人垃圾分类现状调查</strong></h3><h4 id="Here-I-use-another-case-I-compeleted-to-show-how-to-analyse-the-data"><a href="#Here-I-use-another-case-I-compeleted-to-show-how-to-analyse-the-data" class="headerlink" title="Here I use another case I compeleted to show how to analyse the data."></a>Here I use another case I compeleted to show how to analyse the data.</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment">#import pandas</span></span><br><span class="line">data=pd.read_csv(<span class="string">r'C:\Users\Administrator\Desktop\表格.csv'</span>) <span class="comment">#read the data</span></span><br><span class="line">data.columns</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#broken line graph:</span></span><br><span class="line">data.plot() </span><br><span class="line">colors1 = <span class="string">'#6D6D6D'</span>  <span class="comment">#设置标题颜色为灰色 make the title gray</span></span><br><span class="line">plt.title(<span class="string">'(title)'</span>,color = colors1,fontsize = <span class="number">40</span>,fontproperties=zhfont1)</span><br><span class="line">plt.xlabel(<span class="string">'Question'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'(name)'</span>,fontproperties=zhfont1)<span class="comment">#change to Chinese</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/23/8TL8b9.png" alt="8TL8b9.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bar graph:</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">sns.set()</span><br><span class="line">%matplotlib inline</span><br><span class="line">a=[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>]</span><br><span class="line">print(a)</span><br><span class="line">b=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">61</span>,<span class="number">90</span>]</span><br><span class="line">plt.bar(a,height=b,align=<span class="string">'center'</span>)</span><br><span class="line">zhfont1 = matplotlib.font_manager.FontProperties(fname=<span class="string">'C:\Windows\Fonts\simsun.ttc'</span>)</span><br><span class="line">plt.title(<span class="string">'个人更偏爱网络上的娱乐还是现实生活中的娱乐？'</span>,fontproperties=zhfont1)</span><br><span class="line">plt.xlabel(<span class="string">'紧张度'</span>,fontproperties=zhfont1)</span><br><span class="line">plt.ylabel(<span class="string">'人数'</span>,fontproperties=zhfont1)</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/23/8TLvMF.png" alt="8TLvMF.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pie graph:</span></span><br><span class="line">labels = [<span class="string">'A.3小时以内'</span>, <span class="string">'B.3至5小时'</span>, <span class="string">'C.5至7小时'</span>, <span class="string">'D.7小时以上'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置分裂属性</span></span><br><span class="line">explode = [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分裂饼图</span></span><br><span class="line">plt.pie(a, explode = explode,</span><br><span class="line">        labels = labels, autopct = <span class="string">'%3.1f%%'</span>,</span><br><span class="line">        startangle = <span class="number">180</span>, shadow = <span class="literal">True</span>,</span><br><span class="line">        colors = [<span class="string">'c'</span>, <span class="string">'r'</span>, <span class="string">'gray'</span>, <span class="string">'g'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标题</span></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line">plt.title(<span class="string">'每周花费在娱乐活动上的时间是多少?'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>![[<img src="https://s2.ax1x.com/2020/02/06/1yYMFA.png" alt="1yYMFA.png">]</p>
<h4 id="The-formal-one"><a href="#The-formal-one" class="headerlink" title="The formal one"></a>The formal one</h4><p>在设计一个适用于当今社会垃圾分类现状的设备前，对人们的情况进行了解是必不可少的，这能保证研究并不是无用功，并且能明确指出合理的研究方向，不会偏离主题。为明确方向，笔者进行了如下问卷调查。 </p>
<p>第 1 题 </p>
<p>你平时垃圾分类吗 [单选题] </p>
<p>第一个问题是关于人们平时是否有意识的进行垃圾分类。从当前数据看来， 接近半数的人们偶尔进行垃圾分类，三分之一的人们经常进行垃圾分类。虽然只有极少数的人每次都进行垃圾分类，但是不进行垃圾分类的人也是极少的。 这 说明人们基本上已经有了一个要进行垃圾分类的意识，但大部分的人们缺少一定的行动力。大部分的人们已经意识到了垃圾分类需要被实施，但还没有意识到垃圾分类的重要性，认为垃圾分类是一个可有可无的事情，并没有很好的重视这个问题。 </p>
<p><img src="https://s1.ax1x.com/2020/03/21/8WeiM6.png" alt="8WeiM6.png"></p>
<p><img src="https://s1.ax1x.com/2020/03/21/8WeFsK.png" alt="8WeFsK.png"></p>
<p>第 2 题 </p>
<p>你在垃圾分类时遇到那些困难 [单选题] </p>
<p>本题分为两个部分：经常/偶尔进行垃圾分类的人，从不进行垃圾分类的人。 </p>
<p>其中两者有较大区别：有过垃圾分类的人们中，根据调查数据显示，有将近一般的人不清除垃圾的种类。这说明有意识而没有做到垃圾分类的人们是因为并不是太了解如何进行垃圾分类从而导致无法垃圾分类，最后直接忽视了垃圾分类的问题。通过合理的 普及垃圾分类的知识，让更多的人了解、学习垃圾分类，养成垃圾分类的习惯。还有三分之一的人表示还有一部分的垃圾桶没有分类的标示从而无法进行垃圾分类。这是部分垃圾桶设施存在一些问题，是可以进行改进的一个方向。 </p>
<p><img src="https://s1.ax1x.com/2020/03/21/8Weyo4.png" alt="8Weyo4.png"></p>
<p>而在不进行垃圾分类的人当中，因为懒得去或者是没有时间进行垃圾分类的人的比例明显提高。现在的人们生活工作的节奏很快，基本没有时间腾出来去9了解学习并且有效的进行垃圾分类。所以可以通过智能垃圾分类的方法从而让一 些没有时间，或是不了解如何垃圾分类的人来正确的进行垃圾。 </p>
<p><img src="https://s1.ax1x.com/2020/03/21/8WeTTe.png" alt="8WeTTe.png"></p>
<p>这一题的结果说明大部分人是有垃圾分类意识的，没有这个意识的人仅占少部分，并且这少部分的问题也仅仅是某些可以借助特殊手段克服的个人问题。而大部分没有完全做到垃圾分类的人也有两个共性：一是个人垃圾分类知识储备不 够，二是垃圾桶设施问题。这两个问题将作为笔者主要克服的对象进行设计。 </p>
<p>第 3 题 </p>
<p>你如何垃圾分类的？ [多选题] </p>
<p>第三个问题是关于人们通过何种方式进行垃圾分类：在外将饮料瓶扔入可回收垃圾桶、在家分类打包、提醒他人垃圾分类，这是一个垃圾分类逐渐深入的顺 序。结果出现这样的下滑情况是情理之中的，也是我们需要努力去改善，让人们逐渐形成垃圾分类习惯的一个步骤。据调查数据显示，百分之八十的人都能很好的将饮料品投入可回收垃圾桶，一半的人都能做到将家中的垃圾进行分类打包， 这说明还有一部分的人进行垃圾分类时，只局限于将饮料瓶、餐巾纸之类的，可 以容易进行分类的垃圾进行分类，认为这就是所谓的垃圾分类，没有很深层次的理解到垃圾分类，仅仅是做到了垃圾分类的浅浅一层而没有进行深入。 </p>
<p><a href="https://imgchr.com/i/8WeXlt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/21/8WeXlt.png" alt="8WeXlt.png"></a></p>
<p><img src="https://s1.ax1x.com/2020/03/21/8Wezm8.png" alt="8Wezm8.png"></p>
<p>第 4 题 </p>
<p>你垃圾分类受到什么影响 [多选题] </p>
<p>第四个问题是关于人们进行垃圾分类具体是受到了什么的影响。数据显示社区宣传、学校工作单位宣传、网络宣传对人们造成的影响都差不多。这说明人们能通过各种渠道来进行了解垃圾分类。所以网上宣传、社区宣传、学校公司宣传 都是很好的选择。 另外根据调查显示，大部分的人们有良好的个人环保意识，都能记住并进行垃圾分类。所以只要宣传得到位，宣传得具体，大部分的人们还是能好好地养成垃圾分类的习惯。对此，笔者专门设计了既可以自动垃圾分类，又可以对人们进行垃圾分类知识的科普的设备。 </p>
<p><a href="https://imgchr.com/i/8Wm311" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/21/8Wm311.png" alt="8Wm311.png"></a></p>
<p>第 5 题 </p>
<p>你认为如何促进垃圾分类比较有效 [多选题]</p>
<p>第五个问题主要调查了人们认为如何促进垃圾分类比较有效。了解这一点有助于笔者实行最有效的方法促进垃圾分类。其中教育宣传和法律强制要求占比重比较大。这说明大多数人们觉得教育宣传是很有必要的，加强教育宣传可以很好的促进垃圾分类知识的传播。还说明有的时候强制性措施也是一种比较好的选择，除了通过法律的强制性措施，还可以通过智能垃圾分类的方法有效的分类。除此之 外，调查中奖励机制和受到他人的影响这两个方面占得比重也不小，都有百分之 四十左右。这说明，奖励机制和他人影响也是不容忽视的两个方面，可以通过适当的奖励来促使人们惊醒垃圾分类。 </p>
<p><a href="https://imgchr.com/i/8WmB9A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/21/8WmB9A.png" alt="8WmB9A.png"></a></p>
<p>第 6 题 </p>
<p>是否愿意通过装置进行垃圾分类的辅助及就行教育 [单选题] </p>
<p>第六个问题是询问人们是否愿意进行垃圾分类的辅助及就行教育。 </p>
<p><strong>“我们研发了智能分类垃圾箱，该产品能够对垃圾智能分类，提升垃圾的回收率，减少对环境污染，同时，该产品还可利用互联网采集数据，通过数据收集，计算出各区域消费者人群消费档次及消费倾向，并把该数据卖给商品供应商，供应商即可根据该数据将对应区域消费者群体所需求的商品及时销售给消费人群，省却中间时间与金钱的消耗，提供给人们更加便利的生活，迎合数据时代的需求。”–（辽阳科技学院，辽宁 沈阳）</strong> </p>
<p>这说明智能垃圾分类是存在巨大研究价值的。想要实行设备投入使用最大的问题就是人们是否配合。询问这个问题主要想 探究笔者设计的设备是否能获得人们的支持从而得到推广。数据表明绝大多数的 人都愿意配合，只有极少部分的人不同意。说明人们是愿意配合实施垃圾分类，并且有想要学习垃圾分类的意识的。这说明笔者的假设是具有可行性的，可以被大部分的人使用。</p>
<p><a href="https://imgchr.com/i/8WmcB8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/21/8WmcB8.png" alt="8WmcB8.png"></a></p>
<p><a href="https://imgchr.com/i/8WmcB8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/21/8WmcB8.png" alt="8WmcB8.png"></a></p>
<p>第 7 题 </p>
<p>你认为在装置辅助教育一段时间，撤除装置后，你是否能保持垃圾分类意识 [单选题] </p>
<p>在笔者的假设中，绝对靠科技手段进行垃圾分类是不可靠的，设备也可能出现许多问题且需要人进行维护。所以垃圾分类最后的终点必然是要靠人们自己分类，养成这样的习惯。笔者认为，设备终有被撤除的一天。而撤除设备后如果人们分类情况又回到之前的状态，这相当于白白浪费了这些时间和金钱。因此，了解人们是否能从这些设备中获益十分重要。根据调查显示，绝大多数的人都表示能在教育一段时间，辅助装置撤除后，保持垃圾分类的意识合理地进行垃圾分类。所以辅助装置能很好地帮助人们养成垃圾分类的习惯，从而是垃圾在没有辅助装置的情况下也能很好的进行分类。</p>
<p><a href="https://imgchr.com/i/8WnMb8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/21/8WnMb8.png" alt="8WnMb8.png"></a></p>
<p><strong>总结</strong> </p>
<p>在本阶段，我们对垃圾分类中所存在的问题进行了进一步的调查和分析，同时通过查阅国内外文献并设计调查问卷了解人们日常垃圾分类的情况，小组成员整理了针对对垃圾分类不同的观点和态度。目前，垃圾分类所面临的最大问题是 不知道垃圾所属的种类。因此，我们坚定了通过设计智能垃圾桶来起到教育和意识养成的辅助作用的想法。回顾我们的研究过程，我们采取问卷调查的方式设计逻辑跳转分别对已经进 行垃圾分类和尚未进行垃圾分类的人群进行不同方面的调查，一定程度上了解到目前垃圾分类在实际操作上的不便之处并分享了已经进行垃圾分类的人的经验 并以此作为推广垃圾分类的参考。然而在调查问卷的投放中我们主要面对的对象是我们的同学，并不能充分地代表广大群众，我们将在接下来的过程中继续通过问卷进行调查且扩大调查范围，并在条件允许的情况下针对有代表性的个体进行 单独访谈调查。而且随着研究的进一步推进我们将把我们重点转移到智能垃圾桶的制作，我们已经完成图像识别垃圾桶的软件及硬件设计，在实践阶段，我们会将智能垃圾桶的数据库以及模型的实验。</p>
<p><strong>引用文献：</strong> </p>
<p><strong>美国 托夫勒:</strong></p>
<p>《第三次浪潮》</p>
<p><strong>中国环保部:</strong></p>
<p>《2016 年全国大、中城市固体废物污染环境防治年报》</p>
<p><strong>习近平:</strong></p>
<p>2016 年 12 月 21 日下午 总书记中央财经领导小组第十四次会议</p>
<p>《全国 46 个重点城市试行垃圾分类舆情分析报告》</p>
<p><strong>赵晨 中国经济时报</strong> </p>
<p><strong>辽阳科技学院，辽宁 沈阳</strong> </p>
<p><strong>天津师范大学软件学院，天津</strong>: </p>
<p>《城市生活垃圾分类处理问题探究——基于上海市社区的个案调研》</p>
<p>《垃圾分类期待完整“闭环”》</p>
<hr>
<h2 id="实践报告-practice-report"><a href="#实践报告-practice-report" class="headerlink" title="实践报告(practice report)"></a><strong>实践报告(practice report)</strong></h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a><strong>第一部分</strong></h3><p>在此阶段，我们对之前的研究假设和猜想进行了实践取证，同时对我们的实物产品，智能垃圾桶进行了测试以及数据库的充实。我们此次实践的核心是完成了智能垃圾分类装置的模型制作并对其进行多 次测试以及数据取样以确保其稳定性及用户使用体验。我们在装置模型中已经成功实现通过摄像头获取垃圾特征信息并将其和数据库已保存的各个特征文件进行对比，通过相似度的比较让处理器识别出垃圾种类同时产生信号来控制置于垃圾桶上的电机，使其转动并打开垃圾桶盖，在我们的试验中我们针对图像的反馈 进行了改进，为方便使用者确定摄像头所对焦的位置我们假装了显示屏帮助使用者将垃圾完整地置于镜头识别区域中。对于猜想的取证，我们采取线上问卷调查和线上访谈的形式，调查内容是针对人们对于垃圾分类中的困扰和使用装置来辅助垃圾分类的态度。 </p>
<h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a><strong>第二部分</strong></h3><p>通过对于垃圾分类现状的调查，我们发现从来不进行垃圾分类的人群所占比例较小，而占比最多的是偶尔分类的人群，其中针对此人群进行的原因调查显示，不知道垃圾种类和垃圾桶无分类占比达 96.35%这也证实了我们设计的智能垃圾 分类装置解决客观设备问题以及辅助进行分类的作用。同时通过线上访谈，我们 了解到一些细节会在心理上影响垃圾分类。比如，垃圾桶在使用过程中会不可避免地变脏变臭导致人们会对打开垃圾桶盖产生抗拒情绪，而清理垃圾桶又会消耗 人力。这个问题将在我们的系统使用中得到解决，本装置自动识别并完成开启， 停滞，关闭的过程完全避免使用者与垃圾桶的接触，同时控制垃圾滋生细菌的传播。</p>
<h3 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a><strong>第三部分</strong></h3><p>关于本装置的实践计划，我们原定利用寒假及春节假期，通过在家的大量数据导入及实验完善其可行性和实用性。当错误率较低时，制作缩小版并发放给同学、邻里等方便进行采访且有研究价值的人群，进行小规模试用。然而，受新型冠状病毒影响，本计划未能完全实现，目前只进行对设备的完善。但是我们并未放弃该计划，在如果情况有所好转，我们拟定暂时现在参与者 的家中投放使用同时利用这段时间录入更多的垃圾特征文件，增强模拟的真实性。 本装置目的在于辅助和培养人们进行垃圾分类的习惯所以我们会在实践时对垃圾分类的情况进行记录和对比。关于影响力方面，首先我们坚信在试用结束后，垃圾分类情况将会大大好转，即使存在个别错误，垃圾分类的正确率将接近 100%。而在习惯养成方面，大多数原本不垃圾分类的人群基本都会进入垃圾分类的行列，即使不能确保所有人使用后都能对垃圾分类熟练运用，但有学习意识是必然趋势。 当今社会，智能垃圾分类已成为热潮，而我们与众不同的是，我们并不是以 人工智能代替人，而是用人工智能帮助人学习。我们在研究过程中也借鉴不少已 经卓有成效的事例，在能力所及处完善自我。 </p>
<h3 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a><strong>第四部分</strong></h3><p>介于新型冠状病毒的影响，我们尚有未完成的计划，这些都是在全国站前我们想要尽力努力完成的。在全国站前，我们争取完成小规模试用，通过对试用人 群进行再次问卷调查，对比两次结果，研究设备对人们的影响。其次若还有富余时间，我们会对结果进行分析，再次改进设备，有可能会进行进一步的试用，使结果更加准确。当然比较重要的未完成部分便是如何实现培养民众分类意识。对此我们已有完整的想法，但在实现问题上存在部分困难还待解决。之后的时间，我们将以此任务为中心完成进一步实验。</p>
<hr>
<h2 id="成果展示（the-final-report）（including-thetranslation）"><a href="#成果展示（the-final-report）（including-thetranslation）" class="headerlink" title="成果展示（the final report）（including thetranslation）"></a>成果展示（the final report）（including thetranslation）</h2><p><img src="https://s1.ax1x.com/2020/03/21/8WuZoF.png" alt="8WuZoF.png"></p>
<h3 id="①摘要"><a href="#①摘要" class="headerlink" title="①摘要"></a>①摘要</h3><p>本小队此次研究了目前垃圾分类效果不理想的问题，笔者通过实际调查以及对相关资料的搜集发现现在各社区内的垃圾分类实行情况并不顺利。我们结合自身情况做出来假设：市民遇到的阻力主要是对垃圾种类知识的缺乏。因此我们设计了智能垃圾分类装置，该装置通过图像识别技术识别垃圾种类辅助进行垃圾分类，本装置可以通过显示种类补充垃圾分类知识， 本装置可以在解决垃圾桶本身存在的分类问题并同时进行教育。</p>
<p>我们针对个人及家庭的垃圾分类情况和设计了调查问卷并进行线上的 调查，结果与我们的猜想相符，我们进行了后续的实践，做出了我们设想中智能垃圾分类装置的模型并对其数据库进行了完善，如果该装置能得到实用将很大程度上促进垃圾分类的执行效果。 </p>
<h3 id="②背景介绍"><a href="#②背景介绍" class="headerlink" title="②背景介绍"></a>②背景介绍</h3><p>垃圾分类作为我国节约资源的国家战略中不可忽视的一部分目前正受到越来越多的关注。而就我国垃圾分类的现状并不理想。如果能保质保量地进行垃圾分类不仅减少处理垃圾的成本，还能将大量的资源回收再利用。</p>
<p>要想推广垃圾分类，宣传教育是必不可少的 一部分，有垃圾分类的市民数量正在增加，但是当前的宣传存在不够具体的问题，根据我们的调查结果，不进行垃圾分类的原因在中不知道垃圾所属的具体种类占很大的比例。因此我们希望通过对垃圾分类装置的革新可以辅助人们垃圾分类意识的培养最终达到即使在没有本装置的情况下仍可以自觉进行垃圾分类。 </p>
<h3 id="③研究部分"><a href="#③研究部分" class="headerlink" title="③研究部分"></a>③研究部分</h3><p>我们的研究假设是通过使用智能垃圾分类装置，进行垃圾分类知识的普及可以促进垃圾分类的进程。该研究项目将社科问题与科技相结合，关注了社会当前面临的一 个热点话题，且也与新时代科技创新的重点相契合，更是考虑到利用科技不是长久之 计，唯有培养民众垃圾分类的素养，才能保证这一问题得到解决。</p>
<p>研究问题主要针对如何解决当代中国民众垃圾分类意识不成熟，缺少垃圾分类知识的状况进行研究。目标明确、具体。 </p>
<p>我们通过搜寻文献及相关消息了解了目前垃圾分类情况较好的国家和地区，在研究其成功的原因时，有一项是所有成功例子的通性，那就是民众的垃圾分类意识和垃圾分类知识较强，垃圾分类其目的最终是为人民服务，理应由人民来执行。与其花费 大量成本在中端和末端进行垃圾分类，让居民能够在垃圾投放的第一线就进行垃圾分 类明显效率更高，效果更好。但是据了解，长期以来居民参加垃圾分类热情不高，其中主要受两点因素影响：“不知道要去分”和“不知道怎么分”相比较而言，“不知道怎么分”的问题更加严重，这直接影响垃圾分类的执行，即使是有垃圾分类意识的人，如果不知道具体的垃圾怎么分类不仅不能做出实际的行动，积极性也会受到打击，长此以往垃圾分类意识就再次淡薄。因此我们希望能通过该装置解决“不知道怎么分”的问题，从实际出发解决垃圾分类问题。</p>
<p>在设计一个适用于当今社会垃圾分类现状的设备前，对人们的情况进行了解是必不 可少的，这能保证笔者的研究并不是无用功，并且能明确指出笔者的研究方向，不会 偏离主题。为明确方向，笔者进设计并进行了线上问卷调查。问卷分别调查了参与者 目前的垃圾分类状况，垃圾分类意识，遇到的困难以及对于使用装置辅助垃圾分类的 态度。调查结果证实了我们的猜想，证明智能垃圾分类装置的合理性。</p>
<p>在理论研究中，我们对垃圾分类中所存在的问题进行了进一步的调查和分析，同时通过查阅国内外文献并设计调查问卷了解人们日常垃圾分类的情况，小组成员整理了针 对对垃圾分类不同的观点和态度。目前，垃圾分类所面临的最大问题是不知道垃圾所属的种类。因此，我们坚定了通过设计智能垃圾桶来起到教育和意识养成的辅助作用的想法。 </p>
<h3 id="④实践部分"><a href="#④实践部分" class="headerlink" title="④实践部分"></a>④实践部分</h3><p>实践内容： </p>
<p>一．我们将智能垃圾分类装置的模型制作出来并通过实体操作对其进行了实验。 </p>
<p>1.我们通过使用摄像头获取垃圾特征信息 </p>
<p>2.我们将摄像头获取的特征和数据库已保存的各个特征文件进行对比 </p>
<p>3.处理器将比对出的结果转化为电子信号并将信号发送给了控制智能垃圾桶盖的电机，电机带动相对应的垃圾桶盖转动打开 </p>
<p>4.我们发现使用者不能确定是否将自己需要投放至垃圾桶中的垃圾置于摄像机镜 头的对焦处，导致有些基础的物品无法被识别出来 </p>
<p>5.因此，我们加装了电子显示屏以帮助使用者将垃圾完整地置于镜头识别区域中 </p>
<p>二． 我们也通过线上调查的形式针对人们对于垃圾分类中的困扰和使用装置来辅 </p>
<p>助垃圾分类的态度展开了调查 </p>
<ol>
<li><p>通过对垃圾分类现状的调查，我们发现从来不进行垃圾分类的人群所占比例较小，而占比最多的是偶尔分类的人群 </p>
</li>
<li><p>我们针对此人群进行的原因调查显示，不知道垃圾种类和垃圾桶无分类占比达 96.35% </p>
</li>
</ol>
<p>实践与研究的关系： </p>
<p>我们通过对我们将要试用的智能垃圾分类装置模型进行实体操作，可以确保我们 在未来推广使用这款装置的时候不会出现一些因技术上原因而导致的产品的缺点，以确保我们的研究可以方便准确的帮助人们学习与习惯垃圾分类。同时我们也通 过线上调查的形式对人们对于垃圾分类中的困扰以及对通过智能垃圾分类装置辅助垃圾分类的态度以预估我们的装置未来投入使用后的认可度。我们也希望能够 更加完美的改进装置已尽可能多的解决人们对于当下垃圾分类的困扰。 </p>
<p>效果评估： </p>
<p>我们目前在试验阶段中的装置对于正常垃圾分类的正确率几乎高达100%，同时我们也通过几位同学的试用，对于我们的装置也给予了较高的满意度。唯一美中不足的是我们的产品拥有较高的造价。 </p>
<h3 id="⑤未来方向"><a href="#⑤未来方向" class="headerlink" title="⑤未来方向"></a>⑤未来方向</h3><p>下一步，我们主要把重心放在改进装置上。 而现在的难题是如何在病毒的阻碍下完成实验，以及在保证性能的条件下如何使成本更低。我们准备继续我们的实践研究，对我们的实验样品进行更多的测试，并进而改进它的功能。 </p>
<p><img src="https://s1.ax1x.com/2020/03/21/8WM9uq.png" alt="8WM9uq.png"></p>
<h3 id="①Abstract"><a href="#①Abstract" class="headerlink" title="①Abstract"></a>①Abstract</h3><p>Our team studied that the current garbage classification effect is not ideal. Through the actual investigation and the collection of relevant data, the we found that the implementation of garbage classification in each community is not very successful.We make an assumption based on our own situation: the main resistance encountered by the public is the lack of knowledge of garbage types.Therefore, we designed an AI garbage classification device, which can identify garbage types through image recognition technology to assist garbage classification. This device can supplement garbage classification knowledge by displaying types, and this device can solve the classification problems of the garbage bins themselves and carry out education at the same time. We aimed at the situation of personal and family garbage classification, then </p>
<p>we design the questionnaires and online survey. The results are in conformity with our conjecture. We conducted a follow-up research, made us suppose intelligent garbage classifying device model and to improve its database. If the device can get practical will largely promote the implementation of garbage classification effect. </p>
<h3 id="②Introduction"><a href="#②Introduction" class="headerlink" title="②Introduction"></a>②Introduction</h3><p>Garbage classification, as a part of the national strategy of resource conservation in China, is attracting more and more attention.However, the status quo of garbage classification in China is not ideal.If the quality and quantity of garbage can be guaranteed, not only the cost of garbage treatment can be reduced, but also a lot of resources can be recycled. </p>
<p>In order to promote garbage classification, publicity and education turn to indispensable parts. The number of citizens with garbage classification is increasing, but the current publicity is not specific enough. According to our survey results, the reasons for not doing garbage classification that some people do not know the specific types of garbage is accounted for a large proportion. Therefore, we hope that the innovation of garbage classification device can help people cultivate their garbage classification consciousness and finally achieve the goal of garbage classification even without this device. </p>
<h3 id="③Research"><a href="#③Research" class="headerlink" title="③Research"></a>③Research</h3><p>Our hypothesis is that the popularization of garbage classification knowledge can promote the process of garbage classification through the use of intelligent garbage classification device.This research project combines social science issues with science and technology to focus on a hot topic facing the society at present, which is also in line with the focus of scientific and technological innovation in the new era. Moreover, it takes into account that the use of science and technology is not a long-term solution, and only the only guaranteed solution is cultivating people’s literacy in garbage classification guaranteed. The research problems mainly focus on how to solve the problem that the awareness of garbage classification is not mature and the knowledge of garbage classification is not enough.Our goal is clear and specific. </p>
<p>We learned about the countries and regions with good garbage classification status by searching literature and relevant information. In the study of the reasons for its success, there is a commonality of all successful examples, which is that the public’s awareness of garbage classification and garbage classification knowledge is strong, the purpose of garbage classification is ultimately to serve the people, should be implemented by the people. Rather than spend a lot of money on garbage classification at the middle and end, it is more efficient and effective for residents to conduct garbage classification at the first line of garbage delivery.But it is known that for a long time residents participate in garbage sorting enthusiasm is not high, mainly affected by two factors: “I don’t want to do” and “don’t know how to” comparison, “don’t know how to” problem is more serious, which directly influence the execution of the garbage sorting, even a person with a sense of garbage classification, if you don’t know specific how garbage classification not only can’t make the actual action, enthusiasm will hit, weak consciousness of waste classification in the long term will once again.Therefore, we hope to solve the problem of “don’t know how to do” through this device, and solve the garbage classification problem from the perspective of reality. Before designing a device applicable to the current situation of garbage classification in today’s society, it is essential to understand people’s situation, which can ensure that the author’s research is not useless, and can clearly point out the author’s research direction, will not deviate from the theme.</p>
<p>To clarify the direction, the author designed and conducted an online questionnaire survey.The questionnaire investigated participants’ current status of garbage classification, awareness of garbage classification, difficulties encountered and attitudes towards the use of devices to assist garbage classification.The investigation results confirm our conjecture and prove the rationality of intelligent waste sorting device. In the theoretical research, we further investigated and analyzed the problems existing in garbage classification. At the same time, we consulted domestic and foreign literatures and designed questionnaires to learn about People’s Daily garbage classification. The team members sorted out different views and attitudes towards garbage classification.At present, the biggest problem of garbage classification is not knowing what kind of garbage belongs to.Therefore, we firmly believe that the design of intelligent garbage can can play an auxiliary role in education and consciousness cultivation. </p>
<h3 id="④-Implementation"><a href="#④-Implementation" class="headerlink" title="④ Implementation"></a>④ Implementation</h3><p>Practice content: </p>
<p>A.We made the model of the intelligent garbage classification device and experimented with it </p>
<p>through physical operation. </p>
<ol>
<li><p>We use cameras to obtain garbage feature information </p>
</li>
<li><p>We compare the features obtained by the camera with the features saved by the database </p>
</li>
<li><p>The processor converts the result of comparison into electronic signals and sends the signals to the motor controlling the intelligent garbage can cover, which drives the corresponding garbage can cover to rotate and open </p>
</li>
<li><p>We found that we can’t make sure whether users place the garbage they need to put into the trash bin in the focus of the camera lens, leading to some basic items that could not be identified </p>
</li>
<li><p>Therefore, we have added electronic display screens to help users place garbage in the lens recognition area completely </p>
</li>
</ol>
<p>B.We also conducted an online survey on people’s attitudes towards waste separation and the </p>
<p>use of devices to assist waste separation </p>
<ol>
<li><p>Through the investigation on the status quo of garbage classification, we find that the proportion of people who never classify garbage is small, while the largest proportion is people who classify occasionally </p>
</li>
<li><p>According to our investigation on the reasons for this group, 96.35% of them do not know the types of garbage and refuse can not be classified </p>
</li>
</ol>
<p>The relationship between practice and research: </p>
<p>We test our garbage classification device model physically, which will ensure that our promotion in the future when using this device won’t appear some product defects caused by technical reasons and ensure that our research can be accurate to help people learn and habits garbage classification. </p>
<p>At the same time, we also estimated the recognition degree of our device after it was put into use in the future by means of an online survey on people’s troubles in garbage classification and their attitude towards the auxiliary garbage classification through the intelligent garbage classification device.We also hope to improve the device and improve as much as possible to solve the current garbage classification problem. </p>
<p>Effect evaluation: </p>
<p>At present, the accuracy rate of our device for normal garbage classification in the experiment stage is almost 100%. Meanwhile, we also give high satisfaction to our device through the trial of several classmates. The only drawback in the ointment is that our products have a high price. </p>
<h3 id="⑤Discussions"><a href="#⑤Discussions" class="headerlink" title="⑤Discussions"></a>⑤Discussions</h3><p>For the next step, we will focus on improving the device. Now,the challenge is how we complete it when the virus is on our way,and how to make it cheaper without compromising performance. We plan to continue our practical research. We will conduct more tests on our experimental samples, and further improve its functions. </p>
<hr>
<h1 id="Final-Result"><a href="#Final-Result" class="headerlink" title="Final Result"></a>Final Result</h1><h2 id="证书certification"><a href="#证书certification" class="headerlink" title="证书certification"></a>证书certification</h2><p> <img src="file:///C:/Users/Administrator/Desktop/%E4%BD%9C%E4%B8%9A/CTB/%E7%94%B5%E5%AD%90%E8%AF%81%E4%B9%A6" alt="file:///C:/Users/Administrator/Desktop/%E4%BD%9C%E4%B8%9A/CTB/%E7%94%B5%E5%AD%90%E8%AF%81%E4%B9%A6"> </p>
<h2 id="演讲视频video"><a href="#演讲视频video" class="headerlink" title="演讲视频video"></a>演讲视频video</h2><video id="video" controls="" preload="none">
    <source id="mp4" src="C:/Users/Administrator/Desktop/作业/CTB/我的影片.mp4" type="video/mp4">
</video>
]]></content>
      <categories>
        <category>competitions</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习2</title>
    <url>/2020/07/20/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A02/</url>
    <content><![CDATA[<h1 id="C语言笔记2"><a href="#C语言笔记2" class="headerlink" title="C语言笔记2"></a>C语言笔记2</h1><h2 id="第三课-class-3"><a href="#第三课-class-3" class="headerlink" title="第三课 class 3"></a>第三课 class 3</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><blockquote>
<p>if(&lt;表达式&gt;) 语句1；  </p>
</blockquote>
<p>（语句只有一条）</p>
<blockquote>
<p>if(&lt;表达式&gt;)</p>
<p>  {</p>
<p>​    语句块1；</p>
<p>  }</p>
</blockquote>
<blockquote>
<p>if(&lt;表达式&gt;)</p>
<p>​    语句1；</p>
<p>else</p>
<p>​    语句2；</p>
</blockquote>
<blockquote>
<p>if(&lt;表达式1&gt;)</p>
<p>​    语句1；</p>
<p>else if(&lt;表达式2&gt;)</p>
<p>​    语句2；</p>
<p>else if(&lt;表达式3&gt;)</p>
<p>​    语句3；</p>
<p>else</p>
<p>​    语句4；</p>
</blockquote>
<p>0表示假，非0为真：if(3) … =&gt;为真</p>
<p>if的嵌套：else与最近的未配对的if配对，与缩进无关</p>
<blockquote>
<p>if（）</p>
<p>​    {if（）语句1；}</p>
<p>else</p>
<p>​    语句2</p>
</blockquote>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><blockquote>
<p>switch(表达式)  //表达式非表达真假，出现在常量表达式里，执行其后面的内容</p>
<p>{case 常量表达式1：语句组1；break; // 若没有break继续执行下面的情况不进行判断，有则跳出switch</p>
<p> case 常量表达式2：语句组2；break;</p>
<p> … …</p>
<p> case 常量表达式n：语句组n；break;</p>
<p> default： 语句n+1；</p>
<p>}</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> grade=getchar();</span><br><span class="line">	<span class="keyword">switch</span>(grade)</span><br><span class="line">	&#123;<span class="keyword">case</span><span class="number">'</span>A<span class="number">'</span>:<span class="built_in">printf</span>(<span class="string">"85~100\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">	 <span class="keyword">case</span><span class="number">'B</span><span class="number">'</span>:<span class="built_in">printf</span>(<span class="string">"70~84\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">	 <span class="keyword">case</span><span class="number">'</span>C<span class="number">'</span>:<span class="built_in">printf</span>(<span class="string">"60~69\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">	 <span class="keyword">case</span><span class="number">'</span>D<span class="number">'</span>:<span class="built_in">printf</span>(<span class="string">"&lt;60\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">	 <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">"error\n"</span>);</span><br><span class="line">	 &#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s1,s2;</span><br><span class="line">	<span class="keyword">char</span> a;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%c%d"</span>,&amp;s1,&amp;a,&amp;s2) ;</span><br><span class="line">	<span class="keyword">switch</span>(a)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'+'</span>:<span class="built_in">printf</span>(<span class="string">"%d %c %d = %d"</span>,s1,a,s2,s1+s2);<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'-'</span>:<span class="built_in">printf</span>(<span class="string">"%d %c %d = %d"</span>,s1,a,s2,s1-s2);<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'*'</span>:<span class="built_in">printf</span>(<span class="string">"%d %c %d = %d"</span>,s1,a,s2,s1*s2);<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/'</span>:<span class="built_in">printf</span>(<span class="string">"%d %c %d = %d"</span>,s1,a,s2,s1/s2);<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">"error\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>while语句；do—while语句；for语句（goto&lt;标号&gt;，不建议使用）</p>
<h4 id="while：先判断再执行（修改循环变量）"><a href="#while：先判断再执行（修改循环变量）" class="headerlink" title="while：先判断再执行（修改循环变量）"></a>while：先判断再执行（修改循环变量）</h4><blockquote>
<p>while(&lt;表达式&gt;)</p>
<p>{</p>
<p>语句块；（循环体）</p>
<p>}</p>
</blockquote>
<p>简化：while(x!=0) ==&gt;while(x)</p>
<p>​           while(x==0)==&gt;while(!x)</p>
<p>空语句：while（x++&lt;10000）; ==&gt;结果：x=10000</p>
<p>单语句：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(x--&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>,x);</span><br><span class="line"><span class="comment">//out:9876543210</span></span><br><span class="line"></span><br><span class="line">x=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(--x&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>,x);</span><br><span class="line"><span class="comment">//out:987654321</span></span><br></pre></td></tr></table></figure>



<h4 id="do-while：先循环再判断，至少循环一次"><a href="#do-while：先循环再判断，至少循环一次" class="headerlink" title="do while：先循环再判断，至少循环一次"></a>do while：先循环再判断，至少循环一次</h4><blockquote>
<p>do</p>
<pre><code>语句块；</code></pre><p>while（&lt;表达式&gt;)；</p>
</blockquote>
<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><blockquote>
<p>for(表达式1；表达式2；表达式3)</p>
<p>​        循环语句</p>
</blockquote>
<p><strong>1.判断表达式1，2.判断表达式2(不成立出循环)，3.执行循环语句，4.按表达式3修改循环变量，5.判断表达式2 … …</strong></p>
<p>表达式可以没有，但；一定要有</p>
<p>1到100和：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;<span class="number">1</span>&lt;=<span class="number">100</span>;i++)</span><br><span class="line">    sum+=i</span><br></pre></td></tr></table></figure>

<p>e.g.九九乘法表：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) </span><br><span class="line">	&#123;<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">	 &#123;<span class="built_in">printf</span>(<span class="string">"%d*%d=%2d "</span>,j,i,i*j);</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*out:</span></span><br><span class="line"><span class="comment">1*1= 1</span></span><br><span class="line"><span class="comment">1*2= 2 2*2= 4</span></span><br><span class="line"><span class="comment">1*3= 3 2*3= 6 3*3= 9</span></span><br><span class="line"><span class="comment">1*4= 4 2*4= 8 3*4=12 4*4=16</span></span><br><span class="line"><span class="comment">1*5= 5 2*5=10 3*5=15 4*5=20 5*5=25</span></span><br><span class="line"><span class="comment">1*6= 6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36</span></span><br><span class="line"><span class="comment">1*7= 7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49</span></span><br><span class="line"><span class="comment">1*8= 8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64</span></span><br><span class="line"><span class="comment">1*9= 9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81*/</span></span><br></pre></td></tr></table></figure>

<p>并列循环变量名可同名，嵌套循环变量名不可同名</p>
<p>break可跳出本级循环</p>
<p>continue回到循环开头进行下一次循环判断</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习1</title>
    <url>/2020/07/07/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<h1 id="C语言笔记1"><a href="#C语言笔记1" class="headerlink" title="C语言笔记1"></a>C语言笔记1</h1><h2 id="第一课-class-1"><a href="#第一课-class-1" class="headerlink" title="第一课 class 1"></a>第一课 class 1</h2><p>C is a language that faces processes.</p>
<p>It can recognize capital or not.</p>
<p>1.Install Dev-C++ (we can also use vs code)</p>
<p>2.Show page like this:</p>
<p><img src="https://s1.ax1x.com/2020/07/07/UA3EAs.png" alt="UA3EAs.png"></p>
<p>*‘Include’ is a word that has been definited, we can’t use it as variable again.</p>
<p>*Content after ‘include’ is the stock of C</p>
<p><em>Inside ‘/\</em> */‘ is the annotation(注释).</p>
<p>*Another way to show annotation is after ‘//‘</p>
<p><em>The difference between ‘/\</em> */‘ and ‘//‘ :  ‘/* */‘ can include paragraphs, but ‘//‘ can only include one line.</p>
<p>The blue one means the annotation.</p>
<p><img src="https://s1.ax1x.com/2020/07/07/UAGlk9.png" alt="UAGlk9.png"></p>
<p>*‘Main’ is the entre of the function and inside the ‘ { } ’ is the body of the function. There is only one main function at anywhere.</p>
<p>*After every sentence, we should add ‘；’</p>
<p>3.Then we can write some simple code and click the compile(the red circle one) to check whether there is a grammatic error:</p>
<p><img src="https://s1.ax1x.com/2020/07/07/UAYFx0.png" alt="UAYFx0.png"></p>
<p>*’Printf’ means to print/show the content inside the (). It won’t change to a new line unless ‘\n’ is added.</p>
<p>*Content in “ “ are considered as string, and printed out.</p>
<p>*’\n’ means to change to another line.</p>
<ol start="4">
<li><p>After clicking compile: if there is an error, it will show you where it is; if there isn’t an error, it will create an exe file in the same file as the c file.</p>
<p>We can also use the exe file to excute the code.</p>
</li>
</ol>
<ol start="5">
<li>If there is nothing wrong we can click the button next to compile(on the right), the ‘run’ button. cmd will appear and the content after printf will be shown.</li>
</ol>
<ol start="6">
<li><p><img src="https://s1.ax1x.com/2020/07/07/UA0o9g.png" alt="UA0o9g.png"></p>
<p>“%d” means the integer(s) behind the ‘，’ will be at the postion of “%d” when excuting.</p>
<p>We need to identify the variables first and give them values. Then calculating,and ouput.</p>
<p><img src="https://s1.ax1x.com/2020/07/07/UADoOs.jpg" alt="UADoOs.jpg"></p>
</li>
</ol>
<ol start="7">
<li>“scanf()” input values</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;a,&amp;b); <span class="comment">//input numbers are separated by ','</span></span><br></pre></td></tr></table></figure>

<p>add “”in””string:</p>
<p>example： “Please input “yes””</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input \"yes\"\n"</span>);</span><br></pre></td></tr></table></figure>

<p>function in function:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>(a,b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> <span class="comment">//int means input is integer; if there is no requirement, use "void"</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> z;</span><br><span class="line"><span class="keyword">if</span>(x&gt;y) z=x;</span><br><span class="line"><span class="keyword">else</span> z=y;</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8.characters that can be used:</p>
<blockquote>
<p>abcde… …z</p>
</blockquote>
<blockquote>
<p>ABCDE… …Z</p>
</blockquote>
<blockquote>
<p>0~9</p>
</blockquote>
<blockquote>
<p>+-*/=,.:;?“ ‘~|&amp;^!%#(){}[]&lt;&gt; (space) (tab) </p>
</blockquote>
<p>保留字(words that have been identified): (32)</p>
<p>type：int, long, float, … …</p>
<p>sentences: if…else, while, for, … …</p>
<p>store: auto, static,… …</p>
<p>calculation: sizeof</p>
<p><img src="https://s1.ax1x.com/2020/07/07/UAor6I.jpg" alt="UAor6I.jpg"></p>
<p>*put int in char, it will show the character through ASCII</p>
<p>*put char in int, it will show the value of ASCII</p>
<p>*if the integer is positive, it is stored as true form; if it is negative, it is stored as  complement form.</p>
<p>*initialization:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">5</span>;</span><br><span class="line">in b=<span class="number">10</span>,c=<span class="number">10</span>,d=<span class="number">10</span>; <span class="comment">//not b=c=d=10</span></span><br></pre></td></tr></table></figure>





<p>home exercise：guess number（simple form）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n=<span class="number">10</span>,g;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"guess a number from 0 to 100.\n"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;g);</span><br><span class="line">	<span class="keyword">while</span>(g!=n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (g&gt;n) <span class="built_in">printf</span>(<span class="string">"It is too large!\n"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"It is too small!\n"</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;g);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"You are right!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>out：</p>
<p>guess a number from 0 to 100.<br>50<br>It is too large!<br>25<br>It is too large!<br>12<br>It is too large!<br>6<br>It is too small!<br>8<br>It is too small!<br>9<br>It is too small!<br>10<br>You are right!</p>
<hr>
<p>Process exited after 20.56 seconds with return value 0</p>
<h2 id="第二课-class-2"><a href="#第二课-class-2" class="headerlink" title="第二课 class 2"></a>第二课 class 2</h2><p>1.’ ‘内加字符，” “加输入输出</p>
<p>2.int * i –&gt;*指针</p>
<p>3.a=b: = 赋值 assignin </p>
<p>4.初始化赋值 initialization：int a=0;</p>
<p>5.sizeof ：看字节数</p>
<p>6.输出输入（输入格式以scanf后引号内为准，&amp;：取地址）</p>
<p>e.g. the input values a b are divided by “,”</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>

<p>7.测试testing standard：正确数据 correct one，临界值 the boundary，错误数据 wrong one</p>
<p>const：定义常量 constant，不可改值 can’t be change，一般大写常量capital，在内存里有空间exist in memory</p>
<p>#define：用途同const，在内存内无空间 doesn’t exist in memory</p>
<p>8.</p>
<table>
<thead>
<tr>
<th><strong>类型名称</strong></th>
<th><strong>类型说明符</strong></th>
<th><strong>字节数</strong></th>
<th><strong>数值范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>基本整型</strong></td>
<td><strong>int</strong></td>
<td><strong>2</strong></td>
<td><strong>-32768~32767</strong></td>
</tr>
<tr>
<td><strong>短整型</strong></td>
<td><strong>short</strong> [int]</td>
<td><strong>2</strong></td>
<td><strong>-32768~32767</strong></td>
</tr>
<tr>
<td><strong>长整型</strong></td>
<td><strong>long</strong> [int]</td>
<td><strong>4</strong></td>
<td><strong>-2147483648~ 2147483647</strong></td>
</tr>
<tr>
<td><strong>无符号基本整型</strong></td>
<td><strong>unsigned</strong> [int]</td>
<td><strong>2</strong></td>
<td><strong>0~65535</strong></td>
</tr>
<tr>
<td><strong>无符号短整型</strong></td>
<td><strong>unsigned short</strong> [int]</td>
<td><strong>2</strong></td>
<td><strong>0~65535</strong></td>
</tr>
<tr>
<td><strong>无符号长整型</strong></td>
<td><strong>unsigned long</strong> [int]</td>
<td><strong>4</strong></td>
<td><strong>0~4294967295</strong></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>运算符</th>
<th>运算规则</th>
<th>操作数数目</th>
<th>优先级</th>
<th>结合方向</th>
</tr>
</thead>
<tbody><tr>
<td>－</td>
<td>负号</td>
<td>单目</td>
<td>2</td>
<td>右结合</td>
</tr>
<tr>
<td>＋</td>
<td>加法</td>
<td>双目</td>
<td>4</td>
<td>左结合</td>
</tr>
<tr>
<td>－</td>
<td>减法</td>
<td>双目</td>
<td>4</td>
<td>左结合</td>
</tr>
<tr>
<td>＊</td>
<td>乘法</td>
<td>双目</td>
<td>3</td>
<td>左结合</td>
</tr>
<tr>
<td>／</td>
<td>除法</td>
<td>双目</td>
<td>3</td>
<td>左结合</td>
</tr>
<tr>
<td>％</td>
<td>求余或模</td>
<td>双目</td>
<td>3</td>
<td>左结合</td>
</tr>
</tbody></table>
<p>同级：左集合，从左往右：d=3*5/4</p>
<p>d=a=3：优先级先右后左</p>
<p>整数相除没有余数，截取整数：1/3+1/3+1/3=0</p>
<p>浮点数正常计算</p>
<p>10/3<em>3=10,10.0/3\</em>3=10.0</p>
<p>9.自增自减：</p>
<p>x=10,y=++x,y=11,x=11</p>
<p>x=10,y=x++,y=10,x=11</p>
<p>i=6</p>
<p>++i=7,i=7</p>
<p>i++=7,i=8</p>
<p>a=–i,a=7,i=7</p>
<p>b=i–,b=7,i=6</p>
<p>-i++=-6,i=7</p>
<p>10.强制转换：(int)(x+y)    (有损失some value will be lost)</p>
<p>11.关系运算（1/0表示真假）</p>
<p>5&gt;(4&lt;5) 可以运行4&lt;5值为1（真），5&gt;1</p>
<p>==比=优先级高</p>
<p><strong>1、圆括号【（）】、下标运算符【[]】、分量运算符的指向结构体成员运算符【-&gt;】、结构体成员运算符【.】；</strong></p>
<p><strong>2、逻辑非运算符【!】、按位取反运算符【~】、自增自减运算符【++】【 –】、负号运算符【-】、类型转换运算符【(类型)】、指针运算符和取地址运算符【*】【&amp;】、长度运算符【sizeof】；</strong></p>
<p><strong><em>3、乘法运算符【\</em>】、除法运算符【/】、取余运算符【%】；</strong></p>
<p><strong>4、加法运算符【+】、减法运算符【-】；</strong></p>
<p><strong>5、左移动运算符【&lt;&lt;】、右移动运算符【&gt;&gt;】；</strong></p>
<p><strong>6、关系运算符【&lt; 】【&gt;】【&lt;=】【 &gt;= 】；</strong></p>
<p><strong>7、等于运算符【==】、不等于运算符【!=】；</strong></p>
<p><strong>8、按位与运算符【&amp;】；</strong></p>
<p><strong>9、按位异或运算符【^】；</strong></p>
<p><strong>10、按位或运算符【|】；</strong></p>
<p><strong>11、逻辑与运算符【&amp;&amp;】；</strong></p>
<p><strong>12、逻辑或运算符【||】；</strong></p>
<p><strong>13、条件运算符【?:】；</strong></p>
<p><strong>14、赋值运算符【=】【/=】【*=】【%=】【+=】【-=】【&lt;&lt;=】【&gt;&gt;=】【&amp;=】【^=】【|=】；</strong></p>
<p><strong>15、逗号运算符【,】。</strong></p>
<p>逻辑运算：0&lt;x&lt;5  变为  x&gt;0&amp;&amp;x&lt;5, &amp;&amp;为且</p>
<p>非：！（非0取反为0,0取反为1），与：&amp;&amp;，或：||</p>
<p>当计算一边值可确定真假时，另一边不会计算</p>
<p>表达式1 ？ 表达式2 ：表达式3  =  if 表达式1  表达式2  else 表达式3  （可嵌套）</p>
<p>运算符：=</p>
<p>复合运算(从右往左）：+=，-=，*=，/=，%=   (a+=b—a=a+b)</p>
<p>，表达式</p>
<p>全部计算，最后一个表达式为整个式子的值</p>
<p>e.g. n=a=5+3,a+10,a*8</p>
<p>getchar():输入字符</p>
<p>putchar():输出字符</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习4</title>
    <url>/2020/07/31/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A04/</url>
    <content><![CDATA[<h1 id="C语言笔记4"><a href="#C语言笔记4" class="headerlink" title="C语言笔记4"></a>C语言笔记4</h1><h2 id="第七课-class-7"><a href="#第七课-class-7" class="headerlink" title="第七课  class 7"></a>第七课  class 7</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>除main函数其他都能调用</p>
<blockquote>
<p>int<em>(返回值类型)</em>  max<em>(函数名)</em> （参数）{</p>
<p>​    函数体</p>
<p>}</p>
</blockquote>
<p>void表示没有返回值（无return）</p>
<p>省略默认为int</p>
<p>参数不可为常量、表达式、数组元素</p>
<p>定义函数：在参数后直接加；</p>
<p>函数体内不能定义函数</p>
<p>函数返回值以函数类型为准</p>
<p>函数调用的参数和参数单元不是同一地址，只传递值，不改变原值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	t=x;x=y;y=t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    a=<span class="number">2</span>;b=<span class="number">3</span>;</span><br><span class="line">    swap(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//out:2 3</span></span><br></pre></td></tr></table></figure>

<p>函数放后面需要在main前定义</p>
<p>当数组名作为函数参数，类型必须相同；传递的为数组第一位地址，改变时改变原值</p>
<p>f(int b[10]) /f(int b[]) /f(int *b) （二维数组只有第一个可省）</p>
<p>sizeof(s1)/sizeof(int)=数组s1长度</p>
<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>一定要有终止递归的条件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span>(n*fact(n<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>函数内部定义的变量</p>
<p>大作用下的a在内部定义的a中被屏蔽</p>
<p>extern：引用外部变量</p>
<p>储存类别：auto，（static，extern）-静态，不会被释放掉（出局域也不消失）（不赋值，则0，空字符）</p>
<p>extern调用不同源文件的函数需要提前定义：extern 函数类型 函数名（参数）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	a=<span class="number">1</span>;b=<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">max</span>(a,b));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个文件：</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a,b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span>(a&gt;b?a:b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在vscode需要加：gcc f1.c f2.c -o f.exe将两个文件放一起</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习3</title>
    <url>/2020/07/22/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A03/</url>
    <content><![CDATA[<h1 id="C语言笔记3"><a href="#C语言笔记3" class="headerlink" title="C语言笔记3"></a>C语言笔记3</h1><h2 id="第四课-class-4"><a href="#第四课-class-4" class="headerlink" title="第四课  class 4"></a>第四课  class 4</h2><h3 id="guess-number"><a href="#guess-number" class="headerlink" title="guess number:"></a>guess number:</h3><p>when the number is between 1 to 100, we need to guess for 7 times maximum.</p>
<p>read more: <a href="https://arya-1017.github.io/2020/07/12/《算法图解》读书笔记1/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/07/12/《算法图解》读书笔记1/</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt; //import the time package</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,g;</span><br><span class="line">	<span class="keyword">int</span> count=<span class="number">1</span>;</span><br><span class="line">	srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>)); <span class="comment">//make the random number changes as the time changes</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"guess a number from 0 to 100.\n"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;g);</span><br><span class="line">	n=rand()%<span class="number">100</span>+<span class="number">1</span>; <span class="comment">//make it within 1 to 100</span></span><br><span class="line">	<span class="keyword">while</span>(g!=n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (g&gt;n) <span class="built_in">printf</span>(<span class="string">"It is too large!\n"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"It is too small!\n"</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;g);</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"You are right! You used %d times.\n"</span>,count);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>guess a number from 0 to 100.<br>50<br>It is too large!<br>25<br>It is too small!<br>37<br>It is too large!<br>30<br>It is too large!<br>27<br>You are right! You used 5 times.</p>
<h3 id="antitone-and-positive-sequence"><a href="#antitone-and-positive-sequence" class="headerlink" title="antitone and positive sequence:"></a>antitone and positive sequence:</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//antitone</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> number,i,num,result;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;number);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		num=number%<span class="number">10</span>;    <span class="comment">//get the last digit</span></span><br><span class="line">		result=result*<span class="number">10</span>+num; <span class="comment">//put the number at the end of result</span></span><br><span class="line">		number/=<span class="number">10</span>;  <span class="comment">//delete the last digits</span></span><br><span class="line">		<span class="keyword">if</span>(number==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,result);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*input:12345</span></span><br><span class="line"><span class="comment">output:54321*/</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">//positive with space between</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> number,i,n,result,num;</span><br><span class="line">	n=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;number);</span><br><span class="line">	num=number;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		n++; </span><br><span class="line">		number/=<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(number==<span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">//count the digits</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123; </span><br><span class="line">		result=num/<span class="built_in">pow</span>(<span class="number">10</span>,n-i); <span class="comment">//get the first digit</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,result);</span><br><span class="line">		num=num-result*<span class="built_in">pow</span>(<span class="number">10</span>,n-i); <span class="comment">//delete the last digit</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*input:12345</span></span><br><span class="line"><span class="comment">output:1 2 3 4 5*/</span></span><br></pre></td></tr></table></figure>

<h3 id="for循环嵌套"><a href="#for循环嵌套" class="headerlink" title="for循环嵌套"></a>for循环嵌套</h3><p>输入一个小于6的正整数，输出从它开始的4个数的所有排序方法组成的3位数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* run this program using the console pauser or add your own getch, system("pause") or input loop */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,j,n,count=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;a+<span class="number">4</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=a;j&lt;a+<span class="number">4</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(n=a;n&lt;a+<span class="number">4</span>;n++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i!=j &amp;&amp;i!=n &amp;&amp; j!=n)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"%d%d%d"</span>,i,j,n);</span><br><span class="line">					count++;</span><br><span class="line">					<span class="keyword">if</span>(count&lt;<span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">					<span class="keyword">else</span>&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">						count=<span class="number">0</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>念数字read the numbers</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number,i,n,result,num;</span><br><span class="line">	n=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;number);</span><br><span class="line">	<span class="keyword">if</span> (number&lt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"fu "</span>);</span><br><span class="line">		number=-number;</span><br><span class="line">	&#125;</span><br><span class="line">	num=number;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		n++; </span><br><span class="line">		number/=<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(number==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123; </span><br><span class="line">		result=num/<span class="built_in">pow</span>(<span class="number">10</span>,n-i);</span><br><span class="line">		<span class="keyword">switch</span>(result)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">printf</span>(<span class="string">"yi "</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">printf</span>(<span class="string">"er "</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">"san "</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">"si "</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">printf</span>(<span class="string">"wu "</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">printf</span>(<span class="string">"liu "</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">7</span>:<span class="built_in">printf</span>(<span class="string">"qi "</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">8</span>:<span class="built_in">printf</span>(<span class="string">"ba "</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">9</span>:<span class="built_in">printf</span>(<span class="string">"qiu "</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>:<span class="built_in">printf</span>(<span class="string">"ling "</span>);<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		num=num-result*<span class="built_in">pow</span>(<span class="number">10</span>,n-i);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





<h2 id="第五课-class-5"><a href="#第五课-class-5" class="headerlink" title="第五课 class 5"></a>第五课 class 5</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><blockquote>
<p>类型说明符 数组名[<strong>常量</strong>表达式]  //常量表达式为个数（连续的），正整数。</p>
</blockquote>
<p>数组只包含一种类型</p>
<p>int a[10];</p>
<p>引用：a[0], a[1], … …, a[9] //不能一次引用全部的数组</p>
<p>下标在上下界之内</p>
<p>打印数组名打印出的为存放数组首个元素的地址</p>
<p>初始化：在赋值时：int a[8]={0,1,2,3,4,5,6,7}, 若数组大小小于元素数，编译错误</p>
<p>若部分赋值，则其余补零（不可只定义空的大括号）</p>
<p>初始化时可以不填写常量表达式而给元素赋值</p>
<p>若没有赋值，元素为随机值</p>
<p>常量表达式可以用已定义的变量（或其计算）代替，但此时不可赋值</p>
<p>用下标越界可访问数组前后地址的值</p>
<p>冒泡法：（排序）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,d[<span class="number">6</span>]=&#123;<span class="number">13</span>,<span class="number">76</span>,<span class="number">97</span>,<span class="number">65</span>,<span class="number">38</span>,<span class="number">49</span>&#125;,n,t;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">6</span>;i++)&#123;         <span class="comment">//进行5轮比较</span></span><br><span class="line">		<span class="keyword">for</span>(n=<span class="number">1</span>;n&lt;<span class="number">6</span>-i;n++)&#123;   <span class="comment">//相邻数字两两相比，最值会被排在最左或最右</span></span><br><span class="line">			<span class="keyword">if</span>(d[n]&gt;d[n+<span class="number">1</span>])&#123;  <span class="comment">//交换位置</span></span><br><span class="line">				t=d[n];</span><br><span class="line">				d[n]=d[n+<span class="number">1</span>];</span><br><span class="line">				d[n+<span class="number">1</span>]=t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,d[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><blockquote>
<p>类型说明符 数组名[<strong>常量</strong>表达式] [<strong>常量</strong>表达式] </p>
</blockquote>
<p>int a[4][2] //行可以不写（前），列一定要限定</p>
<p>a[0][0]    a[0][1]    a[0][2]    a[0][3]</p>
<p>a[1][0]    a[1][1]    a[1][2]    a[1][3]</p>
<p>e.g.将每行最大值放在开头</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,t=<span class="number">0</span>,a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">8</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">	<span class="keyword">int</span> index;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line">		index=<span class="number">0</span>;</span><br><span class="line">		t=a[i][j];</span><br><span class="line">		<span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(t&lt;a[i][j])&#123;</span><br><span class="line">				t=a[i][j];</span><br><span class="line">				index=j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t);</span><br><span class="line">		<span class="keyword">if</span>(index==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			a[i][index]=a[i][<span class="number">0</span>];</span><br><span class="line">			a[i][<span class="number">0</span>]=t;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"after:\n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="第六课-class-6"><a href="#第六课-class-6" class="headerlink" title="第六课 class 6"></a>第六课 class 6</h2><p>字符数组</p>
<blockquote>
<p>char 数组名[常量表达式]</p>
<p>char 数组名[常量表达式1][常量表达式2]</p>
</blockquote>
<p>int a[6]; 合法但浪费内存</p>
<p>char c[3]={‘c’,’h’,76} //数字为ascii码</p>
<p>若字符个数&lt;数组长度,则剩下的用空字符代替（’\0’）</p>
<blockquote>
<p><strong>char a[10]={“china”}; or char a[]=”china”;</strong></p>
</blockquote>
<p>*单引号为字符，双引号为字符串</p>
<blockquote>
<p>char str[3][6]={“zhang”,”wang”,”li”}; //三行，每行最多6个</p>
</blockquote>
<p>printf(“%s%c”,str[0],str[1][3]);</p>
<blockquote>
<p>gets(字符数组名):输入字符串（可输入空格），遇到第一个回车结束</p>
<p>puts():输出字符串：puts(字符数组名)、puts(字符串)//字符串加双引号，输出后直接换行</p>
</blockquote>
<p>一般字符个数比字符串多一个（即\0），printf遇到空字符时结束</p>
<p>scanf 遇到空格、回车、tab结束输入</p>
<p>如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c1[<span class="number">6</span>],c2[<span class="number">6</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,c1,c2);</span><br><span class="line"><span class="comment">//输入：a good book</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %s"</span>,c1,c2);</span><br><span class="line"><span class="comment">//输出结果：a good</span></span><br></pre></td></tr></table></figure>

<p>将字符串赋给字符，赋的值为首位字符地址，加一即为下一位</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">6</span>]=<span class="string">"china"</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">c=*(str+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,c);</span><br><span class="line"><span class="comment">//out:h</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><p>#include “string.h”</p>
<blockquote>
<p>strcat(字符数组1,字符数组2)</p>
</blockquote>
<p>字符数组1空间要能容纳字符数组2</p>
<blockquote>
<p>strcopy(字符数组1,字符数串2)</p>
</blockquote>
<p>覆盖字符数组1，复制到第一个’\0’前</p>
<blockquote>
<p>strlen(字符串)</p>
</blockquote>
<p>包括有效字符（包括空格和tab），不包括‘\0’</p>
<p>代替：for(i=0;str[i]!=’\0’;i++);</p>
<blockquote>
<p>strcmp(字符串1，字符串2)；</p>
</blockquote>
<p>比较：从左往右比较ascii码：第一个大则返回1，小则返回-1，相同往后移一位直到结束</p>
<p>strlwr()：变小写</p>
<p>strupr():变大写</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法介绍</title>
    <url>/2019/11/23/Markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="4-Markdown语法介绍"><a href="#4-Markdown语法介绍" class="headerlink" title="4.Markdown语法介绍"></a>4.Markdown语法介绍</h1><p>在前面的课程中，我们已经成功搭建了我们的blog，并将它放到了github通过域名进行访问，今天我们来学习一下如何用Markdown来写文章。</p>
<p>首先简要介绍一下什么是Markdown：</p>
<ul>
<li><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>
</li>
<li><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p>
</li>
<li><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p>
</li>
<li><p>Markdown 编写的文档后缀为 <code>.md</code>,  <code>.markdown</code>。</p>
</li>
</ul>
<h3 id="1-Markdown标题"><a href="#1-Markdown标题" class="headerlink" title="1.Markdown标题"></a>1.Markdown标题</h3><p>我们使用<code>#</code>号来标记我们的标题,一共有六级标题,分别对应1到6个<code>#</code>号,如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<p>对应显示效果如下</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191108202908903.png" alt="image-20191108202908903"></p>
<h3 id="2、Markdown段落"><a href="#2、Markdown段落" class="headerlink" title="2、Markdown段落"></a>2、Markdown段落</h3><h4 id="（1）字体"><a href="#（1）字体" class="headerlink" title="（1）字体"></a>（1）字体</h4><p>Markdown支持显示以下几种字体</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure>

<p>对应显示效果如下：</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191108203410562.png" alt="image-20191108203410562"></p>
<h4 id="（2）分隔线"><a href="#（2）分隔线" class="headerlink" title="（2）分隔线"></a>（2）分隔线</h4><p>我们使用三个以上减号来建立分隔线</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">------ 分隔线</span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191108203745695.png" alt="image-20191108203745695"></p>
<h4 id="（3）删除线"><a href="#（3）删除线" class="headerlink" title="（3）删除线"></a>（3）删除线</h4><p>删除线只需要在文字两端加上双波浪线即可~~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~HELLO~~</span><br></pre></td></tr></table></figure>

<p>显示效果如下<br><del>HELLO</del></p>
<h4 id="（4）下划线"><a href="#（4）下划线" class="headerlink" title="（4）下划线"></a>（4）下划线</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<p><u>下划线</u></p>
<h3 id="3、Markdown列表"><a href="#3、Markdown列表" class="headerlink" title="3、Markdown列表"></a>3、Markdown列表</h3><p>列表分为有序列表和无序列表</p>
<h4 id="1、无序列表如下所示（注意后面加一个空格）"><a href="#1、无序列表如下所示（注意后面加一个空格）" class="headerlink" title="1、无序列表如下所示（注意后面加一个空格）"></a>1、无序列表如下所示（注意后面加一个空格）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<h4 id="2、有序列表如下所示（注意后面加一个空格）"><a href="#2、有序列表如下所示（注意后面加一个空格）" class="headerlink" title="2、有序列表如下所示（注意后面加一个空格）"></a>2、有序列表如下所示（注意后面加一个空格）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h4 id="3、列表嵌套用法"><a href="#3、列表嵌套用法" class="headerlink" title="3、列表嵌套用法"></a>3、列表嵌套用法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<h3 id="4、Markdown引用"><a href="#4、Markdown引用" class="headerlink" title="4、Markdown引用"></a>4、Markdown引用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 引用的一段话，这里演示用。</span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<blockquote>
<p>引用的一段话，这里演示用。</p>
</blockquote>
<h3 id="5、Markdown代码"><a href="#5、Markdown代码" class="headerlink" title="5、Markdown代码"></a>5、Markdown代码</h3><h4 id="（1）、代码"><a href="#（1）、代码" class="headerlink" title="（1）、代码"></a>（1）、代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;printf()&#96;</span><br></pre></td></tr></table></figure>

<p>显示效果如下<br><code>printf()</code></p>
<h4 id="（2）、代码段"><a href="#（2）、代码段" class="headerlink" title="（2）、代码段"></a>（2）、代码段</h4><p>输入如下：</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191108210014315.png" alt="image-20191108210014315"></p>
<p>显示效果如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、Markdown链接"><a href="#6、Markdown链接" class="headerlink" title="6、Markdown链接"></a>6、Markdown链接</h3><p>如下所示输入超链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[百度](https:&#x2F;&#x2F;www.baidu.com)</span><br></pre></td></tr></table></figure>

<p>显示效果如下（可点击跳转百度）<br><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></p>
<h3 id="7、Markdown表格"><a href="#7、Markdown表格" class="headerlink" title="7、Markdown表格"></a>7、Markdown表格</h3><p>实例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>

<p>显示效果如下：</p>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<h3 id="8、Markdown图片"><a href="#8、Markdown图片" class="headerlink" title="8、Markdown图片"></a>8、Markdown图片</h3><p>插入图片我们需要先上传到图床网站获取链接，然后再插入图片链接，具体操作如下：</p>
<ol>
<li><p>我们首先打开网站<a href="https://imgchr.com/" target="_blank" rel="noopener">https://imgchr.com/</a></p>
</li>
<li><p>点击开始上传，上传一张我们想要的图</p>
</li>
<li><p>上传好了我们找到下面Markdown Code并复制<br><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191108211045231.png" alt="image-20191108211045231"></p>
</li>
<li><p>将复制的链接粘贴过来</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[![MZ53S1.md.jpg](https:&#x2F;&#x2F;s2.ax1x.com&#x2F;2019&#x2F;11&#x2F;08&#x2F;MZ53S1.md.jpg)](https:&#x2F;&#x2F;imgchr.com&#x2F;i&#x2F;MZ53S1)</span><br></pre></td></tr></table></figure>

<p>显示成功如下</p>
<p><a href="https://imgchr.com/i/MZ53S1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/08/MZ53S1.md.jpg" alt="MZ53S1.md.jpg"></a> </p>
<p>这是一些基本的用法,学会了这些我们就可以写一些基本的文章来记录自己的日常啦<del>~</del></p>
]]></content>
      <categories>
        <category>Testing</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习1</title>
    <url>/2020/05/03/Python-%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<h1 id="Python内置函数"><a href="#Python内置函数" class="headerlink" title="Python内置函数"></a>Python内置函数</h1><p>*一到六载自<a href="https://cloud.tencent.com/developer/article/1200752，经微调，重点加黑" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1200752，经微调，重点加黑</a></p>
<h2 id="数学符号"><a href="#数学符号" class="headerlink" title="*数学符号"></a>*数学符号</h2><table>
<thead>
<tr>
<th>操作符</th>
<th>操作</th>
<th>例子</th>
<th>求职为</th>
</tr>
</thead>
<tbody><tr>
<td>**</td>
<td>指数(^)</td>
<td>2**3</td>
<td>8</td>
</tr>
<tr>
<td>%</td>
<td>取余数(mod)</td>
<td>22%8</td>
<td>6</td>
</tr>
<tr>
<td>//</td>
<td>取商(quotient)</td>
<td>22//8</td>
<td>2</td>
</tr>
<tr>
<td>/</td>
<td>除(divide)</td>
<td>22/8</td>
<td>2.75</td>
</tr>
<tr>
<td>*</td>
<td>乘(multiply)</td>
<td>3*5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减(minus)</td>
<td>5-2</td>
<td>3</td>
</tr>
<tr>
<td>+</td>
<td>加(add)</td>
<td>2+2</td>
<td>4</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>符号</th>
<th>操作</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
</tr>
<tr>
<td>==</td>
<td>等于(equal to)</td>
</tr>
<tr>
<td>!=</td>
<td>不等(not equal to)</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
</tbody></table>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="*数据类型"></a>*数据类型</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>转换符号</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>整型（integer）</td>
<td>int()</td>
<td>-2, -1, 0, 1, 2, 3</td>
</tr>
<tr>
<td>浮点型（float）</td>
<td>float()</td>
<td>-1.25, -1.0, –0.5, 1.25</td>
</tr>
<tr>
<td>字符型（string）</td>
<td>str()</td>
<td>‘a’, ‘aa’, ‘Hello!’, ‘11a’</td>
</tr>
</tbody></table>
<h2 id="一、数学运算类"><a href="#一、数学运算类" class="headerlink" title="一、数学运算类"></a>一、数学运算类</h2><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>abs(x)</strong></td>
<td align="left">求绝对值1、参数可以是整型，也可以是复数2、若参数是复数，则返回复数的模</td>
</tr>
<tr>
<td align="left">complex([real[, imag]])</td>
<td align="left">创建一个复数</td>
</tr>
<tr>
<td align="left">divmod(a, b)</td>
<td align="left">分别取商和余数注意：整型、浮点型都可以</td>
</tr>
<tr>
<td align="left"><strong>float([x])</strong></td>
<td align="left">将一个字符串或数转换为浮点数。如果无参数将返回0.0</td>
</tr>
<tr>
<td align="left"><strong>int([x[, base]])</strong></td>
<td align="left">将一个字符转换为int类型，base表示进制</td>
</tr>
<tr>
<td align="left">long([x[, base]])</td>
<td align="left">将一个字符转换为long类型</td>
</tr>
<tr>
<td align="left">pow(x, y[, z])</td>
<td align="left">返回x的y次幂</td>
</tr>
<tr>
<td align="left"><strong>range([start], stop[, step])</strong></td>
<td align="left">产生一个序列，默认从0开始</td>
</tr>
<tr>
<td align="left">round(x[, n])</td>
<td align="left">四舍五入</td>
</tr>
<tr>
<td align="left"><strong>sum(iterable[, start])</strong></td>
<td align="left">对集合求和</td>
</tr>
<tr>
<td align="left">oct(x)</td>
<td align="left">将一个数字转化为8进制</td>
</tr>
<tr>
<td align="left">hex(x)</td>
<td align="left">将整数x转换为16进制字符串</td>
</tr>
<tr>
<td align="left"><strong>chr(i) / asc(i)</strong></td>
<td align="left">返回整数i对应的ASCII字符 / ASCII字符对应的整数i</td>
</tr>
<tr>
<td align="left">bin(x)</td>
<td align="left">将整数x转换为二进制字符串</td>
</tr>
<tr>
<td align="left">bool([x])</td>
<td align="left">将x转换为Boolean类型</td>
</tr>
</tbody></table>
<h2 id="二、集合类操作"><a href="#二、集合类操作" class="headerlink" title="二、集合类操作"></a>二、集合类操作</h2><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">basestring()</td>
<td align="left">str和unicode的超类不能直接调用，可以用作isinstance判断</td>
</tr>
<tr>
<td align="left">format(value [, format_spec])</td>
<td align="left">格式化输出字符串格式化的参数顺序从0开始，如“I am {0},I like {1}”</td>
</tr>
<tr>
<td align="left">unichr(i)</td>
<td align="left">返回给定int类型的unicode</td>
</tr>
<tr>
<td align="left">enumerate(sequence [, start = 0])</td>
<td align="left">返回一个可枚举的对象,该对象的next()方法将返回一个tuple</td>
</tr>
<tr>
<td align="left">iter(o[, sentinel])</td>
<td align="left">生成一个对象的迭代器，第二个参数表示分隔符</td>
</tr>
<tr>
<td align="left"><strong>max(iterable[, args…][key])</strong></td>
<td align="left">返回集合中的最大值</td>
</tr>
<tr>
<td align="left"><strong>min(iterable[, args…][key])</strong></td>
<td align="left">返回集合中的最小值</td>
</tr>
<tr>
<td align="left"><strong>dict([arg])</strong></td>
<td align="left">创建数据字典</td>
</tr>
<tr>
<td align="left"><strong>list([iterable])</strong></td>
<td align="left">将一个集合类转换为另外一个集合类</td>
</tr>
<tr>
<td align="left">set()</td>
<td align="left">set对象实例化</td>
</tr>
<tr>
<td align="left">frozenset([iterable])</td>
<td align="left">产生一个不可变的set</td>
</tr>
<tr>
<td align="left"><strong>str([object])</strong></td>
<td align="left">转换为string类型</td>
</tr>
<tr>
<td align="left">sorted(iterable[, cmp[, key[, reverse]]])</td>
<td align="left">队集合排序</td>
</tr>
<tr>
<td align="left">tuple([iterable])</td>
<td align="left">生成一个tuple类型</td>
</tr>
<tr>
<td align="left">xrange([start], stop[, step])</td>
<td align="left">xrange()函数与range()类似，但xrnage()并不创建列表，而是返回一个xrange对象，它的行为与列表相似，但是只在需要时才计算列表值，当列表很大时，这个特性能为我们节省内存</td>
</tr>
</tbody></table>
<h2 id="三、逻辑判断"><a href="#三、逻辑判断" class="headerlink" title="三、逻辑判断"></a>三、逻辑判断</h2><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">all(iterable)</td>
<td align="left">1、集合中的元素都为真的时候为真2、特别的，若为空串返回为True</td>
</tr>
<tr>
<td align="left">any(iterable)</td>
<td align="left">1、集合中的元素有一个为真的时候为真2、特别的，若为空串返回为False</td>
</tr>
<tr>
<td align="left">cmp(x, y)</td>
<td align="left">如果x &lt; y ,返回负数；x == y, 返回0；x &gt; y,返回正数</td>
</tr>
</tbody></table>
<h2 id="四、反射"><a href="#四、反射" class="headerlink" title="四、反射"></a>四、反射</h2><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">callable(object)</td>
<td align="left">检查对象object是否可调用1、类是可以被调用的2、实例是不可以被调用的，除非类中声明了<strong>call</strong>方法</td>
</tr>
<tr>
<td align="left">classmethod()</td>
<td align="left">1、注解，用来说明这个方式是个类方法2、类方法即可被类调用，也可以被实例调用3、类方法类似于Java中的static方法4、类方法中不需要有self参数</td>
</tr>
<tr>
<td align="left">compile(source, filename,  mode[, flags[, dont_inherit]])</td>
<td align="left">将source编译为代码或者AST对象。代码对象能够通过exec语句来执行或者eval()进行求值。1、参数source：字符串或者AST（Abstract Syntax Trees）对象。2、参数 filename：代码文件名称，如果不是从文件读取代码则传递一些可辨认的值。3、参数model：指定编译代码的种类。可以指定为 ‘exec’,’eval’,’single’。4、参数flag和dont_inherit：这两个参数暂不介绍</td>
</tr>
<tr>
<td align="left">dir([object])</td>
<td align="left">1、不带参数时，返回当前范围内的变量、方法和定义的类型列表；2、带参数时，返回参数的属性、方法列表。3、如果参数包含方法<strong>dir</strong>()，该方法将被调用。当参数为实例时。4、如果参数不包含<strong>dir</strong>()，该方法将最大限度地收集参数信息</td>
</tr>
<tr>
<td align="left">delattr(object, name)</td>
<td align="left">删除object对象名为name的属性</td>
</tr>
<tr>
<td align="left">eval(expression [, globals [, locals]])</td>
<td align="left">计算表达式expression的值</td>
</tr>
<tr>
<td align="left">execfile(filename [, globals [, locals]])</td>
<td align="left">用法类似exec()，不同的是execfile的参数filename为文件名，而exec的参数为字符串。</td>
</tr>
<tr>
<td align="left">filter(function, iterable)</td>
<td align="left">构造一个序列，等价于[ item for item in iterable if function(item)]1、参数function：返回值为True或False的函数，可以为None2、参数iterable：序列或可迭代对象</td>
</tr>
<tr>
<td align="left">getattr(object, name [, defalut])</td>
<td align="left">获取一个类的属性</td>
</tr>
<tr>
<td align="left">globals()</td>
<td align="left">返回一个描述当前全局符号表的字典</td>
</tr>
<tr>
<td align="left">hasattr(object, name)</td>
<td align="left">判断对象object是否包含名为name的特性</td>
</tr>
<tr>
<td align="left">hash(object)</td>
<td align="left">如果对象object为哈希表类型，返回对象object的哈希值</td>
</tr>
<tr>
<td align="left">id(object)</td>
<td align="left">返回对象的唯一标识</td>
</tr>
<tr>
<td align="left">isinstance(object, classinfo)</td>
<td align="left">判断object是否是class的实例</td>
</tr>
<tr>
<td align="left">issubclass(class, classinfo)</td>
<td align="left">判断是否是子类</td>
</tr>
<tr>
<td align="left"><strong>len(s)</strong></td>
<td align="left">返回集合长度</td>
</tr>
<tr>
<td align="left">locals()</td>
<td align="left">返回当前的变量列表</td>
</tr>
<tr>
<td align="left">map(function, iterable, …)</td>
<td align="left">遍历每个元素，执行function操作</td>
</tr>
<tr>
<td align="left">memoryview(obj)</td>
<td align="left">返回一个内存镜像类型的对象</td>
</tr>
<tr>
<td align="left">next(iterator[, default])</td>
<td align="left">类似于iterator.next()</td>
</tr>
<tr>
<td align="left">object()</td>
<td align="left">基类</td>
</tr>
<tr>
<td align="left">property([fget[, fset[, fdel[, doc]]]])</td>
<td align="left">属性访问的包装类，设置后可以通过c.x=value等来访问setter和getter</td>
</tr>
<tr>
<td align="left">reduce(function, iterable[, initializer])</td>
<td align="left">合并操作，从第一个开始是前两个参数，然后是前两个的结果与第三个合并进行处理，以此类推</td>
</tr>
<tr>
<td align="left">reload(module)</td>
<td align="left">重新加载模块</td>
</tr>
<tr>
<td align="left">setattr(object, name, value)</td>
<td align="left">设置属性值</td>
</tr>
<tr>
<td align="left">repr(object)</td>
<td align="left">将一个对象变幻为可打印的格式</td>
</tr>
<tr>
<td align="left">slice（）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">staticmethod</td>
<td align="left">声明静态方法，是个注解</td>
</tr>
<tr>
<td align="left">super(type[, object-or-type])</td>
<td align="left">引用父类</td>
</tr>
<tr>
<td align="left"><strong>type(object)</strong></td>
<td align="left">返回该object的类型</td>
</tr>
<tr>
<td align="left">vars([object])</td>
<td align="left">返回对象的变量，若无参数与dict()方法类似</td>
</tr>
<tr>
<td align="left">bytearray([source [, encoding [, errors]]])</td>
<td align="left">返回一个byte数组1、如果source为整数，则返回一个长度为source的初始化数组；2、如果source为字符串，则按照指定的encoding将字符串转换为字节序列；3、如果source为可迭代类型，则元素必须为[0 ,255]中的整数；4、如果source为与buffer接口一致的对象，则此对象也可以被用于初始化bytearray.</td>
</tr>
<tr>
<td align="left">zip([iterable, …])</td>
<td align="left">实在是没有看懂，只是看到了矩阵的变幻方面</td>
</tr>
</tbody></table>
<h2 id="五、IO操作"><a href="#五、IO操作" class="headerlink" title="五、IO操作"></a>五、IO操作</h2><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">file(filename [, mode [, bufsize]])</td>
<td align="left">file类型的构造函数，作用为打开一个文件，如果文件不存在且mode为写或追加时，文件将被创建。添加‘b’到mode参数中，将对文件以二进制形式操作。添加‘+’到mode参数中，将允许对文件同时进行读写操作1、参数filename：文件名称。2、参数mode：’r’（读）、’w’（写）、’a’（追加）。3、参数bufsize：如果为0表示不进行缓冲，如果为1表示进行行缓冲，如果是一个大于1的数表示缓冲区的大小 。</td>
</tr>
<tr>
<td align="left"><strong>input([prompt])</strong></td>
<td align="left">获取用户输入推荐使用raw_input，因为该函数将不会捕获用户的错误输入</td>
</tr>
<tr>
<td align="left"><strong>open(name[, mode[, buffering]])</strong></td>
<td align="left">打开文件与file有什么不同？推荐使用open</td>
</tr>
<tr>
<td align="left"><strong>print</strong></td>
<td align="left">打印函数</td>
</tr>
<tr>
<td align="left">raw_input([prompt])</td>
<td align="left">设置输入，输入都是作为字符串处理</td>
</tr>
</tbody></table>
<h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h2><p><strong>help()–帮助信息</strong></p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习2</title>
    <url>/2020/05/03/Python-%E5%AD%A6%E4%B9%A02/</url>
    <content><![CDATA[<h1 id="Python-if，while-for循环"><a href="#Python-if，while-for循环" class="headerlink" title="Python-if，while, for循环"></a>Python-if，while, for循环</h1><h2 id="key-points"><a href="#key-points" class="headerlink" title="key points"></a>key points</h2><h3 id="if语句，及if语句套用"><a href="#if语句，及if语句套用" class="headerlink" title="if语句，及if语句套用"></a>if语句，及if语句套用</h3><ol>
<li>if…else</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=input()  <span class="comment">#显示输入框，name=输入内容 show the inputbox，name=input #input 函数</span></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">'Mary'</span>:               <span class="comment">#if 语句</span></span><br><span class="line">    print(<span class="string">'Hello Mary'</span>)</span><br><span class="line">    password=input()</span><br><span class="line">    <span class="keyword">if</span> password == <span class="string">'swordfish'</span>:</span><br><span class="line">        print(<span class="string">'Access granted.'</span>)</span><br><span class="line">    <span class="keyword">else</span>:                        <span class="comment">#if...else语句           </span></span><br><span class="line">        print(<span class="string">'Wrong password.'</span>)</span><br></pre></td></tr></table></figure>

<p>该代码可判断用户名及密码是否与设定值相符</p>
<p>check the user‘s name and password</p>
<ol start="2">
<li>if…elif</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=input()</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">'Alice'</span>:</span><br><span class="line">    print(<span class="string">'Hi,Alice.'</span>)  </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'What is your age?'</span>)</span><br><span class="line">    age=input()</span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="string">'12'</span>:</span><br><span class="line">        print(<span class="string">'You are not Alice, kiddo.'</span>)</span><br><span class="line">    <span class="keyword">elif</span> age &gt; <span class="string">'100'</span>:</span><br><span class="line">        print(<span class="string">'You are not Alice,grannie.'</span>)</span><br><span class="line">    <span class="keyword">elif</span> age &gt; <span class="string">'2000'</span>:</span><br><span class="line">        print(<span class="string">'Unlike you, Alice is not an undead, immortal vampire.'</span>)</span><br></pre></td></tr></table></figure>

<p>该代码通过判断年龄确定身份</p>
<p>check the user through age</p>
<h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> spam &lt; <span class="number">5</span>:</span><br><span class="line">    print(<span class="string">'Hello world!'</span>)</span><br><span class="line">    spam = spam+<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>output：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello world!</span><br><span class="line">Hello world!</span><br><span class="line">Hello world!</span><br><span class="line">Hello world!</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure>

<h4 id="‘break’-and-‘continue’"><a href="#‘break’-and-‘continue’" class="headerlink" title="‘break’ and ‘continue’"></a>‘break’ and ‘continue’</h4><p>break:</p>
<p>When the break is executed, the loop ends.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'Hello world'</span>)</span><br><span class="line">    <span class="keyword">if</span> spam==<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    spam=spam+<span class="number">1</span></span><br><span class="line">print(spam)</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"><span class="comment">#3</span></span><br></pre></td></tr></table></figure>

<p>continue:</p>
<p>When continue is executed, the loop starts again.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> spam&lt;<span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'Hello!'</span>)</span><br><span class="line">    spam=spam+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> spam==<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(<span class="string">'Hello world'</span>)</span><br><span class="line">    print(<span class="string">' '</span>)</span><br><span class="line">print(spam)</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#Hello!</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#Hello!  during this time, spam=3, so it didn't print 'Hello world'.</span></span><br><span class="line"><span class="comment">#Hello!</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"><span class="comment">#4</span></span><br></pre></td></tr></table></figure>



<h3 id="while-if"><a href="#while-if" class="headerlink" title="while+if"></a>while+if</h3><p>输入密码 input the password</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key=input() </span><br><span class="line">spam=<span class="number">0</span> <span class="comment">#record the times tried, make sure no more than 3 times 不超过三次</span></span><br><span class="line"><span class="keyword">if</span> int(key)==<span class="number">12345</span>:</span><br><span class="line">        print(<span class="string">'Pass'</span>)</span><br><span class="line"><span class="keyword">while</span> spam &lt; <span class="number">2</span> <span class="keyword">and</span> int(key)!=<span class="number">12345</span>:</span><br><span class="line">            print(<span class="string">'Try again'</span>)</span><br><span class="line">            key=input()</span><br><span class="line">            spam=spam+<span class="number">1</span>  <span class="comment">#计次 record thetimes</span></span><br><span class="line"><span class="keyword">if</span> int(key)==<span class="number">12345</span> <span class="keyword">and</span> spam!=<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Pass'</span>)</span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;1</span><br><span class="line">Try again</span><br><span class="line">&gt;12</span><br><span class="line">Try again</span><br><span class="line">&gt;12345</span><br><span class="line">Pass</span><br></pre></td></tr></table></figure>

<p>another way：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key=input()</span><br><span class="line"><span class="keyword">if</span> key==<span class="string">'12345'</span>:</span><br><span class="line">    print(<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'try again'</span>)</span><br><span class="line">    key=input()</span><br><span class="line">    <span class="keyword">if</span> key==<span class="string">'12345'</span>:</span><br><span class="line">        print(<span class="string">'pass'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'try again'</span>)</span><br><span class="line">        key=input()</span><br><span class="line">        <span class="keyword">if</span> key==<span class="string">'12345'</span>:</span><br><span class="line">            print(<span class="string">'pass'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">12</span>,<span class="number">16</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>12到16的所有整数</p>
<p>print all integers in 12 to 16</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>): <span class="comment">#the 2 here means the step is 2</span></span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment">#out：0 2 4 6 8</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">-1</span>,<span class="number">-1</span>): </span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment">#output：5 4 3 2 1 0</span></span><br></pre></td></tr></table></figure>



<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><h3 id="a-tricky-game："><a href="#a-tricky-game：" class="headerlink" title="a tricky game："></a>a tricky game：</h3><p>You must input ‘your name’ instead of the real name:</p>
<p>你要输入 ”your name” 而不是真的名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'Please type your name.'</span>)</span><br><span class="line">yourname=input()</span><br><span class="line"><span class="keyword">while</span>  yourname!=<span class="string">'your name'</span>:</span><br><span class="line">    print(<span class="string">'Please type your name.'</span>)</span><br><span class="line">    yourname=input()</span><br><span class="line"><span class="keyword">if</span> yourname==<span class="string">'your name'</span>:</span><br><span class="line">    print(<span class="string">'Thank you!'</span>)</span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Please type your name.</span><br><span class="line">Alice</span><br><span class="line">Please type your name.</span><br><span class="line">Emma</span><br><span class="line">Please type your name.</span><br><span class="line">your name</span><br><span class="line">Thank you!</span><br></pre></td></tr></table></figure>

<p>another way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'Please type your name.'</span>)</span><br><span class="line">    name=input()</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'your name'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">'Thank you!'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="make-patterns"><a href="#make-patterns" class="headerlink" title="make patterns!"></a>make patterns!</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">6</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'*'</span>*a) <span class="comment">#'*'is the string while * is 'x', multiply</span></span><br><span class="line">    a=a<span class="number">-1</span> <span class="comment">#the number of a is decreasing</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment">#if there is no more '*', it ends</span></span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">******</span><br><span class="line">*****</span><br><span class="line">****</span><br><span class="line">***</span><br><span class="line">**</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'*'</span>*a) </span><br><span class="line">    a=a+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">6</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'*'</span>*a)</span><br><span class="line">    a=a<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line">******</span><br><span class="line">*****</span><br><span class="line">****</span><br><span class="line">***</span><br><span class="line">**</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

<p>another way</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    print(<span class="string">'*'</span>*a)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">    print(<span class="string">'*'</span>*a)</span><br></pre></td></tr></table></figure>

<h3 id="calculation-of-factorial"><a href="#calculation-of-factorial" class="headerlink" title="calculation of factorial"></a>calculation of factorial</h3><p>阶乘计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result=<span class="number">1</span></span><br><span class="line">a=int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,a+<span class="number">1</span>):</span><br><span class="line">    result=result*i</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<p>input=9</p>
<p>output=362880</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-学习3</title>
    <url>/2020/05/30/Python-%E5%AD%A6%E4%B9%A03/</url>
    <content><![CDATA[<h1 id="Python-List"><a href="#Python-List" class="headerlink" title="Python-List"></a>Python-List</h1><h2 id="Obtain-the-value"><a href="#Obtain-the-value" class="headerlink" title="Obtain the value"></a>Obtain the value</h2><p>The value is obtained from ‘0’, which means ‘0’ is the first value.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:['cat', 'bat', 'rat', 'elephant']</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#out:'cat'</span></span><br></pre></td></tr></table></figure>

<p>We can also add it to a string:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'The '</span>+spam[<span class="number">1</span>]+<span class="string">' ate the '</span>+spam[<span class="number">0</span>]+<span class="string">'.'</span></span><br><span class="line"><span class="comment">#out:'The bat ate the cat.'</span></span><br></pre></td></tr></table></figure>

<p>The list in the list:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>],[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line">spam[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"><span class="comment">#out:20</span></span><br></pre></td></tr></table></figure>

<p>Use negative subscripts to get the value:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line">spam[<span class="number">-3</span>]</span><br><span class="line"><span class="comment">#out:'bat'</span></span><br></pre></td></tr></table></figure>

<h2 id="Obtain-the-slice"><a href="#Obtain-the-slice" class="headerlink" title="Obtain the slice"></a>Obtain the slice</h2><p>Use range of subscripts (the range includes the former one, but doesn’t include the later one)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line">spam[<span class="number">0</span>:<span class="number">-2</span>]</span><br><span class="line"><span class="comment">#out:['cat','bat']</span></span><br></pre></td></tr></table></figure>

<p>without one/both subscript(s) (from the beginning or/and the end)</p>
<ul>
<li>[:] means the  whole list</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line">spam[:<span class="number">2</span>]</span><br><span class="line"><span class="comment">#out:['cat', 'bat']</span></span><br></pre></td></tr></table></figure>

<h2 id="Length"><a href="#Length" class="headerlink" title="Length"></a>Length</h2><p>Length is the number of value it has.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'dog'</span>,<span class="string">'moose'</span>]</span><br><span class="line">len(spam)</span><br><span class="line"><span class="comment">#out: 3</span></span><br></pre></td></tr></table></figure>

<h2 id="Changing-the-value-by-using-subscripts"><a href="#Changing-the-value-by-using-subscripts" class="headerlink" title="Changing the value by using subscripts"></a>Changing the value by using subscripts</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line">spam[<span class="number">1</span>]=<span class="string">'aardvark'</span>  </span><br><span class="line">spam[<span class="number">2</span>]=spam[<span class="number">1</span>]</span><br><span class="line">spam[<span class="number">-1</span>]=<span class="number">12345</span></span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:['cat', 'aardvark', 'aardvark', 12345]</span></span><br></pre></td></tr></table></figure>

<h2 id="The-combination-and-calculation-of-list"><a href="#The-combination-and-calculation-of-list" class="headerlink" title="The combination and calculation of list"></a>The combination and calculation of list</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]+[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>]</span><br><span class="line"><span class="comment">#out:[1, 2, 3, 'A', 'B', 'C']</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]*<span class="number">3</span></span><br><span class="line"><span class="comment">#out:[1, 2, 3, 1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>Delete by using del</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">del</span> spam[<span class="number">2</span>]</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:[1, 2, 4]</span></span><br></pre></td></tr></table></figure>



<h2 id="one-usage-enter-the-cats’-name"><a href="#one-usage-enter-the-cats’-name" class="headerlink" title="one usage: enter the cats’ name:"></a>one usage: enter the cats’ name:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">catnames=[]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'Enter the name of cat '</span>+str(len(catnames)+<span class="number">1</span>)+<span class="string">'(Or enter nothing to stop.):'</span>)</span><br><span class="line">    name=input()</span><br><span class="line">    <span class="keyword">if</span> name ==<span class="string">''</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    catnames=catnames+[name]</span><br><span class="line">print(<span class="string">'The cat names are:'</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> catnames:</span><br><span class="line">    print(<span class="string">'  '</span>+name)</span><br></pre></td></tr></table></figure>

<p><strong>The processing steps:</strong></p>
<p>Enter the name of cat 1(Or enter nothing to stop.):<br>Alpha<br>Enter the name of cat 2(Or enter nothing to stop.):<br>Bravo<br>Enter the name of cat 3(Or enter nothing to stop.):<br>Cathy<br>Enter the name of cat 4(Or enter nothing to stop.):</p>
<p><strong>The result:</strong></p>
<p>The cat names are:<br>  Alpha<br>  Bravo<br>  Cathy</p>
<h2 id="Use-list-in-loop"><a href="#Use-list-in-loop" class="headerlink" title="Use list in loop"></a>Use list in loop</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">supplies=[<span class="string">'pen'</span>,<span class="string">'staplers'</span>,<span class="string">'flame-throwers'</span>,<span class="string">'binders'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(supplies)):</span><br><span class="line">    print(<span class="string">'Index '</span>+str(i)+<span class="string">' in supplies is: '</span>+supplies[i])</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#Index 0 in supplies is: pen</span></span><br><span class="line"><span class="comment">#Index 1 in supplies is: staplers</span></span><br><span class="line"><span class="comment">#Index 2 in supplies is: flame-throwers</span></span><br><span class="line"><span class="comment">#Index 3 in supplies is: binders</span></span><br></pre></td></tr></table></figure>

<h2 id="in-and-not-in"><a href="#in-and-not-in" class="headerlink" title="in and not in"></a><em>in</em> and <em>not in</em></h2><p>example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'howdy'</span><span class="keyword">in</span>[<span class="string">'hello'</span>,<span class="string">'hi'</span>,<span class="string">'howdy'</span>]</span><br><span class="line"><span class="comment">#out:True</span></span><br></pre></td></tr></table></figure>

<p>usage:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mypet=[<span class="string">'Zophie'</span>,<span class="string">'Pooka'</span>,<span class="string">'Simon'</span>]</span><br><span class="line">print(<span class="string">'Enter a pet name:'</span>)</span><br><span class="line">name=input()</span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> mypet:</span><br><span class="line">    print(<span class="string">'I do not have a pet named '</span>+name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(name+<span class="string">' is my pet.'</span>)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#Enter a pet name:</span></span><br><span class="line"><span class="comment">#Simon</span></span><br><span class="line"><span class="comment">#Simon is my pet.</span></span><br></pre></td></tr></table></figure>



<p>improve the former usage about the cats’ names:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">catnames=[]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'Enter the name of cat '</span>+str(len(catnames)+<span class="number">1</span>)+<span class="string">'(Or enter nothing to stop.):'</span>)</span><br><span class="line">    name=input()</span><br><span class="line">    <span class="keyword">if</span> name ==<span class="string">''</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> catnames:              <span class="comment">#added part    </span></span><br><span class="line">        print(<span class="string">'The name has existed'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        catnames=catnames+[name]</span><br><span class="line">print(<span class="string">'The cat names are:'</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> catnames:</span><br><span class="line">    print(<span class="string">'  '</span>+name)</span><br></pre></td></tr></table></figure>

<p><strong>The processing steps:</strong></p>
<p>Enter the name of cat 1(Or enter nothing to stop.):<br>Alpha<br>Enter the name of cat 2(Or enter nothing to stop.):<br>Bravo<br><strong><em>Enter the name of cat 3(Or enter nothing to stop.):</em></strong><br><strong><em>Alpha</em></strong><br><strong><em>The name has existed</em></strong><br>Enter the name of cat 3(Or enter nothing to stop.):<br>Cathy<br>Enter the name of cat 4(Or enter nothing to stop.):</p>
<p><strong>The result:</strong></p>
<p>The cat names are:<br>  Alpha<br>  Bravo<br>  Cathy</p>
<h2 id="Mutiple-values"><a href="#Mutiple-values" class="headerlink" title="Mutiple values:"></a>Mutiple values:</h2><p>We can give the list other values.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat=[<span class="string">'fat'</span>,<span class="string">'black'</span>,<span class="string">'loud'</span>]</span><br><span class="line">size, color, dispostion=cat</span><br><span class="line">print(size)</span><br><span class="line"><span class="comment">#out:fat</span></span><br></pre></td></tr></table></figure>



<h2 id="Other-instructions"><a href="#Other-instructions" class="headerlink" title="Other instructions"></a>Other instructions</h2><h3 id="append-add-a-new-value-to-the-list-in-the-end"><a href="#append-add-a-new-value-to-the-list-in-the-end" class="headerlink" title="append: add a new value to the list in the end"></a>append: add a new value to the list in the end</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">spam.append(<span class="string">'mouse'</span>)</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:[1, 2, 3, 4, 'mouse']</span></span><br></pre></td></tr></table></figure>



<h3 id="insert-add-a-new-value-in-the-middle"><a href="#insert-add-a-new-value-in-the-middle" class="headerlink" title="insert: add a new value in the middle"></a>insert: add a new value in the middle</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">spam.insert(<span class="number">1</span>,<span class="string">'chicken'</span>)</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:[1, 'chicken', 2, 3, 4]</span></span><br></pre></td></tr></table></figure>



<h3 id="index-show-the-position-of-the-value"><a href="#index-show-the-position-of-the-value" class="headerlink" title="index: show the position of the value"></a>index: show the position of the value</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">spam.index(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#out: 2</span></span><br></pre></td></tr></table></figure>



<h3 id="remove-remove-the-value-from-the-list"><a href="#remove-remove-the-value-from-the-list" class="headerlink" title="remove:  remove the value from the list"></a>remove:  remove the value from the list</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">spam.remove(<span class="number">1</span>)</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:[2, 3, 4]</span></span><br></pre></td></tr></table></figure>



<h3 id="sort-put-the-value-in-order"><a href="#sort-put-the-value-in-order" class="headerlink" title="sort: put the value in order"></a>sort: put the value in order</h3><h4 id="numbers"><a href="#numbers" class="headerlink" title="numbers:"></a>numbers:</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3.14</span>,<span class="number">1</span>,<span class="number">-7</span>]</span><br><span class="line">spam.sort()</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:[-7, 1, 2, 3.14, 5]</span></span><br></pre></td></tr></table></figure>

<h4 id="words-the-upper-letters-are-in-the-front"><a href="#words-the-upper-letters-are-in-the-front" class="headerlink" title="words: (the upper letters are in the front)"></a>words: (the upper letters are in the front)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'ants'</span>,<span class="string">'cats'</span>,<span class="string">'dogs'</span>,<span class="string">'badgers'</span>]</span><br><span class="line">spam.sort()</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:['ants', 'badgers', 'cats', 'dogs']</span></span><br></pre></td></tr></table></figure>



<h3 id="reverse-reverse-the-order-of-the-value"><a href="#reverse-reverse-the-order-of-the-value" class="headerlink" title="reverse: reverse the order of the value"></a>reverse: reverse the order of the value</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'ants'</span>, <span class="string">'badgers'</span>, <span class="string">'cats'</span>, <span class="string">'dogs'</span>]</span><br><span class="line">spam.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:['dogs', 'cats', 'badgers', 'ants']</span></span><br></pre></td></tr></table></figure>



<h3 id="ignore-the-lower-or-upper-letters"><a href="#ignore-the-lower-or-upper-letters" class="headerlink" title="ignore the lower or upper letters:"></a>ignore the lower or upper letters:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'b'</span>,<span class="string">'a'</span>,<span class="string">'A'</span>,<span class="string">'z'</span>,<span class="string">'Z'</span>]</span><br><span class="line">spam.sort(key=str.lower)</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out: ['a', 'A', 'b', 'z', 'Z']</span></span><br></pre></td></tr></table></figure>



<h3 id="tuple-can-be-read-only"><a href="#tuple-can-be-read-only" class="headerlink" title="tuple: (can be read only)"></a>tuple: (can be read only)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment">#out:(1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure>

<p>*if turn dictionary to tuple, it will only show the key:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple(&#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">3</span>:<span class="number">4</span>&#125;)</span><br><span class="line"><span class="comment">#out:(1, 3)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-学习4</title>
    <url>/2020/06/07/Python-%E5%AD%A6%E4%B9%A04/</url>
    <content><![CDATA[<h1 id="Python-functions"><a href="#Python-functions" class="headerlink" title="Python-functions"></a>Python-functions</h1><h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><p>.upper()–capital the letters</p>
<p>.lower()–lower the letters</p>
<p>.islower()–check whether all the letters are lower</p>
<p>.isupper()–check whether all the letters are capital</p>
<p>.isalpha()–check wether all are string(includes letters and Chinese)</p>
<p>.isalnum()–check whether all are string or numbers</p>
<p>.startswith()–check whether the string starts with the context in the ()</p>
<p>.endswith()–check whether the string ends with the context in the ()</p>
<p>‘, ‘.join()–join the list with’,’</p>
<p>.split()–split to form the list with ‘ ‘</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'MyabcnameabcisabcSimon'</span>.split(<span class="string">'abc'</span>)</span><br><span class="line"><span class="comment">#out:['My', 'name', 'is', 'Simon']</span></span><br></pre></td></tr></table></figure>

<p>.rjust(10)–add 10 spaces to the left of the string</p>
<p>.ljust(10)–add 10 spaces to the right of the string</p>
<p>.rjust(10,’*’)–add 10 stars to the left of the string</p>
<p>.center(20,’*’)–put the string in the middle of 20 stars</p>
<p>.strip(‘Spam’)–skip the Spam in the front and in the end</p>
<h2 id="print-："><a href="#print-：" class="headerlink" title="print()："></a><strong>print()：</strong></h2><p>end:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'Hello '</span>,end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'World'</span>)</span><br><span class="line"><span class="comment">#out:Hello World</span></span><br></pre></td></tr></table></figure>

<p>sep:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'cats'</span>,<span class="string">'dogs'</span>,<span class="string">'mice'</span>,sep=<span class="string">","</span>)</span><br><span class="line"><span class="comment">#out:cats,dogs,mice</span></span><br></pre></td></tr></table></figure>

<p>print() will return ‘none’ value:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = print(<span class="string">'Hello!'</span>)</span><br><span class="line"><span class="comment">#out:Hello! </span></span><br><span class="line"></span><br><span class="line"><span class="literal">None</span> == spam</span><br><span class="line"><span class="comment">#out:True</span></span><br></pre></td></tr></table></figure>



<h2 id="def"><a href="#def" class="headerlink" title="def"></a>def</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span> </span><br><span class="line">    print(<span class="string">'Hello '</span> + name) </span><br><span class="line">hello(<span class="string">'Alice'</span>) </span><br><span class="line">hello(<span class="string">'Bob'</span>) </span><br><span class="line"><span class="comment">#out：Hello Alice</span></span><br><span class="line"><span class="comment">#    Hello Bob</span></span><br></pre></td></tr></table></figure>



<h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>It will print a random answer.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAnswer</span><span class="params">(answerNumber)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> answerNumber == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'It is certain'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'It is decidedly so'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Yes'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Reply hazy try again'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Ask again later'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Concentrate and ask again'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'My reply is no'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Outlook not so good'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Very doubtful'</span></span><br><span class="line">r = random.randint(<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">fortune = getAnswer(r)</span><br><span class="line">print(fortune)</span><br></pre></td></tr></table></figure>



<h3 id="partial-and-overall"><a href="#partial-and-overall" class="headerlink" title="partial and overall"></a>partial and overall</h3><ol>
<li>Variables in one part can’t be used in overall situation.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    eggs = <span class="number">31337</span></span><br><span class="line">spam()</span><br><span class="line">print(eggs)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-9-4fa03afe709c&gt; in &lt;module&gt;</span><br><span class="line">      2     eggs&#x3D;31337</span><br><span class="line">      3 </span><br><span class="line">----&gt; 4 print(eggs)</span><br><span class="line"></span><br><span class="line">NameError: name &#39;eggs&#39; is not defined</span><br></pre></td></tr></table></figure>

<p>This is because the ‘eggs’ is only in the spam but not the overall situation.</p>
<ol start="2">
<li>Variables in one part can’t be used in another part.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    eggs=<span class="number">99</span></span><br><span class="line">    bacon()</span><br><span class="line">    eggs=bacon()</span><br><span class="line">    print(eggs)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bacon</span><span class="params">()</span>:</span></span><br><span class="line">    ham=<span class="number">101</span></span><br><span class="line">    eggs=<span class="number">0</span></span><br><span class="line">    print(<span class="string">'1'</span>)</span><br><span class="line">    <span class="keyword">return</span> eggs</span><br><span class="line">spam()</span><br><span class="line"><span class="comment">#out:1</span></span><br><span class="line"><span class="comment">#    1</span></span><br><span class="line"><span class="comment">#    0</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Variables in overall situation can be used in one part.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    print(eggs)</span><br><span class="line">eggs=<span class="number">42</span></span><br><span class="line">spam()</span><br><span class="line">print(eggs)</span><br><span class="line"><span class="comment">#out:42</span></span><br><span class="line"><span class="comment">#    42</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>One part can be used in another part, and their name can be the same.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    eggs=<span class="string">'spam local'</span></span><br><span class="line">    print(eggs)<span class="comment">#prints 'spam local'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bacon</span><span class="params">()</span>:</span></span><br><span class="line">    eggs=<span class="string">'bacon local'</span></span><br><span class="line">    print(eggs)<span class="comment">#print 'bacon local'</span></span><br><span class="line">    spam()</span><br><span class="line">    print(eggs)<span class="comment">#print 'bacon local'</span></span><br><span class="line">eggs=<span class="string">'global'</span></span><br><span class="line">bacon()</span><br><span class="line">print(eggs)<span class="comment">#prints 'global'</span></span><br><span class="line"><span class="comment">#out:bacon local</span></span><br><span class="line"><span class="comment">#    spam local</span></span><br><span class="line"><span class="comment">#    bacon local</span></span><br><span class="line"><span class="comment">#    global</span></span><br></pre></td></tr></table></figure>



<h3 id="try"><a href="#try" class="headerlink" title="try"></a>try</h3><p>try, if the condition can’t be satisfied, move on to the except part:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(divideBy)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">42</span> / divideBy</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">'Error :Invalid argument.'</span>)</span><br><span class="line"></span><br><span class="line">print(spam(<span class="number">2</span>))</span><br><span class="line">print(spam(<span class="number">12</span>))</span><br><span class="line">print(spam(<span class="number">0</span>))</span><br><span class="line">print(spam(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p>out:</p>
<p>21.0<br>3.5<br>Error :Invalid argument.<br>None<br>42.0</p>
<h3 id="guess-the-number"><a href="#guess-the-number" class="headerlink" title="guess the number:"></a>guess the number:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#This is a guess the numer game</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">secretNumber=random.randint(<span class="number">1</span>,<span class="number">20</span>)</span><br><span class="line">print(<span class="string">'I am thinking of a number between 1 and 20.'</span>)</span><br><span class="line"><span class="comment">#Ask the player to guess 6 times</span></span><br><span class="line"><span class="keyword">for</span> guessesTaken <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    print(<span class="string">'Take a guess!'</span>)</span><br><span class="line">    guess=int(input())</span><br><span class="line">    <span class="keyword">if</span> guess&lt;secretNumber:</span><br><span class="line">        print(<span class="string">'Your guess is too low.'</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess&gt;secretNumber:</span><br><span class="line">        print(<span class="string">'Your number is too high.'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> guess==secretNumber:</span><br><span class="line">    print(<span class="string">'Good job!You guessed my number in '</span>+str(guessesTaken)+<span class="string">' guesses!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Nope. The number I was thinking of was '</span>+str(secretNumber)+<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<p>out:</p>
<p>I am thinking of a number between 1 and 20.<br>Take a guess!<br>1<br>Your guess is too low.<br>Take a guess!<br>4<br>Your guess is too low.<br>Take a guess!<br>6<br>Your guess is too low.<br>Take a guess!<br>9<br>Your guess is too low.<br>Take a guess!<br>15<br>Good job!You guessed my number in 5 guesses!</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation addition</title>
    <url>/2020/07/12/Translation-addition/</url>
    <content><![CDATA[<p><strong><code>All the pictures are designed and made by Arya(myself).</code></strong></p>
<p><strong><code>All the sentences are translated by me, too.</code></strong></p>
<p><strong><code>If you want to send to other places, please let me know and issue with my name.</code></strong></p>
<p><strong>图文借由本人亲自制作，如转载请告知并发布时署我的名。</strong></p>
<p>我的lofter主页（my lofter homepage）：<a href="https://ganlezheipingjiajiu.lofter.com/" target="_blank" rel="noopener">https://ganlezheipingjiajiu.lofter.com/</a></p>
<p>除p大句子外的一些翻译</p>
<p>This passage collect other translation written not by <strong>priest</strong>.</p>
<h2 id="OTHER-TRANSLATION"><a href="#OTHER-TRANSLATION" class="headerlink" title="OTHER TRANSLATION"></a>OTHER TRANSLATION</h2><p>from some writers in <strong>Lofter</strong></p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNERZRURDZ1pwakVMdkF3MDJGOG1tYTl5QWFaVkdNU215NDBwL2FnMElEVXNRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>“他们谁先动心的？”</p>
<p>“我先动心的。”</p>
<p>——姬野吉</p>
<p>“Which of them was first tempted?”</p>
<p>“I was tempted first.”</p>
<p> <img src="http://imglf6.nosdn0.126.net/img/b2llRE03RXovNERZRURDZ1pwakVMZzc5RDJjNjhhaGdsVHRWRGpQVGZMa3pMaWJOeC9hT25RPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>两个羁绊不深的人，在你的故事了纠缠了生生世世。</p>
<p>——Julien</p>
<p>Two people without deep fetter, in your story, entangle for life and death.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNERZRURDZ1pwakVMcWkxR1lySVVqeHZkYU5jNCtrcEpNYjdkYlN0YkR2Lyt3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>从前你只能意难平，此后你可以带着他们去看山河湖海，历经世间百态，到头来依然相爱。</p>
<p>——倚星辰</p>
<p>Once upon a time your mind can not be reconciled. After, you can take them to see the mountains, rivers, lakes and sea, experienced everything in the world, they still love each other in the end.</p>
<h2 id="A-song-written-for-the-book-by-priest《默读》"><a href="#A-song-written-for-the-book-by-priest《默读》" class="headerlink" title="A song written for the book by priest《默读》"></a>A song written for the book by <strong>priest</strong>《默读》</h2><p>The song called “Yi’mo”</p>
<p>《以沫》</p>
<p><img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEFicW5HbjZXWE1FV2hQVXVSZXhsLzdHeWVtWG9NUXFQN0ZmL1FpSFNIUTN3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img">  </p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEFicW5HbjZXWE1FZlFpN3N2eXpESkdZZEpLc0UvbjF2S3ZJcUI1U3h4VmFBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p><img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEFicW5HbjZXWE1FZEFmaFhPVStwTTNOQStaT3RvVzh1T3BvcjgwUmhXRXlBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img">   </p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEFicW5HbjZXWE1FVkJaZGI4UDM3VVdDWnJSMjQxdzVYWE9lTFlEVlJFTkdnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"></p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEFicW5HbjZXWE1FYkZKZWlUT1kxVGMycnhKczNJL1VLN0tNanJ1RlNHbzFnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNEFicW5HbjZXWE1FWDlwQTM1bzkxVzZhV3ZMVXNQVHBoSEdSbUZSNE1Cemx3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNEFicW5HbjZXWE1FWlpYdGVMUkZxNWRZM3c1azNtZGFqRThKMUlwa3dUL0h3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>我心里有一簇迎着烈日而生的花</p>
<p>In my heart, there is a cluster of flowers facing the sun, </p>
<p>比一切美酒都要芬芳</p>
<p>more fragrant than all the wine,</p>
<p>滚烫的馨香淹没过稻草人的胸膛</p>
<p>the fragrance overflows the scarecrow’s chest, </p>
<p>草扎的精神</p>
<p>the spirit of the grass, </p>
<p>从此万寿无疆</p>
<p>from now on, forever.</p>
<p>朝夕如昨 你眼中飞蛾扑火</p>
<p>Day is like yesterday, moths to a flame in your eyes</p>
<p>为何选择 沉默</p>
<p>Why you choose to be silent? </p>
<p>多年又过 是谁轻声诵读着</p>
<p>Years passed by, who is chanting softly</p>
<p>生死 同爱恨 分隔</p>
<p>life and death, just like love and hate, are separated</p>
<p>地狱之门大开着 眼前愈发浑浊</p>
<p>The door of hell is open, the views in front becoming more and more muddy</p>
<p>默念恶魔的名册</p>
<p>Reading the register of demon</p>
<p>奄奄一息是我</p>
<p>I’m dying</p>
<p>猝然消逝的流星 一闪划过</p>
<p>The evanescent meteor shooting across</p>
<p>明明不舍</p>
<p>obviously unwilling</p>
<p>掐灭了烟火</p>
<p>snuffing off the fireworks</p>
<p>黑色 描摹轮廓</p>
<p>Darkness depicts the outline</p>
<p>我一人漂浪 岩浆滚烫漫过胸膛</p>
<p>I wander alone, scalding lava overflowing my chest </p>
<p>心底的芬芳 向烈日生长</p>
<p>Fragrance inside my heart grow towards the sun</p>
<p>你去那远方 没有黎明不见曙光</p>
<p>The remote place you go has no light of dawn</p>
<p>也无悔 深渊 同往</p>
<p>I won’t regret to go to abyss with you</p>
<p>单曲循环一首歌 过往深深烙刻</p>
<p>Single cycle a song, past deeply engraved</p>
<p>光阴在无度挥霍 分清善恶始末</p>
<p>Time is wasted inordinately, distinguishing the good and evil, beginning and end</p>
<p>这人间万家灯火 值不值得</p>
<p>Wether the world of lights is worthy of</p>
<p>靠岸停泊</p>
<p>Letting me dock the berth</p>
<p>迷雾中湮没</p>
<p>Losing in the mist</p>
<p>光影 悄悄褪色</p>
<p>Shadow is fading quietly</p>
<p>我一人漂浪 岩浆滚烫漫过胸膛</p>
<p>I wander alone, scalding lava overflowing my chest </p>
<p>心底的芬芳 向烈日生长</p>
<p>Fragrant things inside my heart grow towards the sun</p>
<p>你去那远方 没有黎明不见曙光</p>
<p>The remote place you go has no light of dawn</p>
<p>也无悔 深渊 同往</p>
<p>I won’t regret to go to abyss with you</p>
<p>船泊岸的港</p>
<p>The port that ships berth</p>
<p>一束微光照进了窗</p>
<p>A beam of light shine through window</p>
<p>我在你身旁 愈合了心伤</p>
<p>I’m here for you, with inner healing</p>
<p>击碎的波浪</p>
<p>The broken waves</p>
<p>此消彼长见证过往</p>
<p>Shift and witness the past</p>
<p>同时光 万寿 无疆</p>
<p>At the same time, live forever</p>
<p>万年后</p>
<p>After ten thousand years</p>
<p>你和我</p>
<p>you and me</p>
<p>化作了</p>
<p>will change into</p>
<p>两朵泡沫</p>
<p>Two bubbles</p>
<p>重逢时 礁石上相濡以沫</p>
<p>When meeting again, on the reef, we live on each other</p>
<p>难舍</p>
<p>Hard to separate</p>
<p>你温柔那刻 茫茫人海化作粉末</p>
<p>Your gentleness at that moment, turns into powder in the crowd</p>
<p>自愈的沉疴 暗淡了血色</p>
<p>Self-healing rottenness and the dark blood</p>
<p>我未经允诺</p>
<p>Without your permission,</p>
<p>告别沙丘远离荒漠</p>
<p>I bid farewell to the dunes, left away from the desert</p>
<p>只为那 一瞬 星火</p>
<p>Only for that moment of spark</p>
<p>孤舟随烟波</p>
<p>Lonely boat floating with tide</p>
<p>渡我</p>
<p>Puts me across</p>
<h2 id="A-song-written-for-the-book-by-priest-《杀破狼》"><a href="#A-song-written-for-the-book-by-priest-《杀破狼》" class="headerlink" title="A song written for the book by priest 《杀破狼》"></a>A song written for the book by <strong>priest</strong> 《杀破狼》</h2><p>The song called “Yue’ruo’liu’jin”(means the moon is like flowing gold)</p>
<p>《月若流金》</p>
<p> <img src="http://imglf6.nosdn0.126.net/img/b2llRE03RXovNERucUZwaG0ySlRsdEVkUldGZENETGx5WE1nRW8vVzVTTWF1OHpkWUJOZllBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNERucUZwaG0ySlRsbGxhWDRHVnFtcU42VDJyS1F2Mk5vVE84dDIzV3E3bWlBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p> <img src="http://imglf6.nosdn0.126.net/img/b2llRE03RXovNERucUZwaG0ySlRsbFFURkxtK2xJSmx0K2dYcytZeVkxeG9CZVg3dTF1eUVnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNERucUZwaG0ySlRsdXZUdkIwV3VmbHNRbUR6VjVBYTRPME81MFJSRkpvTWZRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNERucUZwaG0ySlRscjZFMVdpYzVETzlhZDhRWHYxUkVxTm50UHZOdGNUa0VRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNERucUZwaG0ySlRsdmhEMElXNVpRY1BJSUFGQ20yWWtlVE82ZjAvalA5NW5nPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p> <img src="http://imglf6.nosdn0.126.net/img/b2llRE03RXovNERucUZwaG0ySlRsZ1A2K244dzc5YmhoN0NsVGtEZ1ZwZHVManh1bzJSeXNBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNERucUZwaG0ySlRsc0RMMHdwV2tueVBLQzNTZ1h4V1VhSXllVUhzRU45alNRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>笑身无长处</p>
<p>Laugh at myself for no merit</p>
<p>唯耳目通肝胆</p>
<p>Blind,deaf,still devoted</p>
<p>见锦簇花繁</p>
<p>Seen prosperous views</p>
<p>也见黄沙血染</p>
<p>Seen bloody battlefield</p>
<p>听锦瑟无端</p>
<p>Heard stringed and woodwind</p>
<p>还听破鼓擂桴断</p>
<p>Heard broken drum and stick</p>
<p>过声色 踏铁马 何惧不还</p>
<p>Experienced, combated, why fear in no back</p>
<p>恼负尽千策</p>
<p>All clever strategy</p>
<p>却七窍却通一环</p>
<p>Something wrong inside</p>
<p>有情出肺腑</p>
<p>Emotion from the heart</p>
<p>竟与风月无关</p>
<p>Irrelevant to romance</p>
<p>凭耳不能闻</p>
<p>Can not hear through ears</p>
<p>这眼尚也不曾看</p>
<p>Also can’t see through eyes</p>
<p>是愚人 是痴人 随人叹</p>
<p>A simpleton, the crazy, sigh along</p>
<p>一朝盛景总始于东风送暖</p>
<p>Flourishing age starts from east wind’s gift</p>
<p>升平之世终如花向晚</p>
<p>Heyday like withered flowers</p>
<p>月若流金 岁若长河 时光荏苒</p>
<p>Moon like flowing gold, time like currency, time flies</p>
<p>此时沧 彼时桑 天地皆平凡</p>
<p>Vicissitude here, and another, everything is ordinary</p>
<p>曾认这一腔承千帆</p>
<p>Once admitted, my heavy responsibility</p>
<p>衷肠无曲直 横骨自反</p>
<p>Loyalty has no true /false, duty or rebellion</p>
<p>借天三分胆 纵万夫敢一战</p>
<p>Borrow courage from the god, leading thousands for a fight</p>
<p>唯遇你 一念百转</p>
<p>When meeting you, mind keeps changing</p>
<p>顾此生 惟一心分两半</p>
<p>Viewing my life, divide mind into half</p>
<p>从此多反复 方知温软</p>
<p>From that time and again, know the warmth</p>
<p>一半赠河山 换万家得长安</p>
<p>One half for the land, wish all be peaceful</p>
<p>余一半 愿君好梦正酣</p>
<p>Remainder, wish you sweet dream</p>
<p>人生无长乐</p>
<p>Sweet can not last</p>
<p>便莫计较悲欢</p>
<p>Don’t haggle over</p>
<p>勿怨锦衣单</p>
<p>Don’t complain thin clothes</p>
<p>从未觉塞上寒</p>
<p>Never feeling the chill</p>
<p>至得你心念</p>
<p>Till your wishes fulfill</p>
<p>醍醐竟识了冷暖</p>
<p>Realizing warm and cold</p>
<p>或当断 终未断 惹心乱</p>
<p>Indecision, procrastination, disturbing the mind</p>
<p>未知苦处 怎信神佛懂尘寰</p>
<p>Experiencing no hardship, how to have the belief</p>
<p>不识情重 人生如一栈</p>
<p>Having no appreciation,life’s like a game</p>
<p>盛世将倾 深渊在侧 我辈来担</p>
<p>Heyday’s falling, cliff’s nearby, in charge of us</p>
<p>向此生 为之殁 万死皆无憾</p>
<p>All my life,fight for it, dying for no regreting</p>
<p>曾认这一腔承千帆</p>
<p>Once admitted, my heavy responsibility</p>
<p>衷肠无曲直 横骨自反</p>
<p>Loyalty has no true /false, duty or rebellion</p>
<p>借天三分胆 纵万夫敢一战</p>
<p>Borrow courage from the god, leading thousands for a fight</p>
<p>唯遇你 一念百转</p>
<p>When meeting you, mind keeps changing</p>
<p>愿一世 与君老生常谈</p>
<p>Wish whole life, always chat with you</p>
<h1 id="A-song-written-for-the-book-《全球高考》"><a href="#A-song-written-for-the-book-《全球高考》" class="headerlink" title="A song written for the book 《全球高考》"></a>A song written for the book 《全球高考》</h1><p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf4.nosdn0.126.net/img/b2llRE03RXovNEJnVHlISnVlcHE0NXN1Z3daZXVZczFNZFM3N0dkVGlGRnZKOFdyNWl2WmRRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf6.nosdn0.126.net/img/b2llRE03RXovNEJnVHlISnVlcHE0OTlNOWRjdnY0L0loQlNPNVA1OU1KSERxVERXYTdZTGRRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf3.nosdn0.126.net/img/b2llRE03RXovNEJnVHlISnVlcHE0enVGdlJkTnpwbDNxcFF5Vk1ERG95SmJXenRYMEF3NjNnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf6.nosdn0.126.net/img/b2llRE03RXovNEJnVHlISnVlcHE0M0NUeUhjK0RsNi8reThSTzFURXlpZlJMc2dwTWRybmlRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf4.nosdn0.126.net/img/b2llRE03RXovNEJnVHlISnVlcHE0MHFwZ1NSWFZ4dUUyY1ZvaTNQZ2RUeExrSFpFaVFDbzN3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf4.nosdn0.126.net/img/b2llRE03RXovNEJnVHlISnVlcHE0OVoyRlRWdm9La0ZzWjJKdWxmenVjbDJIdm1naTZNTk93PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf4.nosdn0.126.net/img/b2llRE03RXovNEJnVHlISnVlcHE0N0x3OFdqZnNTQkJ5b2VER25ObGtUejhHZHQ1TG5RbWFnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf5.nosdn0.126.net/img/b2llRE03RXovNEJnVHlISnVlcHE0M3BKR285QXloaUxpL2FmVVE5YXVldUVMaE83UXBTSFhBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p>人间是考场</p>
<p>这一场你拿多少分</p>
<p>How many points did you score in this game</p>
<p>像有谁不断在提问</p>
<p>Someone seemed to be asking questions</p>
<p>模糊眼神熟悉口吻</p>
<p>Vague eyes and a familiar tone</p>
<p>或只是吻</p>
<p>Or just a kiss</p>
<p>下一场你遇什么人</p>
<p>Who will you meet next</p>
<p>像有谁注定不安分</p>
<p>Like someone destined to be restless</p>
<p>探究着你的身份</p>
<p>Exploring your identity</p>
<p>或你本身</p>
<p>Or who you really are</p>
<p>形形色色假假真真</p>
<p>All kinds, false and true</p>
<p>你考过一门又一门</p>
<p>You passed one exam after another</p>
<p>那试题比生活残忍</p>
<p>The test was more cruel than life</p>
<p>比死温存</p>
<p>And tender than death</p>
<p>哭哭笑笑爱爱恨恨</p>
<p>Laugh and cry, love and hate</p>
<p>你见过一人又一人</p>
<p>You’ve seen one person after another</p>
<p>有人叩地狱的门</p>
<p>Someone is knocking at the door of hell</p>
<p>有人咬疯子的唇</p>
<p>Someone is biting the madman’s lip</p>
<p>关于生存</p>
<p>About survival</p>
<p>还是只关于标准</p>
<p>Or just standards</p>
<p>生存趋向牺牲 标准已没有标准</p>
<p>Survival tends to sacrifice, there is no standard</p>
<p>终于混沌</p>
<p>Finally the chaos</p>
<p>像 一座坟中千万尘</p>
<p>Like dust in a grave</p>
<p>竟仍有千万灵魂</p>
<p>There are still thousands of souls</p>
<p>可当废墟的风吹散尘土</p>
<p>But when the winds of ruin scatter the dust</p>
<p>世界崩塌又重塑</p>
<p>The world collapsed and rebuilt</p>
<p>再一次每一次无数次义无反顾</p>
<p>Again, every time for an infinite number of times</p>
<p>只与你同路</p>
<p>Only in your way</p>
<p>多少往事疮痍满目</p>
<p>There was much devastation</p>
<p>有的早腐烂入土</p>
<p>Some rot into the ground</p>
<p>有的却完好保留在记忆最初</p>
<p>Some remain intact in the beginning of memory</p>
<p>在虚无深处</p>
<p>In the depths of nothingness</p>
<p>刻骨</p>
<p>profound</p>
<p>是作为传说被听闻</p>
<p>Heard as a legend</p>
<p>对立的考生与评审</p>
<p>Opposite examinee and judge</p>
<p>相同场景不同时分</p>
<p>Same scene at different time</p>
<p>一瞬停顿</p>
<p>A moment of pause</p>
<p>那些挑衅命运的人</p>
<p>Those who defy fate</p>
<p>会不会被命运围困</p>
<p>Will be surrounded by fate</p>
<p>开始时鲜血开刃</p>
<p>At first the knives cut with blood</p>
<p>结束时众生下沉</p>
<p>When it ends, all beings sink</p>
<p>关于根本</p>
<p>About the principle</p>
<p>还是只关于伤痕</p>
<p>Or is it just about scars</p>
<p>意志撼动根本 伤痕造美丽花纹</p>
<p>Will shake the fundament and scars create a beautiful pattern</p>
<p>多么相衬</p>
<p>How they match</p>
<p>就 考过这最后一轮</p>
<p>Just passed this last round</p>
<p>赠人间风光一程</p>
<p>Give the world a chance to be viewed</p>
<p>而风光来自你双目</p>
<p>And scenery comes from your eyes</p>
<p>哪怕曾一片荒芜</p>
<p>Even if once a barren</p>
<p>没有光没有影也没有月升日出</p>
<p>With no light, no shadow, no moon</p>
<p>却有人驻足</p>
<p>Someone will stop</p>
<p>是风光来自他脚步</p>
<p>Scenery comes from his footsteps</p>
<p>哪怕曾历经迷途</p>
<p>Even if you have been lost</p>
<p>仍能在寂黑中杀出片斑驳蓝图</p>
<p>You can still fight your way out of speckled blueprint in the silence of the dark</p>
<p>灼亮了双目</p>
<p>Burning eyes</p>
<p>可当废墟的风吹散尘土</p>
<p>But when the winds of ruin scatter the dust</p>
<p>世界崩塌又重塑</p>
<p>The world collapsed and rebuilt </p>
<p>再一次每一次无数次义无反顾 </p>
<p>Again, every time for an infinite number of times</p>
<p>只与你同路</p>
<p>Only in your way</p>
<p>多少往事疮痍满目</p>
<p>There was much devastation</p>
<p>有的早腐烂入土</p>
<p>Some rot into the ground</p>
<p>有的却完好保留在记忆最初</p>
<p>Some remain intact in the beginning of memory</p>
<p>在虚无深处</p>
<p>In the depths of nothingness</p>
<p>刻骨</p>
<p>profound</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>-translation</tag>
      </tags>
  </entry>
  <entry>
    <title>VB小游戏game</title>
    <url>/2020/05/05/VB%E5%B0%8F%E6%B8%B8%E6%88%8Fgame/</url>
    <content><![CDATA[<h1 id="VB-simple-game-model"><a href="#VB-simple-game-model" class="headerlink" title="VB simple game model"></a>VB simple game model</h1><p>the flying bird</p>
<p> <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1588693844451&di=f1e5e33b94ba3a3aa019b3a8d1a81129&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180714%2F0f2f7766a90a4614b3c1783e3cad10b5.jpeg" alt="点击查看源网页"> </p>
<p>Although I can’ t copy the picture, showing the way how to do it is a good way to both understand the game and learn the programming language.</p>
<h2 id="the-code"><a href="#the-code" class="headerlink" title="the code"></a>the code</h2><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Command1_Click()   <span class="comment">'press botton</span></span><br><span class="line">    Label1.Top = Label1.Top - <span class="number">700</span> <span class="comment">'700 is the distance the 'bird' moves for once</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Command2_Click()   <span class="comment">'reset botton</span></span><br><span class="line">Label1.Left = <span class="number">375</span> <span class="comment">'let the 'bird' get to the original position</span></span><br><span class="line">Label1.Top = <span class="number">2280</span></span><br><span class="line">Timer1.Enabled = <span class="literal">True</span>   <span class="comment">'reset the timer and the command</span></span><br><span class="line">Command1.Enabled = <span class="literal">True</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Timer1_Timer()     <span class="comment">'timer</span></span><br><span class="line">Label1.Top = Label1.Top + <span class="number">40</span>   <span class="comment">'40 is the speed it falls</span></span><br><span class="line">Label1.Left = Label1.Left + <span class="number">20</span>  <span class="comment">'20 is the speed it moves forward</span></span><br><span class="line"><span class="keyword">If</span> Label1.Left &gt; Text1.Left - Label1.Width <span class="keyword">And</span> Label1.Left &lt; Text1.Left + Text1.Width <span class="keyword">Then</span>  <span class="comment">'when the 'bird' moves into the given area</span></span><br><span class="line">    <span class="keyword">If</span> Label1.Top &lt; Text1.Height <span class="keyword">Or</span> Label1.Top &gt; Text2.Top <span class="keyword">Then</span> <span class="comment">'when the 'bird' touch the wall</span></span><br><span class="line">        Timer1.Enabled = <span class="literal">False</span></span><br><span class="line">        Command1.Enabled = <span class="literal">False</span></span><br><span class="line">        Print <span class="string">"you lost!"</span>  <span class="comment">'stop all, and show that you have lost</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">If</span> Label1.Left &gt; Text1.Left + Text1.Width + <span class="number">1000</span> <span class="keyword">Then</span>   <span class="comment">'when the 'bird' get to the final point</span></span><br><span class="line">    Print <span class="string">"you win!"</span>     <span class="comment">'show you win and stop all</span></span><br><span class="line">    Timer1.Enabled = <span class="literal">False</span></span><br><span class="line">    Command1.Enabled = <span class="literal">False</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>the situation that the ‘bird’ touch the wall:</p>
<p><img src="https://s1.ax1x.com/2020/05/05/Ykpgf0.png" alt="Ykpgf0.png"></p>
<p>the situation that the ‘bird’ get to the final point:</p>
<p><img src="https://s1.ax1x.com/2020/05/05/YkCaqg.png" alt="YkCaqg.png"></p>
<h2 id="showing-as-video"><a href="#showing-as-video" class="headerlink" title="showing as video"></a>showing as video</h2><video id="video" controls="" preload="none">
    <source id="mp4" src="C:/Users/Administrator/Desktop/作业/vb/鸟.mp4" type="video/mp4">
</video>
]]></content>
      <categories>
        <category>daily programming</category>
      </categories>
      <tags>
        <tag>-VB</tag>
      </tags>
  </entry>
  <entry>
    <title>b站bv转av</title>
    <url>/2020/03/26/b%E7%AB%99bv%E8%BD%ACav/</url>
    <content><![CDATA[<p>b站将av视频号换成了更高级的bv号，转化代码如下：（python）<br>bv to av：</p>


<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=99160403&bvid=BV1R7411y7kw&cid=169272770&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">
    </iframe>
</div>


<p>av to bv：</p>


<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=98869161&bvid=BV1N741127Tj&cid=169275257&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">
    </iframe>
</div>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bv to av:</span></span><br><span class="line">bv=input()</span><br><span class="line">c=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bv:</span><br><span class="line">    c=c+[i]</span><br><span class="line">c=c[<span class="number">2</span>:]</span><br><span class="line">table=&#123;<span class="string">'1'</span>:<span class="number">13</span>,<span class="string">'2'</span>:<span class="number">12</span>,<span class="string">'3'</span>:<span class="number">46</span>,<span class="string">'4'</span>:<span class="number">31</span>,<span class="string">'5'</span>:<span class="number">43</span>,<span class="string">'6'</span>:<span class="number">18</span>,<span class="string">'7'</span>:<span class="number">40</span>,<span class="string">'8'</span>:<span class="number">28</span>,<span class="string">'9'</span>:<span class="number">5</span>,<span class="string">'A'</span>:<span class="number">54</span>,<span class="string">'B'</span>:<span class="number">20</span>,<span class="string">'C'</span>:<span class="number">15</span>,<span class="string">'D'</span>:<span class="number">8</span>,<span class="string">'E'</span>:<span class="number">39</span>,<span class="string">'F'</span>:<span class="number">57</span>,<span class="string">'G'</span>:<span class="number">45</span>,<span class="string">'H'</span>:<span class="number">36</span>,<span class="string">'J'</span>:<span class="number">38</span>,<span class="string">'K'</span>:<span class="number">51</span>,</span><br><span class="line">      <span class="string">'L'</span>:<span class="number">42</span>,<span class="string">'M'</span>:<span class="number">49</span>,<span class="string">'N'</span>:<span class="number">52</span>,<span class="string">'P'</span>:<span class="number">53</span>,<span class="string">'Q'</span>:<span class="number">7</span>,<span class="string">'R'</span>:<span class="number">4</span>,<span class="string">'S'</span>:<span class="number">9</span>,<span class="string">'T'</span>:<span class="number">50</span>,<span class="string">'U'</span>:<span class="number">10</span>,<span class="string">'V'</span>:<span class="number">44</span>,<span class="string">'W'</span>:<span class="number">34</span>,<span class="string">'X'</span>:<span class="number">6</span>,<span class="string">'Y'</span>:<span class="number">25</span>,<span class="string">'Z'</span>:<span class="number">1</span>,<span class="string">'a'</span>:<span class="number">26</span>,<span class="string">'b'</span>:<span class="number">29</span>,<span class="string">'c'</span>:<span class="number">56</span>,<span class="string">'d'</span>:<span class="number">3</span>,<span class="string">'e'</span>:<span class="number">24</span>,<span class="string">'f'</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="string">'g'</span>:<span class="number">47</span>,<span class="string">'h'</span>:<span class="number">27</span>,<span class="string">'i'</span>:<span class="number">22</span>,<span class="string">'j'</span>:<span class="number">41</span>,<span class="string">'k'</span>:<span class="number">16</span>,<span class="string">'m'</span>:<span class="number">11</span>,<span class="string">'n'</span>:<span class="number">37</span>,<span class="string">'o'</span>:<span class="number">2</span>,<span class="string">'p'</span>:<span class="number">35</span>,<span class="string">'q'</span>:<span class="number">21</span>,<span class="string">'r'</span>:<span class="number">17</span>,<span class="string">'s'</span>:<span class="number">33</span>,<span class="string">'t'</span>:<span class="number">30</span>,<span class="string">'u'</span>:<span class="number">48</span>,<span class="string">'v'</span>:<span class="number">23</span>,<span class="string">'w'</span>:<span class="number">55</span>,<span class="string">'x'</span>:<span class="number">32</span>,<span class="string">'y'</span>:<span class="number">14</span>,<span class="string">'z'</span>:<span class="number">19</span>&#125;</span><br><span class="line">d=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(bv)<span class="number">-2</span>):</span><br><span class="line">    d=d+[table[c[i]]]</span><br><span class="line">f=d[<span class="number">0</span>]*<span class="number">58</span>**<span class="number">6</span>+d[<span class="number">1</span>]*<span class="number">58</span>**<span class="number">2</span>+d[<span class="number">2</span>]*<span class="number">58</span>**<span class="number">4</span>+d[<span class="number">3</span>]*<span class="number">58</span>**<span class="number">8</span>+d[<span class="number">4</span>]*<span class="number">58</span>**<span class="number">5</span>+d[<span class="number">5</span>]*<span class="number">58</span>**<span class="number">9</span>+d[<span class="number">6</span>]*<span class="number">58</span>**<span class="number">3</span>+d[<span class="number">7</span>]*<span class="number">58</span>**<span class="number">7</span>+d[<span class="number">8</span>]*<span class="number">58</span>+d[<span class="number">9</span>]</span><br><span class="line">f=bin(f<span class="number">-100618342136696320</span>)</span><br><span class="line">f=list(f[<span class="number">2</span>:])</span><br><span class="line">g=<span class="number">0</span></span><br><span class="line">h=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'1010100100111011001100100100'</span>:</span><br><span class="line">    <span class="keyword">if</span> f[g]==str(i):</span><br><span class="line">        h=h+[<span class="string">'0'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        h=h+[<span class="string">'1'</span>]</span><br><span class="line">    g=g+<span class="number">1</span></span><br><span class="line">av=<span class="string">''</span>.join(h)</span><br><span class="line">av=<span class="string">'av'</span>+str(int(h,<span class="number">2</span>))</span><br><span class="line">print(av)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例：input：bv17x411w7KC</span></span><br><span class="line"><span class="comment">#     output：av170001</span></span><br></pre></td></tr></table></figure>

<h2 id="代码原版："><a href="#代码原版：" class="headerlink" title="代码原版："></a>代码原版：</h2><p>作者(author)：mcfx<br>链接(link)：<a href="https://www.zhihu.com/question/381784377/answer/1099438784" target="_blank" rel="noopener">https://www.zhihu.com/question/381784377/answer/1099438784</a><br>来源(from)：知乎</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table=<span class="string">'fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF'</span></span><br><span class="line">tr=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">58</span>):</span><br><span class="line">    tr[table[i]]=i</span><br><span class="line">s=[<span class="number">11</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">xor=<span class="number">177451812</span></span><br><span class="line">add=<span class="number">8728348608</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(x)</span>:</span></span><br><span class="line">    r=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        r+=tr[x[s[i]]]*<span class="number">58</span>**i</span><br><span class="line">    <span class="keyword">return</span> (r-add)^xor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(x)</span>:</span></span><br><span class="line">    x=(x^xor)+add</span><br><span class="line">    r=list(<span class="string">'BV1  4 1 7  '</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        r[s[i]]=table[x//<span class="number">58</span>**i%<span class="number">58</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(r)</span><br><span class="line"></span><br><span class="line">print(dec(<span class="string">'BV17x411w7KC'</span>))</span><br><span class="line">print(dec(<span class="string">'BV1Q541167Qg'</span>))</span><br><span class="line">print(dec(<span class="string">'BV1mK4y1C7Bz'</span>))</span><br><span class="line">print(enc(<span class="number">170001</span>))</span><br><span class="line">print(enc(<span class="number">455017605</span>))</span><br><span class="line">print(enc(<span class="number">882584971</span>))</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#170001</span></span><br><span class="line"><span class="comment">#455017605</span></span><br><span class="line"><span class="comment">#882584971</span></span><br><span class="line"><span class="comment">#BV17x411w7KC</span></span><br><span class="line"><span class="comment">#BV1Q541167Qg</span></span><br><span class="line"><span class="comment">#BV1mK4y1C7Bz</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>daily programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>‘certificate</title>
    <url>/2020/05/30/certificate/</url>
    <content><![CDATA[<h1 id="List-of-certificates-and-other-activities"><a href="#List-of-certificates-and-other-activities" class="headerlink" title="List of certificates and other activities"></a>List of certificates and other activities</h1><h2 id="Academic-competition"><a href="#Academic-competition" class="headerlink" title="Academic competition"></a>Academic competition</h2><h3 id="1-ETS-critical-thinking"><a href="#1-ETS-critical-thinking" class="headerlink" title="1. ETS (critical thinking)"></a>1. ETS (critical thinking)</h3><p><img src="https://s1.ax1x.com/2020/05/30/tQpZND.jpg" alt="tQpZND.jpg"></p>
<h3 id="2-CTB"><a href="#2-CTB" class="headerlink" title="2. CTB"></a>2. CTB</h3><p>Our research topic was about rubbish classification. Looking for details: <a href="https://arya-1017.github.io/2020/03/21/CTB%E5%8F%82%E8%B5%9B%E8%BF%87%E7%A8%8B/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/03/21/CTB%E5%8F%82%E8%B5%9B%E8%BF%87%E7%A8%8B/</a></p>
<p><a href="https://imgchr.com/i/tQpJUS" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/30/tQpJUS.jpg" alt="tQpJUS.jpg"></a></p>
<h3 id="3-Haihua-AI-competition"><a href="#3-Haihua-AI-competition" class="headerlink" title="3. Haihua AI competition"></a>3. Haihua AI competition</h3><p>Using machine learning to achieve the automatic rubbish classification. Looking for details:</p>
<p>1: <a href="https://arya-1017.github.io/2020/02/25/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B1/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/02/25/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B1/</a></p>
<p>2: <a href="https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B2/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B2/</a></p>
<p>3: <a href="https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B3/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B3/</a></p>
<p>4: <a href="https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B4/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B4/</a></p>
<p>5: <a href="https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B5/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B5/</a></p>
<p>6: <a href="https://arya-1017.github.io/2020/03/31/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B6/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/03/31/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B6/</a></p>
<p>thoughts: <a href="https://arya-1017.github.io/2020/04/18/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9Bthought/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/04/18/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9Bthought/</a></p>
<h3 id="4-UKMT"><a href="#4-UKMT" class="headerlink" title="4.  UKMT"></a>4.  UKMT</h3><p><img src="https://s1.ax1x.com/2020/05/30/tQCyp4.jpg" alt="tQCyp4.jpg"></p>
<h2 id="Other-activities"><a href="#Other-activities" class="headerlink" title="Other activities"></a>Other activities</h2><h3 id="1-Dragon-boat-race"><a href="#1-Dragon-boat-race" class="headerlink" title="1. Dragon boat race"></a>1. Dragon boat race</h3><p>‘Shuimuqinhuai cup’ the 13th Nanjing dragon boat race in 2019</p>
<p>the first prize</p>
<p><img src="https://s1.ax1x.com/2020/05/30/tQCZSH.png" alt="tQCZSH.png"></p>
<p>photos:</p>
<p><img src="https://s1.ax1x.com/2020/05/30/tQF1k6.png" alt="tQF1k6.png"></p>
<p><img src="https://s1.ax1x.com/2020/05/30/tQAQJK.png" alt="tQAQJK.png"></p>
<p><img src="https://s1.ax1x.com/2020/05/30/tQA8Qe.png" alt="tQA8Qe.png"></p>
<p><img src="https://s1.ax1x.com/2020/05/30/tQAJLd.jpg" alt="tQAJLd.jpg"></p>
<h3 id="2-horse-riding"><a href="#2-horse-riding" class="headerlink" title="2. horse riding"></a>2. horse riding</h3><p><img src="https://s1.ax1x.com/2020/05/30/tQAoy4.jpg" alt="tQAoy4.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/05/30/tQES6e.jpg" alt="tQES6e.jpg"></p>
]]></content>
      <categories>
        <category>competitions</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/19/hello-world/</url>
    <content><![CDATA[<p>Welcome! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Testing</category>
      </categories>
  </entry>
  <entry>
    <title>Translation</title>
    <url>/2020/07/12/Translation/</url>
    <content><![CDATA[<h1 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h1><p><strong><code>All the pictures are designed and made by Arya(myself).</code></strong></p>
<p><strong><code>All the sentences are translated by me, too.</code></strong></p>
<p><strong><code>If you want to send to other places, please let me know and issue with my name.</code></strong></p>
<p><strong>图文借由本人亲自制作，如转载请告知并发布时署我的名。</strong></p>
<p>我的lofter主页（my lofter homepage）：<a href="https://ganlezheipingjiajiu.lofter.com/" target="_blank" rel="noopener">https://ganlezheipingjiajiu.lofter.com/</a></p>
<p>本文专门翻译一些我喜欢的句子，来自我崇拜的一位作者<strong>priest</strong>。(按书分类)</p>
<p>This passage collects all my translation of the sentences from my favorite writer <strong>priest</strong>.(classified according to the books)</p>
<h2 id="1-《杀破狼》"><a href="#1-《杀破狼》" class="headerlink" title="1.《杀破狼》"></a>1.《杀破狼》</h2><img src="https://s1.ax1x.com/2020/04/08/GWFWDI.png" alt="GWFWDI.png" style="zoom: 33%;" />

<p>1）“我大将军，一言九鼎”“战无不胜”</p>
<p>“My general, keep the solemn promise” “Invincible”</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWer5t.png" alt="GWer5t.png"></p>
<p>2）经年痴心妄想，一朝走火入魔。</p>
<p>Years of wishful thinking, once gone.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWmoeH.png" alt="GWmoeH.png"></p>
<p>3）臣顾昀，救驾来迟了。</p>
<p>Liege Gu Yun，forgive me for the late secure.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWu7Gt.png" alt="GWu7Gt.png"></p>
<p>4）有人心易变，三头五年便面目全非；</p>
<p>也有人心如止水，十万八千里走过，初心不改。</p>
<p>Some people are fickle, </p>
<p>and in the first three or five years they have changed beyond recognition; </p>
<p>There are also people like calm water, thousands of miles through, remain true to the original aspiration.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWMOEQ.png" alt="GWMOEQ.png"></p>
<p>5）天理伦常在上，除此以外，要星星不给月亮，就算阴天下雨我也架个梯子上天给你摘，好不好?</p>
<p>In addition to the morality, you want the stars I do not give the moon, even if it is cloudy and rainy I also put up a ladder to heaven for you to pick, ok?</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GW1gBT.png" alt="GW1gBT.png"></p>
<p>6）附一掌送抵江北，替我丈量伊人衣带可曾宽否。</p>
<p>With a hand sending to Jiangbei, for me to measure whether your garment is wider.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEFtVzhRSzZRNEY1eWE4VmdTN0xJMkNkZ2hvWnJLSG43RFRMS2dZYkRtbnFBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>7）何人知我霜雪催，何人与我共一醉。</p>
<p>Who can understand me, who will get drunk with me.</p>
<p> <img src="http://imglf6.nosdn0.126.net/img/b2llRE03RXovNEF0WHc5UVpaUENlNHVGSG1zdFRlNXhEbWkrRjVITGgwUW5xekRmVDl2SzNBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>8）每个人都会遇到自己生命中看似无法战胜的敌人，有些是灾难，有些只是磨砺——你知道磨砺和灾难的区别吗?区别就是，灾难是不可战胜的，而磨砺是可以越过的。</p>
<p>Everyone will meet their own seemingly invincible enemies in life, some of them are disasters, some of them are just grinding – do you know the difference between grinding and disaster? The difference is that while disaster is invincible, grit can be overcome.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEE3MCtiUSswczdMWTFIdkltV2ZqNnVQekR2L1VuMXJTZ1kyNHZTYTBPNVRRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>9）我到过一生归宿之地，生前身后再无遗憾，不必留什么血脉。</p>
<p>I have been to the place where I belong, and have no regrets in life or death. I don’t need a heir. </p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEFtOE5tRElYdmJ4OVNXcDZteitPbGZBU1h1UElTcmJlS2lTdU05L0pIYlF3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>10）信不信在你，度不度在我。</p>
<p>Believing or not is your choice, releasing the soul or not is my choice.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNENZQ1lGTkh2eG1LdGR6bndzanhPcVlDeGJQcWNNVGl5Y0lwZ0JvQ3FtOXVnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>11)未知苦处，不信神佛。</p>
<p>Haven’t been suffering, not believing in god Buddha.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEIyK0ExWno0TVMvV09mZkRmc3ZpL2VWbjUxdkp5eTE4OUJtcElVOFl6M25BPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>12)“我封侯安定，就是为大梁打仗的”</p>
<p>I,Duke Anding, am born to fight for great Liang Dynasty. </p>
<p> <img src="http://imglf6.nosdn0.126.net/img/b2llRE03RXovNEI5QUpoTmJiMWFubjVZbDE4VDBodlJzT1haallGMDVseTUxOUcvTGl6MlZ3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>13）风雨飘摇中大厦将倾，然而只要那根磐石梁柱犹未倒、玄铁军威风骨未折，便总有将这破败河山收拾起来的一天。</p>
<p>In the midst of the storm, the building will tilt. However, as long as the rock beam column are still there, xuantie military’s bone is not broken, there will always be a day to recover this ruined territory.</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEFXeDE5dGtqS0VRTERWV0RpL3Z3QWd2di9qUW1XOXAyWUdEZWIzNVpNaGRRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>14）你说，不管怎么样我都接受得了，只要我活着一天，他是疯是傻我都管到底。</p>
<p>Do say it. I can live with any result, as long as I live, whether he’s mad or stupid I will take care of him.</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEF5S2thRjZ2d0RSMVJSLzZNWUEyaU5IMytqYmV5VmJMY0I5MGkwa0hMQUtRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>15）忽然间，他有种感觉，好像多灾多难、几聚几散的玄铁营始终垫在社稷之下，像一把散落的种子，流落四方，不知不觉中便能从哪里长出一棵参天大树。</p>
<p>All of a sudden, he had a feeling, as if the calamitous and on-off Xuantie camp has been buried under the land, like a scattered seeds, out of nowhere grew a towering tree silently.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNERVWk1qY0tMZ3d2aHcyZGw0UGwvczIyNXdUdmJLWE9ZenRBU3JFYVpLaE9BPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>16）“凭君莫话封侯事”“一片冰心在玉壶”（These two sentences both comes from Chinese ancient poems,but not the poem. It is just a joke to put them together in the book)</p>
<p>Please don’t mention any more about the appointment</p>
<p>My bright heart, like ice in a jade kettle, is crystal clear and flawless</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNENLYlJEQTFoWFo3Qk9BZnEyWVpvQVliMkxhNkx3MkpTTnNwRDN2TVZ4MG1BPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>17)烈火浮于海上，忠魂粉身碎骨。</p>
<p>The fire floating on the sea, and the loyal soul shattered. </p>
<p> <img src="http://imglf6.nosdn0.126.net/img/b2llRE03RXovNENrUy9Ba3hJT2hjdHN1Lzd1MzJXZ3VJS3dZYVZGVitWRnE1cTlZenRPcEp3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>18) 那目光专注级了，微微映着一点浅浅的雪光，好像要将他整个人装在眼里。</p>
<p>The eyes were concentrated, reflecting beams of light from snow, and it seemed to hold him in the eyes.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEN3ekdlYk85MUkvSlg4anRGeXFBTCsvcnpTaWIydWlWUW84NlVIQVJsRExnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>19) 要不是弥足深陷，怎么配算是走火入魔。</p>
<p>If he wasn’t so deep, how could he be so crazy. </p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf4.nosdn0.126.net/img/b2llRE03RXovNEM0VG1BUmovd2lFeDJoNkVIV0x2SDFhanlPck9adVVCQmRZbUNyUEU5RDFBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p>20）无情可以为慰藉，有情却是魔障。</p>
<p>Heartless can be a comfort, but love is a demon.</p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf6.nosdn0.126.net/img/b2llRE03RXovNEE1a1FFLzZyWWNSMFYrbnc2WFZyc2Z1SFkvTmN6bFlNSXlYOTk2OHVQazFRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p>21）心有一隅，房子大的烦恼就只能挤在一隅中，心有四方天地，山大的烦恼也不过是沧海一粟。</p>
<p>If the heart has only a corner, the troubles as big as houses can only be crowded in a corner; if the heart includes the whole world, troubles as big as the mountains are just drops in the ocean.</p>
<h2 id="2-《镇魂》"><a href="#2-《镇魂》" class="headerlink" title="2.《镇魂》"></a>2.《镇魂》</h2><img src="https://s1.ax1x.com/2020/04/08/GWZU7n.png" alt="GWZU7n.png"  />

<p>1）镇生者之心，安亡者之魂。</p>
<p>Pacificate the heart of the living, pacify the soul of the dead.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWmByF.png" alt="GWmByF.png"></p>
<p>2）我连魂魄都是黑的，唯独心尖上一点点，血还是红的。用它护你我愿意。</p>
<p>My soul is black, only my heart is red. I’ll protect you with it.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWQCuT.png" alt="GWQCuT.png"></p>
<p>3）生不由己，不如不生。</p>
<p>Better not to be born than not to live as I wish.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWlJwF.png" alt="GWlJwF.png"></p>
<p>4）世界上有一种人，不是那种你怎么看怎么好，怎么闭月羞花，怎么非卿不可、就想从此君王不早朝了，而是你觉得，要是你对不起他，你自己简直就不是东西。</p>
<p>There is a kind of people in the world, not that you see how good, how pretty, how you must get,and the king doesn’t govern, but you feel, if you do wrong to him, you are absolutely not a person.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEF5S2thRjZ2d0RSMzdLR3MyVURpT2JhQXF0M3JSZzJvRU5kSXJUaUFkSWR3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>5）我富有天下名山大川，想起来也没什么稀奇的，不过就是一堆烂石头野河水，浑身上下，大概也就只有这几分真心能上秤卖上两斤，你要?拿去。</p>
<p>I own the world’s famous mountains and rivers, nothing unusual, they are just a pile of rotten stone and wild water, all over my body, probably only a few pieces of genuineness can be weighed and sold for two jin, do you want? Take it.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNERVWk1qY0tMZ3d2dmJ5NkJaVmp1Ym9TVnZuSHRwemRmbG5UdTRkdGNvc0xRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>6)九幽听令 以血为誓 以冷铁为证 借尔三千阴兵 天地人神 皆可杀 (It is an incantation in the book)</p>
<p>Hell, listen to the command, use blood as oath, use cold iron as evidence, borrow your three thousand soldiers, heaven, earth, god and people, all can be killed！</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNENLYlJEQTFoWFo3SDdodWhidzE2T0N2MDc3dEpDTUwraEFVcS9hTW5sVGxRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>7)人心存污，常忧思而多苦，固怒而生怨，尽可为不可为之事，唯不作恶三字，乃天下大善，可济世镇魂者，无他耳。</p>
<p>People’s heart is dirty, frequent worrying causes more bitter, anger causes resentment. Among all that can be done and can not be done, only no evil things three words, is the world’s great kindness. It can also save the world and appease the soul.</p>
<p> <img src="http://imglf6.nosdn0.126.net/img/b2llRE03RXovNEIvSy81RjVRcmw3cEZ5UGU0QndRT0xTNEVoZzNQOTgrd1BPOVIxbHQvV2tRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>8) 他并不知道对方用的是哪一款，哪一种香，第一次闻见，那味道却仿佛已经叫他魂牵梦萦了很多年。</p>
<p>He did not know which kind of fragrance the other one was using, which kind of incense. When the first time smelling, the taste seems to have made him miss for many years.</p>
<p> <img src="http://imglf6.nosdn0.126.net/img/b2llRE03RXovNENrUy9Ba3hJT2hjcWJicXk2Zng5TC93dzRPM1NwbUREbjBTSkNONGgxamJ3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>9) 谎言就是谎言，草率地背上，就一辈子也卸不下来。</p>
<p>A lie is a lie, if carelessly carrying, and you will never be unloaded.</p>
<h2 id="3-《六爻》"><a href="#3-《六爻》" class="headerlink" title="3.《六爻》"></a>3.《六爻》</h2><p><img src="https://s1.ax1x.com/2020/04/08/GWeiHs.png" alt="GWeiHs.png"></p>
<p>1）仿佛甜只有一瞬间，苦却苦了很多年</p>
<p>As if the sweet only lasted for a moment, but bitter for years</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWmv6S.png" alt="GWmv6S.png"></p>
<p>2）千丈深渊，未及心上一捧桃花潭。</p>
<p>Extreme abyss ，not to the treasure in my mind.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWQ85d.png" alt="GWQ85d.png"></p>
<p>3）除了顶天立地，唐真人真的一无是处了。</p>
<p>In addition to indomitable, Tang is really good for nothing.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GW3vZT.png" alt="GW3vZT.png"></p>
<p>4）千丈深渊，未及心上一捧桃花潭。</p>
<p>Extreme abyss ，not to the treature in my mind.</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEFtVzhRSzZRNEY1MVB5SjZUeCszYUk1b3FOWVh3MDhsWG9ydW9HSU5hQTVBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>5）外有天大地大，我独身陷囹圄。</p>
<p>There is a big world outside, while I’m in jail alone.</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEF0WHc5UVpaUENlK0ViMU1ETWErU3o1RWRpVjQ4VXkxbENEU1VXRndTbkhnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>6）这样浮光掠影地想一想，便觉千头万绪，摸不着头脑，未曾怦然，便已经心动。</p>
<p>Thinking about it in a superficial way, he felt like having a thousand thoughts, hard to fathom. He found that he hadn’t experienced heartfelt moment, he has already moved.</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEE3MCtiUSswczdMWnErMlB1UERHWW52K0g0NEdGUVA0anN4SG0zekZlS01nPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>7）哪里有七情六欲，哪里就有水深火热。</p>
<p>Where there are the appentency and the lust, there is the great misery. </p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNENZQ1lGTkh2eG1LanMveDdWT2I1N2J2b0t2bVNaSnYzZFErcC8vQ0ZtNzhnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>8)天道无常，机关怎能由得人算尽?</p>
<p>Natural law is impermanent, how can it be predicted by people?</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEIyK0ExWno0TVMvUWtUVHludWNVbitIdm5WeU43OWZOeHYwcnE2cUNULzdBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>9)我不知道怎么待你才算好，但无论如何，绝不负你。</p>
<p>I don’t know how to be nice to you, but I’ll live up to you no matter what happens.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEI5QUpoTmJiMWFuc21hWFNoMG9QbDN2SC8yWGkxVDJ1NVZibGY3eVV4NGxRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>10)仲夏夜里蝉声四起，越发显得四下安宁，唯有夜空上一把银河如练，掬一捧光华万点，皎皎万岁春秋。寒来暑往，枯荣明灭。</p>
<p>In midsummer night, cicadas sound everywhere, it appears more and more peaceful. Only the Milky Way on the night sky looks like white silk, holding light with million points and the bright long living spring and autumn. As the winter and summer go, they thrive and die. </p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEFXeDE5dGtqS0VRQXdxZ1QwRXFxclQvZlVqL1UxMjZWVnJuK2RDQkZUV3R3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNEFXeDE5dGtqS0VRSW50QUxzUGtvKzZWcGlheGowaTl5dmNjcFRCbU94NFN3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>11）可惜程潜没长那根风流骨，他左手抱着满腔的真情实意，右手举着纸上谈兵的风花雪月，中间戳成了一根顶天立地的木头桩子。</p>
<p>Unfortunately, Cheng qian did not have that romantic character, holding the full of true feelings in his left hand, holding the illusion of romance in his right hand; in the middle, a wooden stick is there.</p>
<p> <img src="http://imglf6.nosdn0.126.net/img/b2llRE03RXovNEF5S2thRjZ2d0RSeklqQ3RwZjV4eE5LVDNlMmdSZmJaSjMzN0hsYXVUTHNnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>12）只要不瞎，谁站在远处都看得见绵绵河山壮阔，可是身在山中，谁又能在云雾深处找到自己身在何方?</p>
<p>As long as not blind, everyone can see the continuous magnificent rivers and mountains from distance. But when in the mountains, who can find himself in the depths of the clouds?</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEIvSy81RjVRcmw3dGcyQi9YK09adWl1OXVNelhkbUJlckwvbWlENlJYK1NnPT0.null?imageView&thumbnail=500x0&quality=96&stripmeta=0&type=jpg%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>12) 程潜从不曾苛责他这个掌门师兄任何事，他的态度从一而终——你行你就上，你不行我粉身碎骨也替你上。</p>
<p>Cheng qian never criticized his senior for anything, his attitude from one to the last - if you can, you do; If you can’t, I’ll do it for you, despite smashing up.</p>
<h2 id="4-《山河表里》"><a href="#4-《山河表里》" class="headerlink" title="4.《山河表里》"></a>4.《山河表里》</h2><p><img src="https://s1.ax1x.com/2020/04/08/GWe1ER.png" alt="GWe1ER.png"></p>
<p>1）火光冲天，他披着一身血淋淋的皮肉，六根不净。</p>
<p>Fire blazing, he was covered with bloody flesh, full of annoyance.</p>
<h2 id="5-《残次品》"><a href="#5-《残次品》" class="headerlink" title="5.《残次品》"></a>5.《残次品》</h2><p><img src="https://s1.ax1x.com/2020/04/08/GWeTP0.png" alt="GWeTP0.png"></p>
<p>1）人们起源于信仰，毁于信仰，人们在信仰的灰烬里重生。</p>
<p>People are born from faith, destroyed by faith, and reborn from the ashes of faith.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWmPxO.png" alt="GWmPxO.png"></p>
<p>2）晨光起于白塔尖顶，终将铺满阴霾之地。</p>
<p>The morning light rises from the spire of the white tower, and will eventually cover the land of shadows.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWn590.png" alt="GWn590.png"></p>
<p>3）</p>
<p>假如我们在宇宙中粉身碎骨</p>
<p>残骸将漂泊于永夜</p>
<p>有朝一日在碰撞中湮灭</p>
<p>成为星星的一部分</p>
<p>而灵魂将重回故里</p>
<p>回到你出发的地方</p>
<p>你誓死守卫的地方</p>
<p>——自由宣言万岁！</p>
<p>Suppose we were blown to pieces in the universe</p>
<p>The wreckage will drift through the night</p>
<p>One day annihilate in a collision</p>
<p>Become part of the stars</p>
<p>And the soul will return home</p>
<p>Go back to where you started</p>
<p>The place you’ve sworn to defend</p>
<p>Long live the declaration of freedom!</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWQvZD.png" alt="GWQvZD.png"></p>
<p>4）因为铁石心肠，所以无坚不摧。</p>
<p>Nothing can break the heart of stone.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWlywD.png" alt="GWlywD.png"></p>
<p>5）</p>
<p>我带着深藏骨血的仇恨与酝酿多年的阴谋</p>
<p>把自己变成一个死而复生的幽灵</p>
<p>沉入沼泽，沉入深渊</p>
<p>我想埋下腐烂的根系</p>
<p>长出见血封喉的荆棘</p>
<p>刺穿这个虚伪的文明</p>
<p>我到了淤泥深处……</p>
<p>捡到了一颗星星。</p>
<p>I have a deep hatred and a plot that has been brewing for years</p>
<p>Turn myself into a ghost from the death</p>
<p>Sinking into the swamp, sinking into the abyss</p>
<p>I want to bury the rotten roots</p>
<p>and brambles with blood in their throats</p>
<p>Pierce this false civilization</p>
<p>I went deep into the mud…</p>
<p>Picked up a star.</p>
<p><strong>（Someone said it was better to use ‘In the bottom of the muck,I found my lucida. ‘ in the last sentence)</strong></p>
<p><img src="https://s1.ax1x.com/2020/04/08/GW3CKP.png" alt="GW3CKP.png"></p>
<p>6）头顶星空的人，即使趋利，也趋得有底线，而梦想和尊严是不能用钱践踏的。</p>
<p>穷途末路的梦想和尊严也是。</p>
<p>The person who sustains starry sky, despite hastening profit, it has a bottom line, while the dream and dignity cannot be trampled by money.</p>
<p>So do dead-end dreams and dignity.</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEFtVzhRSzZRNEY1MVdRRVZGTTRNcS9oN09mK0N4Sk9kY1J2L3RoVGEvQVRRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>7）不是每一次出走，都还能再回去的。</p>
<p>Not every time you run away, you can go back.</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEF0WHc5UVpaUENlL1dmM0FWT1RLR3pZeTAzR0k5c3VBZVliMDNkSWJ3R093PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>8）人的一生本来就是一场有来无回的冒险。</p>
<p>Life is an adventure with no return.</p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNEE3MCtiUSswczdMVVhnTDk0dkdhQ28rbjA4T2NrKzA1cWpUTjhSUUh6V0lRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>9）“比金钱更珍贵是知识，比知识更珍贵的是无休止的好奇心，而比好奇心更珍贵的，是我们头上的星空。”</p>
<p>“The one that is more precious than money is knowledge. The one that is more precious than knowledge is endless curiosity. And the one that is more precious than curiosity is the starry sky above us.”</p>
<p> <img src="http://imglf6.nosdn0.126.net/img/b2llRE03RXovNENZQ1lGTkh2eG1Lb1p4R2ZlSzZTekprR1NyTm8wMy8yYzF0enBTQjZNUGVnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>10)自由联盟军之歌：(a song)</p>
<p>我们来自海角，封闭沉默的群山，</p>
<p>We come from the promontory, from the silent hills,</p>
<p>在星光抛弃的荒原，点起呼唤自由的烽烟。</p>
<p>In the wasteland abandoned by the starlight, we ligh the beacon smoke to call for freedom.</p>
<p>听见狂风在咆哮，血在烧——</p>
<p>Hearing the wind roar and the blood burn</p>
<p>脚步在跃迁，旗在倒——</p>
<p>The feet are leaping, the flag is falling</p>
<p>啊，朋友，跟我们走吧，脱下镣铐，扬起风帆。</p>
<p>Oh friend, come with us, cast off your irons, and set sail.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEIyK0ExWno0TVMvZFRkMzM0UWJVblZJVnRMY0pucTlMRHNKSFczaGpua2lRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>11)坏事总会发生——墨菲定律。既然风浪总会来临，与其做听天由命的沙堡，不如亲自站在风口浪尖上。</p>
<p>Bad things always happen – Murphy’s law. Since the wind and waves will always come, it is better to stand on the top of the waves than to be a resigned sandcastle.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEI5QUpoTmJiMWFubG5jaXFXMVRlOW9LMHpPcE9VWXpBeWpSUHlsczBBNzBnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>12）每一段伟大的路上最初都布满荆棘，每一个先贤都曾被视为移山的愚公，古谚有云“只有通往地狱的路，才铺满善意的鲜花”，困境难道不是抵达梦想的必由之路吗？</p>
<p>Each section of the great road is at first full of thorns, each sage has been regarded as the “fool” who wants to move the mountain. As the old saying goes, “only the road to hell is paved with flowers of kindness.” Isn’t adversity the only way to reach your dreams?</p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNEFXeDE5dGtqS0VRQlpmN1cwNUYycHN5ODd4STdyODBYcXh0UkM4T3AzdFlRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>13）任何东西都有两面性，谁能让你幸福，谁就能让你迷失。</p>
<p>Everything has two sides, who can make you happy can make you lost.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEF5S2thRjZ2d0RSK01FenJXMkdaSTZLalFiVENHWDBOVDA0MVZBQldXNWl3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>14）你不能因为他们疯子多，声音大，就认为他们是正常的。</p>
<p>You can’t assume that crazy people are normal just because they’re crowded and loud.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNERVWk1qY0tMZ3d2azd5bCtBM2ZWSTQxU3VqMTdoUHFaSGNWWnpkODRZbEdnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>15)假如像古代神话里那样天降洪水，所有人都奔跑逃命，我愿意做那个逆着人潮而上，第一个被洪水淹没的人。</p>
<p>If, as in ancient mythology, there were a flood and everyone was running for their lives, I would be the first one to be drowned against the tide.</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNENLYlJEQTFoWFo3Q1dmWTdFSVNBNm9HZklaM2s3d1pKekJJOXdDUW1SZDJnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>16）人一生中，总有那么一段日子，是每天盼望天亮的。</p>
<p>In life, there is always a period of time, that we look forward to the dawn every day.</p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNEIvSy81RjVRcmw3a1QzbVdadlgwVnczSEZSNEkzOHJxQTN0UlI2QWtqdlNRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>17) “喜欢一朵花，不见得非得看见花开，喜欢一个人，不见得非得有结果，追求爱与美的过程怎么能叫无用功呢？这本身就是一个非常美好的过程，你不觉得吗？”</p>
<p>“If you like a flower, you do not have to see its blossom. If you like a person, you do not have to have a result. How can the pursuit of love and beauty be called futile？It’s a beautiful process in itself, don’t you think so?”</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNENrUy9Ba3hJT2hjbDdsSnU3YWRDYjRnYVYrWGZsUzdEc0V5UUlmQW0vdTVBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>18) “我就是人性，”林静姝说，“什么是人性？人性就是饿了要吃，渴了要喝，别人对你好，记住他，回报他，别人践踏你，不惜一切也要报复回去——”</p>
<p>“I am human nature,” said Lin Jingshu. “what is human nature? Human nature is eating when you are hungry and drinking when you are thirsty. If people are good to you, remember them, pay back to them. If they trample on you, do anything to avenge–”</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEN3ekdlYk85MUkvQ1V3UStLUm5qRmx5enozUXVFeWVwdXpacXFBQVM0aFdBPT0.jpg?imageView&thumbnail=500x0&quality=96&stripmeta=0&type=jpg%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>19) 又或许，世界上每一个命运的转折，都伴随着冥冥中这一点运气。</p>
<p>Or maybe every twist of fate in the world is accompanied by a bit of luck.</p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf4.nosdn0.126.net/img/b2llRE03RXovNERCcVh1SUtkcXVGNEVFWklWREh2VGRTb2x5ejZ4TnBSNjRCOE5uTDRpMmh3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p>20）现实是冷酷的，能在这种冷酷中岿然不动的人，需要比现实更加冷酷。</p>
<p>The reality is cruel. People who can stand in this kind of ruthlessness, needs to be more cruel than the reality.</p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf4.nosdn0.126.net/img/b2llRE03RXovNEM0VG1BUmovd2lFME9UOGU1c3lMWkRpTnA3b2NTTG1FTGJQc3ZjWjBNaGVnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p>21）事实就是事实，时间与空间会弯曲，但是人的一生终归是单行线。 已经发生的事，没有什么能改变。</p>
<p>The facts are facts; time and space will be curved, but a person’s life is a one-way trip. Nothing can change what has happened.</p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf6.nosdn0.126.net/img/b2llRE03RXovNEE1a1FFLzZyWWNSNGJTL0xEc1A4dzM5c3ExZjJQdHRHNlMwOEI1THcyZnlRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p>22）人人都喜欢置身事外、少找麻烦，谁不知道闲云野鹤的日子舒服？可是你既然活得比别人舒服，将来死得比较快、下场比较惨，不也很公平么？你想岁月静好就静好，你算老几？</p>
<p>Everyone likes to stay out of trouble and make little trouble. Everyone does know how comfortable life is for idle people. But since you live more comfortably than others, isn’t it fair that you will die sooner and suffer a worse fate? You can get the idle life you want if you want, who do you think you are?</p>
<h2 id="6-《默读》"><a href="#6-《默读》" class="headerlink" title="6.《默读》"></a>6.《默读》</h2><p><img src="https://s1.ax1x.com/2020/04/08/GWezI1.png" alt="GWezI1.png"></p>
<p>1）我不是凝视深渊的人，我就是深渊。</p>
<p>I’m not the one to gaze at the abssy，I’m the abassy.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWnD9P.png" alt="GWnD9P.png"></p>
<p>2）未经允许，擅自特别喜欢你，实在不好意思。</p>
<p>Without your promision, loving you so much, that was my fault.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWnXNR.png" alt="GWnXNR.png"></p>
<p>3）我心底，有一簇迎着烈日而生的花，</p>
<p>比一切美酒都要芬芳，</p>
<p>滚烫的馨香没过稻草人的胸膛，</p>
<p>草扎的精神，</p>
<p>从此万寿无疆。</p>
<p>In my heart, there is a cluster of flowers facing the sun, </p>
<p>more fragrant than all the wine,</p>
<p> the fragrance of the scarecrow’s chest, </p>
<p>the spirit of the grass, </p>
<p>from now on, forever.</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWlPzt.png" alt="GWlPzt.png"></p>
<p>4）徘徊的人啊，找到你失去的夜明珠了吗?</p>
<p>Wandering people, have you found your lost pearl?</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GW3854.png" alt="GW3854.png"></p>
<p>5）没有了…怪物都清理干净了…我是最后一个…你可不可以…把我关在你家里…《默读》</p>
<p>None… The monsters are all cleaned up… I was the last one… Would you mind… Lock me up in your house…</p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNEFtVzhRSzZRNEY1d1dISS96UGxzU3dXWHBvQnNYN2puUHdmUVE5ZHlYN1R3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>6）愿你和旁边的说话不用解释半天，愿你身旁有人愿意和你并肩同行。</p>
<p>Wish you talk with people around without explaining for a long time, wish someone is willing to walk with you.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEFXeDE5dGtqS0VRQjJuSThYNFJjd1hJdjljUFlRL1BjV0dZNThlcmx4OGRnPT0.jpg?imageView&thumbnail=500x0&quality=96&stripmeta=0&type=jpg" alt="img"> </p>
<p>7）“哥，我想要你。” 这本来只是一句信口而至的调情，可是在说出口的瞬间，却突然在费渡心里卷起了轩然大波，像茫茫雪原中惊破了冻土的不速春风，无中生有，席卷而至，巨大的回响在他肺腑中激荡，震颤不休。 就好像他不经意间吐出了一块带血的真心似的。</p>
<p>“Hey, bro, I want you.” This was just a casual flirtation, but in the moment of saying, suddenly Feidu’s heart rolled up a storm, like a frozen spring wind in the vast snow field, out of nothing, sweeping away, and huge reverberations vibrate in his heart, shaking endlessly. It was as if he had accidentally spat out a bloody piece of his love. </p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNERVWk1qY0tMZ3d2c29hOXk4d2pucDFTZy83UWtPb0Ntd3ZaQ25lUjJ1VlVRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>8)也许是把捂出脓的陈年旧伤重新挖开的缘故，或许痛苦，或许鲜血淋漓，但总有机会重新愈合。</p>
<p>Maybe it’s because the old wound was torn, maybe it was painful, maybe it was bloody, but there will always be a chance to heal.</p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNENLYlJEQTFoWFo3SkJ0ZlVmRFpxSUxjT0U0WDlyelhNWm1lZFN3bjU2eHhRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>9)当年那倔强，清澈至于有些偏执的目光，一丝痕迹都不剩了。 它们好像只存在骆闻舟心里，是他自作多情的一个幻觉。</p>
<p>That stubborn and clear to even some paranoid eyes, trace is not left. They seem to exist only in Luo Wenzhou’s mind, they seem to be an illusion of his love.</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNENrUy9Ba3hJT2hjaWpOZnczK3BkcTdmRFdTYjdrZEFyZE5VN1FMamhNZGp3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>10) 没有了那些乱七八糟的纹身贴遮挡，他的胸口单薄而白皙，几乎还带着一点诱人的少年感。 那么浅的胸口，那么深的心。</p>
<p>Without tattoo patches, his chest was thin and white, almost seductively boyish, free of the tattered patches. So shallow the chest, so deep the heart.</p>
<h2 id="7-《逆旅归来》"><a href="#7-《逆旅归来》" class="headerlink" title="7.《逆旅归来》"></a>7.《逆旅归来》</h2><p><img src="https://s1.ax1x.com/2020/04/08/GWuE4I.png" alt="GWuE4I.png"></p>
<p>1）（a poem）</p>
<p>秦淮月 霸陵雪 千秋万古一双人</p>
<p>一代容颜 高楼梦断 一时间</p>
<p>百年离恨 星移斗转了无痕</p>
<p>只教你 来时众众 去时独独</p>
<p>Qinhuai’s moon, Baling’s snow, thousands of year one couple</p>
<p>A generation of appearance, high- rise dream break, in a period of time</p>
<p>A hundred years of hate, stars change without trail</p>
<p>Make you to come together but go alone</p>
<p> <img src="http://imglf6.nosdn0.126.net/img/b2llRE03RXovNEE3MCtiUSswczdMYkFHOFJBaTVsMmFxNmVJUGlwb3NkTTI5T2NXa0R1NVFRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>2）是不是没有希望，也就不知道什么叫失望——这个世界就是这么荒谬，只有尝过糖的人，才明白什么叫苦。</p>
<p>Is it true that if there is no hope, there will be no disappointment? The world is so ridiculous! Only those who have tasted the sweet understand the bitter. </p>
<h2 id="8-《锦瑟》"><a href="#8-《锦瑟》" class="headerlink" title="8.《锦瑟》"></a>8.《锦瑟》</h2><p><img src="https://s1.ax1x.com/2020/04/08/GWMV6f.png" alt="GWMV6f.png"></p>
<p>1）（a poem）</p>
<p>去时全盛红颜子，归时半百白头翁，</p>
<p>纵然乡音未改，故乡和归人，</p>
<p>却都已经面目全非，几乎落得两两不识。</p>
<p>When you go, the flourishing beauty ,</p>
<p>when you back, half hundred old man, </p>
<p>even if the accent has not changed, hometown and homecoming, </p>
<p>have been beyond recognition.</p>
<h2 id="9-《有匪》"><a href="#9-《有匪》" class="headerlink" title="9.《有匪》"></a>9.《有匪》</h2><p><img src="https://s1.ax1x.com/2020/04/08/GWMr1x.png" alt="GWMr1x.png"></p>
<p>1）阿翡，鬼神在六合之外，人世间行走的都是凡人，为何你不敢相信自己手中这把刀能无坚不摧?</p>
<p>Fei，the ghost is outside the boundary, only mortal walk in the world, </p>
<p>why you can’t believe the knife in your hand  able to be indestructible?</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEFtOE5tRElYdmJ4OGQ1U00zbWU2ZHE1NUk4NGEyUEFHN0xhaHlJR2pPZFd3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>2）乱世里本就没有王法，如果道义也黯然失声，那么其中苟且偷生的人们，还有什么可期盼的呢?</p>
<p>In troubled times, there is no law. If the moral also lost its voice, what the people who struggle to survive can expecte?</p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNERVWk1qY0tMZ3d2Z1hJUUx5TWh3VDVFUFRGaURZRTJWa0J2eTB2OWQvMm1nPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>3)布衣荆钗盖不住倾城国色，吃斋念佛也藏不住野心昭昭。怎么总有人觉得自己能瞒天过海?</p>
<p>Rough clothes and wooden hairpins could not conceal beauty, nor could vegetarianism and buddhist prayer conceal ambition. Why do some people always think they can cheat?</p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNEIvSy81RjVRcmw3czFFWklUTDRMd2poSDNLOGRxRldvU1dyU2tRdWVzRzJnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>4) 但举世尘埃飞舞，他这一颗却行将落定</p>
<p>But as the dust of the world flutters, he is about to settle. </p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNEN3ekdlYk85MUkvSHZlRldYVnRZTytEQlBaT2kxM0FHdzd1dndkbk02M3lnPT0.jpg?imageView&thumbnail=500x0&quality=96&stripmeta=0&type=jpg%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>5) 那些倍感束缚的家，总有一天再也回不去。</p>
<p>One day, we will be forever unable to go back to those restrainted homes.</p>
<h2 id="10-《七爷》"><a href="#10-《七爷》" class="headerlink" title="10.《七爷》"></a>10.《七爷》</h2><p><img src="https://s1.ax1x.com/2020/04/08/GWQ6Gn.png" alt="GWQ6Gn.png"></p>
<p>1）彼岸花开了一路，血似的。忘川水静静地淌过，三千年往东，三千年往西。</p>
<p>Equinox Flower opened all the way, like blood. Wangchuan river quietly flowing, three thousand years to the east, three thousand years to the west.</p>
<h2 id="11-《坏道》"><a href="#11-《坏道》" class="headerlink" title="11.《坏道》"></a>11.《坏道》</h2><p><img src="https://s1.ax1x.com/2020/04/08/GW1ApR.png" alt="GW1ApR.png"></p>
<p>1）不得不说，其实有的时候，演戏真的是一种天份。</p>
<p>I have to say, sometimes acting is really a gift.</p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNEFtVzhRSzZRNEY1M2hlWkJHYzl4Y3d4d1lxeExVSEZ0bUxaaEVqOGlzTG1RPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>2）有时候地狱是存在的，就在人的心里，终生相随，萦绕不去，不死不休。</p>
<p>Sometimes the hell exists, in the heart of the people, with the whole lifetime, haunted, never dying for ever more.</p>
<h2 id="12-《大哥》"><a href="#12-《大哥》" class="headerlink" title="12.《大哥》"></a>12.《大哥》</h2><p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEF0WHc5UVpaUENlN1NZSjdtU1pyQjhLZU9aRGliYkJIT0lpdUIyZDB5YXhnPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>1）这小少年的心就像一片海，表面上平静无波，似乎总是理性而宁静的，内里却蕴含了巨大的叛逆和此起彼伏的躁动，长期平衡在一个危险的、一触即发的临界点上。</p>
<p>The little boy’s heart is like a sea, calm and waveless on the surface, always seems to be rational and quiet. But it contains a great rebellion and restlessness. In long term, it balances in a dangerous brink of the point.</p>
<p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEIyK0ExWno0TVMvZko3eGdNM09IMEJjR1pMZFkzVUh4cXI5bmhldTJPTnF3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>2)可是一个人真会为了另一个人神魂颠倒吗?</p>
<p>But can one really fall head over heels for another?</p>
<p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNEFXeDE5dGtqS0VRQTRnbmhGelc3ZWhqdUhERWtpd3p1N2VsTHEwUWVYVXJRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>3）有时候那些看似奇迹的命运，要是刨根问底，竟然也会是人为。</p>
<p>Sometimes those seemingly miraculous destinies, if questioned, will be artificial.</p>
<h2 id="13-《天涯客》"><a href="#13-《天涯客》" class="headerlink" title="13.《天涯客》"></a>13.《天涯客》</h2><p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEFtOE5tRElYdmJ4N3JlbUxvY1RjVlRvVnNMM0pZbytZVGFUMHFhQkZWVFJBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>1）江湖么，走到哪都有是非，朝堂是个名利场，江湖便是个是非场，有人总想不明白这件事，好像仗剑骑马走天涯是件多了不得的事似的，临死都念叨着。</p>
<p>Jianghu is a place that wherever you go, there are disputes. The dynasty hall is a fame and fortune fair, jianghu is a dispute field. Someone always can’t understand this matter, as if riding a horse with sword throughout the world is a matter of more than a lot, reciting even when dying.</p>
<p>*<em>为了看看“江湖”咋翻搜了好久，结果看到翻金庸小说里面的直接翻成“jianghu”。因为其实英语里没有特别合适的词，就留给读者自己想象去吧，毕竟不同的人心中有不一样的江湖。 *</em></p>
<p><strong>‘Jianghu’ isn’t a easy word to be translated, there isn’t a corresponding worf in English(silmilar to the whole world). I searched and found that, in Jinyong’s(a famous Chinese writer) books translation, it is just called  ‘Jianghu’. Everyone has their own thought of Jianghu, so we can leave the word to themselves to imagine.</strong></p>
<h2 id="14-《过门》"><a href="#14-《过门》" class="headerlink" title="14.《过门》"></a>14.《过门》</h2><p> <img src="http://imglf5.nosdn0.126.net/img/b2llRE03RXovNEI5QUpoTmJiMWFubDdXMkxRZzUzMlFtRmN4eWJpQzdJVnNJckV2aGR1UDdBPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0" alt="img"> </p>
<p>1）人很多痛苦，都来自于过多的怀念。如果对“过去”没有执念，懂得“过去就是过去了”的道理，就不太会畏惧生活会变得面目全非。</p>
<p>A lot of people’s pain is from too much memory of the past. If you don’t cling to the past and understand that the past is the past, you won’t be afraid that your life will change beyond recognition.</p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf4.nosdn0.126.net/img/b2llRE03RXovNERCcVh1SUtkcXVGMHk4UmprOFNpOTU0d0JWTFlDQlRTN2pKVUM4bThtT0J3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p>2）流走的光阴，逝去的生命，破碎的镜子，行将就木的爱情……都是无法挽回的，道歉不行，哭更不行。</p>
<p>Lost time, lost life, broken mirror, dying love… You can’t take it back. You can’t apologize. You can’t even cry.</p>
<h2 id="15-《烈火浇愁》"><a href="#15-《烈火浇愁》" class="headerlink" title="15.《烈火浇愁》"></a>15.《烈火浇愁》</h2><p> <img src="http://imglf3.nosdn0.126.net/img/b2llRE03RXovNENrUy9Ba3hJT2hjbk9vejlNKytpUmFrcUxYaFVOaWJ2QmJHRGVJZ3ZOUXFRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>1) 初相识，便刻骨铭心。 </p>
<p>First acquaintance made them remember forever.</p>
<p> <img src="http://imglf4.nosdn0.126.net/img/b2llRE03RXovNEN3ekdlYk85MUkvSHhOOW5qTHRoN2NiWFRJRVFaaGlJdDlGa3pNOCtUblNRPT0.jpg?imageView&thumbnail=500x0&quality=96&stripmeta=0&type=jpg%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"> </p>
<p>2) 原来史书上所有的一笔着会过，去象轻第有万千心机。</p>
<p>It turns out that the events in history, which are counted over, always have thousands of scheming.</p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf3.nosdn0.126.net/img/b2llRE03RXovNERCcVh1SUtkcXVGOC93UDJDcTdhVmRiRjRDNDNSY0pqcURSV0trMlNRRG53PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p>3）很多幽微的美感丧失殆尽，“暧昧”也成了贬义词。 </p>
<p>A lot of delicate aesthetic feeling is lost, “ambiguity” also became derogatory term.</p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf3.nosdn0.126.net/img/b2llRE03RXovNEM0VG1BUmovd2lFL0dVbkJOWjhXVG9pWlFMbVNBUkhZVzcycklvT3hLL1h3PT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p>4）原来史书上所有的一笔带过，都有万千心机。</p>
<p>It turns out that all the passing stories in the historic books has myriad scheming. </p>
<p><a href="https://www.lofter.com/blog/ganlezheipingjiajiu?act=dashboardclick_20130514_04#" target="_blank" rel="noopener"><img src="https://imglf4.nosdn0.126.net/img/b2llRE03RXovNEE1a1FFLzZyWWNSMG5yWC84bm5MUm1UOG1MT0R2MHVsS3ZrNXVEb25FdStRPT0.png?imageView&thumbnail=500x0&quality=96&stripmeta=0%7Cwatermark&type=2&text=wqkg5bmy5LqG6L-Z55O25YGH6YWSIC8gZ2FubGV6aGVpcGluZ2ppYWppdS5sb2Z0ZXIuY29t&font=bXN5aA==&gravity=southwest&dissolve=30&fontsize=240&dx=8&dy=10&stripmeta=0" alt="img"></a></p>
<p>5）千丈红尘下，众生皆苦。</p>
<p>Among infinity under the world, all living beings are suffering. </p>
<h2 id="MY-THOUGHT"><a href="#MY-THOUGHT" class="headerlink" title="MY THOUGHT"></a>MY THOUGHT</h2><p><strong>1.Someone said it was better to use ‘In the bottom of the muck,I found my lucida. ‘. I can learn from this.</strong></p>
<p><strong>2.‘Jianghu’ isn’t a easy word to be translated, there isn’t a corresponding worf in English(silmilar to the whole world). I searched and found that, in Jinyong’s(a famous Chinese writer) books translation, it is just called  ‘Jianghu’. Everyone has their own thought of Jianghu, so we can leave the word to themselves to imagine.</strong></p>
<p><strong>3.Despite the new vocabulary I can learn during this time, the sentences can really tell some truth.</strong></p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>-translation</tag>
      </tags>
  </entry>
  <entry>
    <title>guess numbers</title>
    <url>/2020/06/07/guess-numbers/</url>
    <content><![CDATA[<h1 id="guess-numbers-game"><a href="#guess-numbers-game" class="headerlink" title="guess numbers game"></a>guess numbers game</h1><p>The computer will choose 4 numbers randomly and in a random order. You can input to guess the numbers and the order.</p>
<p>If your numbers/number are/is included but not the same order, you will get “o”; if your numbers/number are/is the same order as the original one, you will get “△”‘</p>
<p>Computer will record the times you guess.</p>
<p>If you want to stop and know the answer, please input “0000”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#instruction</span></span><br><span class="line">print(<span class="string">'The computer will choose 4 numbers randomly and in a random order. You can input to guess the numbers and the order.'</span></span><br><span class="line">      <span class="string">'If your numbers/number are/is included but not the same order, you will get "o"; if your numbers/number are/is the same order as the original one, you will get "△"'</span></span><br><span class="line">     <span class="string">'Computer will record the times you guess.'</span></span><br><span class="line">     <span class="string">'If you want to stop and know the answer, please input "0000"'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#create the number</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">a=str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">b=str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line"><span class="keyword">while</span> a==b:</span><br><span class="line">    b=str(random.randint(<span class="number">0</span>,<span class="number">9</span>)) <span class="comment">#if the numbers are the same, change the number</span></span><br><span class="line">    </span><br><span class="line">c=str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line"><span class="keyword">while</span> a==c <span class="keyword">or</span> b==c:</span><br><span class="line">    c=str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    d=str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line">    <span class="keyword">if</span>  a!=d <span class="keyword">and</span> b!=d <span class="keyword">and</span> c!=d:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">#input the guessing number and start to record the times</span></span><br><span class="line">number=list(input())</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#check whether the numbers are in or have the same order</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> number[<span class="number">0</span>] == <span class="string">'0'</span> <span class="keyword">and</span> number[<span class="number">1</span>] == <span class="string">'0'</span> <span class="keyword">and</span> number[<span class="number">2</span>] == <span class="string">'0'</span> <span class="keyword">and</span> number[<span class="number">3</span>] == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> a == number[<span class="number">0</span>] <span class="keyword">and</span> b == number[<span class="number">1</span>] <span class="keyword">and</span> c == number[<span class="number">2</span>] <span class="keyword">and</span> d == number[<span class="number">3</span>]:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    triangle=<span class="number">0</span></span><br><span class="line">    circle=<span class="number">0</span>      <span class="comment">#if it is right, jump out of the loop</span></span><br><span class="line">    <span class="keyword">if</span> a <span class="keyword">in</span> number:</span><br><span class="line">        <span class="keyword">if</span> a == number[<span class="number">0</span>]:</span><br><span class="line">            triangle=triangle+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            circle=circle+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> b <span class="keyword">in</span> number:</span><br><span class="line">        <span class="keyword">if</span> b == number[<span class="number">1</span>]:</span><br><span class="line">            triangle=triangle+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            circle=circle+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">in</span> number:</span><br><span class="line">        <span class="keyword">if</span> c == number[<span class="number">2</span>]:</span><br><span class="line">            triangle=triangle+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            circle=circle+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> d <span class="keyword">in</span> number:</span><br><span class="line">        <span class="keyword">if</span> d == number[<span class="number">3</span>]:</span><br><span class="line">            triangle=triangle+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            circle=circle+<span class="number">1</span></span><br><span class="line">    <span class="comment">#show the result and allow the user to input again        </span></span><br><span class="line">    print(<span class="string">'△：'</span>,triangle,<span class="string">'o：'</span>,circle)</span><br><span class="line">    number=list(input())</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line"><span class="comment">#show the right one and the times used</span></span><br><span class="line"><span class="keyword">if</span> number[<span class="number">0</span>] == <span class="string">'0'</span> <span class="keyword">and</span> number[<span class="number">1</span>] == <span class="string">'0'</span> <span class="keyword">and</span> number[<span class="number">2</span>] == <span class="string">'0'</span> <span class="keyword">and</span> number[<span class="number">3</span>] == <span class="string">'0'</span>:</span><br><span class="line">    print(<span class="string">'sorry, it is'</span>,a,b,c,d,<span class="string">', you used'</span>,i,<span class="string">'times.'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'you are right, it is'</span>,a,b,c,d,<span class="string">', you used'</span>,i,<span class="string">'times.'</span>)</span><br></pre></td></tr></table></figure>

<p>example:</p>
<p>The computer will choose 4 numbers randomly and in a random order. You can input to guess the numbers and the order.If your numbers/number are/is included but not the same order, you will get “o”; if your numbers/number are/is the same order as the original one, you will get “△”Computer will record the times you guess.<br>1234<br>△： 0 o： 1<br>5678<br>△： 0 o： 3<br>6781<br>△： 0 o： 2<br>8762<br>△： 1 o： 2<br>2567<br>you are right, it is 2 5 6 7 , you used 5 times.</p>
]]></content>
      <categories>
        <category>daily programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib学习</title>
    <url>/2020/06/19/matplotlib%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>matplotlib   </p>
<p>‘.scatter()’  ,   ‘.text()’  ,  ‘savefig()’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.scatter(x, y,                              <span class="comment">#坐标</span></span><br><span class="line">           s=df_solar.moon_diameter_km/<span class="number">1.5</span>,   <span class="comment">#图形大小</span></span><br><span class="line">           facecolor=<span class="string">'w'</span>, edgecolor=<span class="string">'k'</span>, </span><br><span class="line">           marker=<span class="string">'o'</span>,                        <span class="comment">#形状                          </span></span><br><span class="line">           alpha=<span class="number">0.5</span>)                         <span class="comment">#透明度</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.text(x,y,                      <span class="comment">#坐标                       </span></span><br><span class="line">        <span class="string">'%s (%s)'</span> % (row.moon_name, row.planet_name[<span class="number">0</span>]), </span><br><span class="line">        ha=<span class="string">'center'</span>, va=<span class="string">'center'</span>) <span class="comment">#图形中位置</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.savefig(<span class="string">'x'</span>,                   <span class="comment">#文件名称</span></span><br><span class="line">        bbox_inches=<span class="string">'tight'</span>)     <span class="comment">#图片裁剪</span></span><br></pre></td></tr></table></figure>



<p>Seaborn：’sns.set()’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.set(context=<span class="string">'notebook'</span>,                      </span><br><span class="line">        style=<span class="string">'whitegrid'</span>,    <span class="comment">#背景风格</span></span><br><span class="line">        palette=sns.color_palette(<span class="string">'Paired'</span>, <span class="number">12</span>))</span><br><span class="line"><span class="comment">#context 代表风格</span></span><br><span class="line"><span class="comment">#font_scale 为字体大小</span></span><br><span class="line"><span class="comment">#lines.linewidth 指定了线宽</span></span><br><span class="line"><span class="comment">#color_palette()能传入任何Matplotlib所支持的颜色</span></span><br><span class="line"><span class="comment">#color_palette()不写参数则默认颜色</span></span><br><span class="line"><span class="comment">#set_palette()设置所有图的颜色</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.drop_duplicates() <span class="comment">#去除重复项</span></span><br></pre></td></tr></table></figure>



<p>sns.distplot</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.distplot(df.groupby([<span class="string">'YEAR'</span>, <span class="string">'MONTH'</span>]).sum().PRCP, </span><br><span class="line">             color=<span class="string">'b'</span>, bins=<span class="number">50</span>,   <span class="comment">#50个柱形</span></span><br><span class="line">             hist=<span class="literal">True</span>,            <span class="comment">#开启直方图</span></span><br><span class="line">             rug=<span class="literal">True</span>, kde=<span class="literal">True</span>)   <span class="comment">#开启细线，曲线</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>numpy2</title>
    <url>/2020/07/08/numpy2/</url>
    <content><![CDATA[<h1 id="NumPy-Introduction-2"><a href="#NumPy-Introduction-2" class="headerlink" title="NumPy Introduction 2"></a>NumPy Introduction 2</h1><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">np.random.seed(<span class="number">0</span>)  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_reciprocals</span><span class="params">(values)</span>:</span>  </span><br><span class="line">    output = np.empty(len(values))  <span class="comment">#set up a new array</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(len(values)):  </span><br><span class="line">		output[i] = <span class="number">1.0</span> / values[i]  <span class="comment">#put 1/value into it</span></span><br><span class="line">		<span class="keyword">return</span> output  </span><br><span class="line">values = np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=<span class="number">5</span>)  </span><br><span class="line">compute_reciprocals(values)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:array([ 0.16666667, 1. , 0.25 , 0.25 , 0.125 ])</span></span><br></pre></td></tr></table></figure>

<p><strong>A faster way</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">big_array = np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=<span class="number">1000000</span>)  </span><br><span class="line">%timeit compute_reciprocals(big_array)</span><br><span class="line"><span class="comment">#out:1 loop, best of 3: 2.91 s per loop</span></span><br></pre></td></tr></table></figure>

<p>prove:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(compute_reciprocals(values)) </span><br><span class="line">print(<span class="number">1.0</span> / values)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">[ 0.16666667 1. 0.25 0.25 0.125 ] </span></span><br><span class="line"><span class="string">[ 0.16666667 1. 0.25 0.25 0.125 ]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>*arange calculation</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">5</span>) / np.arange(<span class="number">1</span>, <span class="number">6</span>)  <span class="comment">#[0 1 2 3 4] [1 2 3 4 5]</span></span><br><span class="line"><span class="comment">#Out: array([ 0. , 0.5 , 0.66666667, 0.75 , 0.8 ])</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>))  </span><br><span class="line"><span class="number">2</span> ** x  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: array([[ 1, 2, 4], </span></span><br><span class="line"><span class="string">			[ 8, 16, 32],  </span></span><br><span class="line"><span class="string">			[ 64, 128, 256]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>add,subtract,multiply,divide</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">4</span>)  </span><br><span class="line">print(<span class="string">"x ="</span>, x)  </span><br><span class="line">print(<span class="string">"x + 5 ="</span>, x + <span class="number">5</span>)  </span><br><span class="line">print(<span class="string">"x - 5 ="</span>, x - <span class="number">5</span>)  </span><br><span class="line">print(<span class="string">"x * 2 ="</span>, x * <span class="number">2</span>)  </span><br><span class="line">print(<span class="string">"x / 2 ="</span>, x / <span class="number">2</span>)  </span><br><span class="line">print(<span class="string">"x // 2 ="</span>, x // <span class="number">2</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">x = [0 1 2 3]  </span></span><br><span class="line"><span class="string">x + 5 = [5 6 7 8]  </span></span><br><span class="line"><span class="string">x - 5 = [-5 -4 -3 -2]  </span></span><br><span class="line"><span class="string">x * 2 = [0 2 4 6]  </span></span><br><span class="line"><span class="string">x / 2 = [ 0. 0.5 1. 1.5]  </span></span><br><span class="line"><span class="string">x // 2 = [0 0 1 1]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>others</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"-x = "</span>, -x)  </span><br><span class="line">print(<span class="string">"x ** 2 = "</span>, x ** <span class="number">2</span>)  </span><br><span class="line">print(<span class="string">"x % 2 = "</span>, x % <span class="number">2</span>)  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">-x = [ 0 -1 -2 -3]  </span></span><br><span class="line"><span class="string">x ** 2 = [0 1 4 9]  </span></span><br><span class="line"><span class="string">x % 2 = [0 1 0 1]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>get them together</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> -(<span class="number">0.5</span>*x + <span class="number">1</span>) ** <span class="number">2</span>  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: array([-1. , -2.25, -4. , -6.25])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>.add()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.add(x, <span class="number">2</span>)  <span class="comment">#add 2 to every value</span></span><br><span class="line"><span class="comment">#Out: array([2, 3, 4, 5])</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>运算符</th>
<th>对应的通用函数</th>
<th>描述</th>
<th>example</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>np.add</td>
<td>加法运算</td>
<td>（即 1 + 1 = 2）</td>
</tr>
<tr>
<td>-</td>
<td>np.subtract</td>
<td>减法运算</td>
<td>（即 3 - 2 = 1）</td>
</tr>
<tr>
<td>-</td>
<td>np.negative</td>
<td>负数运算</td>
<td>（即 -2）</td>
</tr>
<tr>
<td>*</td>
<td>np.multiply</td>
<td>乘法运算</td>
<td>（即 2 * 3 = 6）</td>
</tr>
<tr>
<td>/</td>
<td>np.divide</td>
<td>除法运算</td>
<td>（即 3 / 2 = 1.5）</td>
</tr>
<tr>
<td>//</td>
<td>np.floor_divide</td>
<td>地板除法运算</td>
<td>（flfloor division，即 3 // 2 = 1）</td>
</tr>
<tr>
<td>**</td>
<td>np.power</td>
<td>指数运算</td>
<td>（即 2 ** 3 = 8）</td>
</tr>
<tr>
<td>%</td>
<td>np.mod</td>
<td>模 / 余数</td>
<td>（即 9 % 4 = 1）</td>
</tr>
</tbody></table>
<p> abs()   absolute()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])  </span><br><span class="line">abs(x)  </span><br><span class="line"><span class="comment">#Out: array([2, 1, 0, 1, 2])</span></span><br><span class="line"></span><br><span class="line">np.absolute(x) </span><br><span class="line"><span class="comment">#Out[12]: array([2, 1, 0, 1, 2])</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta = np.linspace(<span class="number">0</span>, np.pi, <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line"> print(<span class="string">"theta = "</span>, theta) </span><br><span class="line"> print(<span class="string">"sin(theta) = "</span>, np.sin(theta)) </span><br><span class="line"> print(<span class="string">"cos(theta) = "</span>, np.cos(theta)) </span><br><span class="line"> print(<span class="string">"tan(theta) = "</span>, np.tan(theta))</span><br><span class="line">  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">theta = [ 0. 1.57079633 3.14159265] </span></span><br><span class="line"><span class="string">sin(theta) = [ 0.00000000e+00 1.00000000e+00 1.22464680e-16] </span></span><br><span class="line"><span class="string">cos(theta) = [ 1.00000000e+00 6.12323400e-17 -1.00000000e+00] </span></span><br><span class="line"><span class="string">tan(theta) = [ 0.00000000e+00 1.63312394e+16 -1.22464680e-16]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>reverse:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]  </span><br><span class="line">print(<span class="string">"x = "</span>, x)  </span><br><span class="line">print(<span class="string">"arcsin(x) = "</span>, np.arcsin(x))  </span><br><span class="line">print(<span class="string">"arccos(x) = "</span>, np.arccos(x))  </span><br><span class="line">print(<span class="string">"arctan(x) = "</span>, np.arctan(x))  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">x = [-1, 0, 1]  </span></span><br><span class="line"><span class="string">arcsin(x) = [-1.57079633 0. 1.57079633]  </span></span><br><span class="line"><span class="string">arccos(x) = [ 3.14159265 1.57079633 0. ]  </span></span><br><span class="line"><span class="string">arctan(x) = [-0.78539816 0. 0.78539816]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>log and ln</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  </span><br><span class="line">print(<span class="string">"x ="</span>, x)  </span><br><span class="line">print(<span class="string">"e^x ="</span>, np.exp(x))  </span><br><span class="line">print(<span class="string">"2^x ="</span>, np.exp2(x))  </span><br><span class="line">print(<span class="string">"3^x ="</span>, np.power(<span class="number">3</span>, x))  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">x = [1, 2, 3]  </span></span><br><span class="line"><span class="string">e^x = [ 2.71828183 7.3890561 20.08553692]  </span></span><br><span class="line"><span class="string">2^x = [ 2. 4. 8.]  </span></span><br><span class="line"><span class="string">3^x = [ 3 9 27]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>] </span><br><span class="line"> print(<span class="string">"x ="</span>, x) </span><br><span class="line"> print(<span class="string">"ln(x) ="</span>, np.log(x)) </span><br><span class="line"> print(<span class="string">"log2(x) ="</span>, np.log2(x)) </span><br><span class="line"> print(<span class="string">"log10(x) ="</span>, np.log10(x)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">x = [1, 2, 4, 10] </span></span><br><span class="line"><span class="string">ln(x) = [ 0. 0.69314718 1.38629436 2.30258509] </span></span><br><span class="line"><span class="string">log2(x) = [ 0. 1. 2. 3.32192809] </span></span><br><span class="line"><span class="string">log10(x) = [ 0. 0.30103 0.60205999 1. ]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#It can be very accurate</span></span><br><span class="line">x = [<span class="number">0</span>, <span class="number">0.001</span>, <span class="number">0.01</span>, <span class="number">0.1</span>] </span><br><span class="line">print(<span class="string">"exp(x) - 1 ="</span>, np.expm1(x)) </span><br><span class="line">print(<span class="string">"log(1 + x) ="</span>, np.log1p(x)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">exp(x) - 1 = [ 0. 0.0010005 0.01005017 0.10517092] </span></span><br><span class="line"><span class="string">log(1 + x) = [ 0. 0.0009995 0.00995033 0.09531018]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>



<h2 id="more-advanced"><a href="#more-advanced" class="headerlink" title="more advanced"></a>more advanced</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">5</span>)  <span class="comment">#from 0 to 4</span></span><br><span class="line">y = np.empty(<span class="number">5</span>)  </span><br><span class="line">np.multiply(x, <span class="number">10</span>, out=y)  </span><br><span class="line">print(y)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#[ 0. 10. 20. 30. 40.]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y = np.zeros(<span class="number">10</span>) </span><br><span class="line">np.power(<span class="number">2</span>, x, out=y[::<span class="number">2</span>]) </span><br><span class="line">print(y) </span><br><span class="line"></span><br><span class="line"><span class="comment">#[ 1. 0. 2. 0. 4. 0. 8. 0. 16. 0.]</span></span><br><span class="line"></span><br><span class="line">y[::<span class="number">2</span>] = <span class="number">2</span> ** x</span><br><span class="line">y</span><br><span class="line"><span class="comment">#array([ 1.,  0.,  2.,  0.,  4.,  0.,  8.,  0., 16.,  0.])</span></span><br></pre></td></tr></table></figure>

<p>reduce()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)  <span class="comment">#[1 2 3 4 5]</span></span><br><span class="line">np.add.reduce(x)  <span class="comment">#1+2+3+4+5</span></span><br><span class="line"><span class="comment">#Out: 15</span></span><br><span class="line"></span><br><span class="line">np.add.accumulate(x) <span class="comment">#show all the steps</span></span><br><span class="line"><span class="comment">#Out: array([ 1, 3, 6, 10, 15]) </span></span><br><span class="line">np.multiply.accumulate(x) </span><br><span class="line"><span class="comment">#Out: array([ 1, 2, 6, 24, 120])</span></span><br></pre></td></tr></table></figure>

<p>outer()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)  </span><br><span class="line">np.multiply.outer(x, x)  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">array([[ 1, 2, 3, 4, 5],  </span></span><br><span class="line"><span class="string">	   [ 2, 4, 6, 8, 10],  </span></span><br><span class="line"><span class="string">       [ 3, 6, 9, 12, 15],  </span></span><br><span class="line"><span class="string">       [ 4, 8, 12, 16, 20],  </span></span><br><span class="line"><span class="string">       [ 5, 10, 15, 20, 25]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>sum() </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = np.random.random(<span class="number">100</span>)  </span><br><span class="line">sum(L)  </span><br><span class="line"><span class="comment">#Out: 55.61209116604941</span></span><br><span class="line"></span><br><span class="line">np.sum(L) </span><br><span class="line"><span class="comment">#Out: 55.612091166049424</span></span><br></pre></td></tr></table></figure>

<p>*faster way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">big_array = np.random.rand(<span class="number">1000000</span>)  </span><br><span class="line">%timeit sum(big_array)  </span><br><span class="line">%timeit np.sum(big_array)</span><br></pre></td></tr></table></figure>

<p>python has its own function min and max, but numpy’s is faster.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.min(big_array), np.max(big_array)  </span><br><span class="line"><span class="comment">#Out: (1.1717128136634614e-06, 0.9999976784968716)</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M = np.random.random((<span class="number">3</span>, <span class="number">4</span>))  </span><br><span class="line">print(M)  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">[[ 0.8967576 0.03783739 0.75952519 0.06682827]  </span></span><br><span class="line"><span class="string"> [ 0.8354065 0.99196818 0.19544769 0.43447084]  </span></span><br><span class="line"><span class="string"> [ 0.66859307 0.15038721 0.37911423 0.6687194]]</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line"></span><br><span class="line">M.sum()</span><br><span class="line"><span class="comment">#Out: 6.0850555667307118</span></span><br><span class="line"></span><br><span class="line">M.min(axis=<span class="number">0</span>) <span class="comment">#perpendicular is 0</span></span><br><span class="line"><span class="comment">#Out: array([ 0.66859307, 0.03783739, 0.19544769, 0.06682827])</span></span><br><span class="line"></span><br><span class="line">M.max(axis=<span class="number">1</span>) </span><br><span class="line"><span class="comment">#Out: array([ 0.8967576 , 0.99196818, 0.6687194])</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/07/11/Ul4gOS.png" alt="Ul4gOS.png"></p>
<p>example: (USA presidents’ height)</p>
<p>data: (.csv)</p>
<p>order,name,height(cm)  </p>
<p>1,George Washington,189  </p>
<p>2,John Adams,170  </p>
<p>3,Thomas Jefferson,189</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment">#pandas is used to deal with csv files</span></span><br><span class="line">data = pd.read_csv(<span class="string">'C:\\Users\\huawei\\ipy\\president_heights.csv'</span>) </span><br><span class="line">heights = np.array(data[<span class="string">'height(cm)'</span>])  <span class="comment">#put height in array</span></span><br><span class="line">print(heights)</span><br><span class="line"></span><br><span class="line"><span class="comment">#[189 170 189 163 183 171 185 168 173 183 173 173 175 178 183 193 178 173 174 183 183 168 170 178 182 180 183 178 182 188 175 179 183 193 182 183 177 185 188 188 182 185]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#find different factors in the data</span></span><br><span class="line">print(<span class="string">"Mean height: "</span>, heights.mean()) </span><br><span class="line">print(<span class="string">"Standard deviation:"</span>, heights.std()) </span><br><span class="line">print(<span class="string">"Minimum height: "</span>, heights.min()) </span><br><span class="line">print(<span class="string">"Maximum height: "</span>, heights.max())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Mean height: 179.738095238 </span></span><br><span class="line"><span class="string">Standard deviation: 6.93184344275 </span></span><br><span class="line"><span class="string">Minimum height: 163 </span></span><br><span class="line"><span class="string">Maximum height: 193</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"25th percentile: "</span>, np.percentile(heights, <span class="number">25</span>)) </span><br><span class="line">print(<span class="string">"Median: "</span>, np.median(heights)) </span><br><span class="line">print(<span class="string">"75th percentile: "</span>, np.percentile(heights, <span class="number">75</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">25th percentile:  174.25</span></span><br><span class="line"><span class="string">Median:  182.0</span></span><br><span class="line"><span class="string">75th percentile:  183.0</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">%matplotlib inline  <span class="comment">#matplotlib is used to plot graghs（matrix plot library）</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment">#（python plot）</span></span><br><span class="line"><span class="keyword">import</span> seaborn; seaborn.set() <span class="comment"># 设置绘图风格</span></span><br><span class="line">plt.hist(heights) <span class="comment">#choose histogram to plot heights</span></span><br><span class="line">plt.title(<span class="string">'Height Distribution of US Presidents'</span>) <span class="comment">#print the title</span></span><br><span class="line">plt.xlabel(<span class="string">'height (cm)'</span>)  <span class="comment">#print labels</span></span><br><span class="line">plt.ylabel(<span class="string">'number'</span>);</span><br></pre></td></tr></table></figure>

<img src="https://s1.ax1x.com/2020/07/11/UlH7lR.png" alt="UlH7lR.png" style="zoom:150%;" />]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-NumPy</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy1</title>
    <url>/2020/02/21/numpy1/</url>
    <content><![CDATA[<h1 id="NumPy-Introduction-1"><a href="#NumPy-Introduction-1" class="headerlink" title="NumPy Introduction 1"></a>NumPy Introduction 1</h1><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="First-step-Import-numpy"><a href="#First-step-Import-numpy" class="headerlink" title="First step: Import numpy"></a>First step: Import numpy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Multi-dimensions-array"><a href="#Multi-dimensions-array" class="headerlink" title="Multi-dimensions array"></a>Multi-dimensions array</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array([range(i,i+<span class="number">3</span>)<span class="keyword">for</span> i <span class="keyword">in</span>[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">Out[<span class="number">2</span>]:array([[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">              [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">              [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Creating-repeated-array"><a href="#Creating-repeated-array" class="headerlink" title="Creating repeated array"></a>Creating repeated array</h3><h4 id="create-an-array-with-length10-and-all-the-values-are-0"><a href="#create-an-array-with-length10-and-all-the-values-are-0" class="headerlink" title="create an array with length10,and all the values are 0."></a>create an array with length10,and all the values are 0.</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>,dtype=int)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">3</span>]:array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-which-is-3x5-type-is-float-and-all-the-values-are-1"><a href="#create-an-array-which-is-3x5-type-is-float-and-all-the-values-are-1" class="headerlink" title="create an array which is 3x5,type is float,and all the values are 1."></a>create an array which is 3x5,type is float,and all the values are 1.</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones((<span class="number">3</span>,<span class="number">5</span>),dtype=float)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">5</span>]:array([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">              [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">              [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-which-is-3x5-and-all-the-values-are-3-14"><a href="#create-an-array-which-is-3x5-and-all-the-values-are-3-14" class="headerlink" title="create an array which is 3x5,and all the values are 3.14."></a>create an array which is 3x5,and all the values are 3.14.</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.full((<span class="number">3</span>,<span class="number">5</span>),<span class="number">3.14</span>)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">6</span>]:array([[<span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>],</span><br><span class="line">              [<span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>],</span><br><span class="line">              [<span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-with-5-numbers-from-0-1-uniformly"><a href="#create-an-array-with-5-numbers-from-0-1-uniformly" class="headerlink" title="create an array with 5 numbers from 0~1 uniformly"></a>create an array with 5 numbers from 0~1 uniformly</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">7</span>]:array([<span class="number">0.</span>  , <span class="number">0.25</span>, <span class="number">0.5</span> , <span class="number">0.75</span>, <span class="number">1.</span>  ])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-which-is-3x3-with-random-number"><a href="#create-an-array-which-is-3x3-with-random-number" class="headerlink" title="create an array which is 3x3 with random number"></a>create an array which is 3x3 with random number</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.random((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"> <span class="comment"># 创建一个3×3的、均值为0、方差为1的</span></span><br><span class="line"> <span class="comment"># 正态分布的随机数数组</span></span><br><span class="line">Out[<span class="number">8</span>]:array([[<span class="number">0.47224148</span>, <span class="number">0.23125945</span>, <span class="number">0.95002522</span>],</span><br><span class="line">              [<span class="number">0.09738343</span>, <span class="number">0.88182864</span>, <span class="number">0.38184937</span>],</span><br><span class="line">              [<span class="number">0.99395495</span>, <span class="number">0.42838151</span>, <span class="number">0.92674988</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-which-is-3x3-with-random-normal-number-from-0-1"><a href="#create-an-array-which-is-3x3-with-random-normal-number-from-0-1" class="headerlink" title="create an array which is 3x3 with random normal number from 0~1"></a>create an array which is 3x3 with random normal number from 0~1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.normal(<span class="number">0</span>,<span class="number">1</span>,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">Out[<span class="number">9</span>]:array([[<span class="number">-0.55049464</span>, <span class="number">-0.35293695</span>,  <span class="number">0.75417556</span>],</span><br><span class="line">              [<span class="number">-0.63125306</span>,  <span class="number">0.31639634</span>, <span class="number">-2.24209815</span>],</span><br><span class="line">              [ <span class="number">1.44175974</span>, <span class="number">-0.69736733</span>,  <span class="number">0.30666294</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-which-is-3x3-with-random-integer-between1and-10"><a href="#create-an-array-which-is-3x3-with-random-integer-between1and-10" class="headerlink" title="create an array which is 3x3 with random integer between1and 10"></a>create an array which is 3x3 with random integer between1and 10</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">Out[<span class="number">10</span>]:array([[<span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>],</span><br><span class="line">               [<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">               [<span class="number">6</span>, <span class="number">3</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-which-is-4x4-its-numbers-have-only-one-digit"><a href="#create-an-array-which-is-4x4-its-numbers-have-only-one-digit" class="headerlink" title="create an array which is 4x4 ,its numbers have only one digit"></a>create an array which is 4x4 ,its numbers have only one digit</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.eye(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">11</span>]:array([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">               [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">               [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">               [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-with-3-random-number-from-the-storage"><a href="#create-an-array-with-3-random-number-from-the-storage" class="headerlink" title="create an array with 3 random number from the storage"></a>create an array with 3 random number from the storage</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.empty(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">12</span>]:array([<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>])</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="The-factors-of-array"><a href="#The-factors-of-array" class="headerlink" title="The factors of array"></a>The factors of array</h3><h4 id="ndim-the-dimension-shape-and-size"><a href="#ndim-the-dimension-shape-and-size" class="headerlink" title="ndim(the dimension),shape and size"></a>ndim(the dimension),shape and size</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">x1=np.random.randint(<span class="number">10</span>,size=<span class="number">6</span>)</span><br><span class="line">x2=np.random.randint(<span class="number">10</span>,size=(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">x3=np.random.randint(<span class="number">10</span>,size=(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">x1.ndim</span><br><span class="line"></span><br><span class="line">Out[<span class="number">13</span>]:<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">print(<span class="string">'x3 ndim: '</span>, x3.ndim)</span><br><span class="line">print(<span class="string">'x3 shape: '</span>, x3.shape)</span><br><span class="line">print(<span class="string">'x3.size: '</span> , x3.size)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">14</span>]:x3 ndim:  <span class="number">3</span></span><br><span class="line">        x3 shape:  (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        x3.size:  <span class="number">60</span></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">print(<span class="string">'dtype: '</span>,x3.dtype)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">15</span>]:dtype:  int32</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Get-one-element"><a href="#Get-one-element" class="headerlink" title="Get one element"></a>Get one element</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1</span><br><span class="line"></span><br><span class="line">Out[<span class="number">16</span>]:array([<span class="number">5</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x1[0]</span><br><span class="line"></span><br><span class="line">Out[17]:5</span><br></pre></td></tr></table></figure>

<h4 id="From-the-end"><a href="#From-the-end" class="headerlink" title="From the end"></a>From the end</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">Out[<span class="number">18</span>]:<span class="number">9</span></span><br></pre></td></tr></table></figure>

<h4 id="Use-the-comma"><a href="#Use-the-comma" class="headerlink" title="Use the comma"></a>Use the comma</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x2</span><br><span class="line"></span><br><span class="line">Out[<span class="number">19</span>]:array([[<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">               [<span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>],</span><br><span class="line">               [<span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>]])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x2[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">Out[<span class="number">20</span>]:<span class="number">3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x2[<span class="number">2</span>,<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">Out[<span class="number">21</span>]:<span class="number">7</span></span><br></pre></td></tr></table></figure>

<h4 id="Change-element-x1-（-5-0-3-3-7-9-）"><a href="#Change-element-x1-（-5-0-3-3-7-9-）" class="headerlink" title="Change element(x1=（[5, 0, 3, 3, 7, 9]）)"></a>Change element(x1=（[5, 0, 3, 3, 7, 9]）)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1[<span class="number">0</span>]=<span class="number">3.14</span></span><br><span class="line">x1</span><br><span class="line"></span><br><span class="line">Out[<span class="number">22</span>]:array([<span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>]) <span class="comment">#float-&gt;integer</span></span><br></pre></td></tr></table></figure>

<h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)  </span><br><span class="line">x  </span><br><span class="line"><span class="comment">#Out: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])  </span></span><br><span class="line"></span><br><span class="line">x[:<span class="number">5</span>] <span class="comment"># 前五个元素 </span></span><br><span class="line"><span class="comment">#Out:array([0, 1, 2, 3, 4])  </span></span><br><span class="line"></span><br><span class="line">x[<span class="number">5</span>:] <span class="comment"># 索引五之后的元素 </span></span><br><span class="line"><span class="comment">#Out:array([5, 6, 7, 8, 9])  </span></span><br><span class="line"></span><br><span class="line">x[<span class="number">4</span>:<span class="number">7</span>] <span class="comment"># 中间的子数组 </span></span><br><span class="line"><span class="comment">#Out:array([4, 5, 6])  </span></span><br><span class="line"></span><br><span class="line">x[::<span class="number">2</span>] <span class="comment"># 每隔一个元素 </span></span><br><span class="line"><span class="comment">#Out:array([0, 2, 4, 6, 8])  </span></span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>::<span class="number">2</span>] <span class="comment"># 每隔一个元素，从索引1开始 </span></span><br><span class="line"><span class="comment">#Out:array([1, 3, 5, 7, 9])</span></span><br></pre></td></tr></table></figure>

<p>multi-dimension:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x2=array([[<span class="number">12</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>],  </span><br><span class="line">		  [ <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>],  </span><br><span class="line">          [ <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>]])  </span><br><span class="line">x2[:<span class="number">2</span>, :<span class="number">3</span>] <span class="comment"># 两行，三列 </span></span><br><span class="line"><span class="comment">#Out:array([[12, 5, 2],  </span></span><br><span class="line"><span class="comment">#			[ 7, 6, 8]])  </span></span><br><span class="line"></span><br><span class="line">x2[:<span class="number">3</span>, ::<span class="number">2</span>] <span class="comment"># 所有行，每隔一列 </span></span><br><span class="line"><span class="comment">#Out:array([[12, 2],  </span></span><br><span class="line"><span class="comment">#   		[ 7, 8],  </span></span><br><span class="line"><span class="comment">#    		[ 1, 7]])</span></span><br><span class="line"></span><br><span class="line">x2[::<span class="number">-1</span>, ::<span class="number">-1</span>] </span><br><span class="line"><span class="comment">#Out:array([[ 7, 7, 6, 1], </span></span><br><span class="line"><span class="comment">#		    [ 8, 8, 6, 7], </span></span><br><span class="line"><span class="comment">#           [ 4, 2, 5, 12]])</span></span><br></pre></td></tr></table></figure>

<h4 id="copy"><a href="#copy" class="headerlink" title=".copy()"></a>.copy()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x2_sub_copy = x2[:<span class="number">2</span>, :<span class="number">2</span>].copy()  </span><br><span class="line">print(x2_sub_copy)  </span><br><span class="line"><span class="comment">#out:[[99 5]  </span></span><br><span class="line"><span class="comment">#     [ 7 6]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x2_sub_copy[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">42</span> </span><br><span class="line">print(x2_sub_copy) </span><br><span class="line"><span class="comment">#out:[[42 5] </span></span><br><span class="line"><span class="comment">#     [ 7 6]]</span></span><br></pre></td></tr></table></figure>

<h4 id="reshape"><a href="#reshape" class="headerlink" title=".reshape()"></a>.reshape()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grid = np.arange(<span class="number">1</span>, <span class="number">10</span>).reshape((<span class="number">3</span>, <span class="number">3</span>))  </span><br><span class="line">print(grid)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#out:[[1 2 3]  </span></span><br><span class="line"><span class="comment">#     [4 5 6]  </span></span><br><span class="line"><span class="comment">#     [7 8 9]]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 通过变形获得的行向量 </span></span><br><span class="line">x.reshape((<span class="number">1</span>, <span class="number">3</span>))  </span><br><span class="line"><span class="comment">#Out:array([[1, 2, 3]])  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过newaxis获得的行向量 </span></span><br><span class="line">x[np.newaxis, :]  </span><br><span class="line"><span class="comment">#Out:array([[1, 2, 3]])  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过变形获得的列向量 </span></span><br><span class="line">x.reshape((<span class="number">3</span>, <span class="number">1</span>))  </span><br><span class="line"><span class="comment">#Out:array([[1],  </span></span><br><span class="line"><span class="comment">#			[2],  </span></span><br><span class="line"><span class="comment">#			[3]])  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过newaxis获得的列向量 </span></span><br><span class="line">x[:, np.newaxis]  </span><br><span class="line"><span class="comment">#Out:array([[1],  </span></span><br><span class="line"><span class="comment">#			[2],  </span></span><br><span class="line"><span class="comment">#			[3]])</span></span><br></pre></td></tr></table></figure>

<h4 id="concatenate-combine-arrays"><a href="#concatenate-combine-arrays" class="headerlink" title=".concatenate() (combine arrays)"></a>.concatenate() (combine arrays)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  </span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])  </span><br><span class="line">np.concatenate([x, y])  </span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:array([1, 2, 3, 3, 2, 1])</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = [<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>]  </span><br><span class="line">print(np.concatenate([x, y, z]))  </span><br><span class="line"><span class="comment">#out:[ 1 2 3 3 2 1 99 99 99] </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#two dimension</span></span><br><span class="line">grid = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],  </span><br><span class="line">				 [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])  </span><br><span class="line"><span class="comment"># 沿着第一个轴拼接 </span></span><br><span class="line">np.concatenate([grid, grid])  </span><br><span class="line"><span class="comment">#Out:array([[1, 2, 3],  </span></span><br><span class="line"><span class="comment">#			[4, 5, 6],  </span></span><br><span class="line"><span class="comment">#			[1, 2, 3],  </span></span><br><span class="line"><span class="comment">#			[4, 5, 6]])  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 沿着第二个轴拼接（从0开始索引） </span></span><br><span class="line">np.concatenate([grid, grid], axis=<span class="number">1</span>)  </span><br><span class="line"><span class="comment">#out: array([[1, 2, 3, 1, 2, 3],  </span></span><br><span class="line"><span class="comment">#            [4, 5, 6, 4, 5, 6]]) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#np.vstack（垂直栈）和 np.hstack（水平栈）</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  </span><br><span class="line">grid = np.array([[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>],  </span><br><span class="line">				 [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]])  </span><br><span class="line"><span class="comment"># 垂直栈数组 </span></span><br><span class="line">np.vstack([x, grid])  </span><br><span class="line"><span class="comment">#Out:array([[1, 2, 3],  </span></span><br><span class="line"><span class="comment">#           [9, 8, 7],  </span></span><br><span class="line"><span class="comment">#           [6, 5, 4]])   </span></span><br><span class="line"></span><br><span class="line">y = np.array([[<span class="number">99</span>],  </span><br><span class="line">              [<span class="number">99</span>]])  </span><br><span class="line">np.hstack([grid, y])  </span><br><span class="line"><span class="comment">#out: array([[ 9, 8, 7, 99],  </span></span><br><span class="line"><span class="comment">#            [ 6, 5, 4, 99]])</span></span><br></pre></td></tr></table></figure>

<h4 id="split"><a href="#split" class="headerlink" title=".split()"></a>.split()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]  </span><br><span class="line">x1, x2, x3 = np.split(x, [<span class="number">3</span>, <span class="number">5</span>])  </span><br><span class="line">print(x1, x2, x3)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#out:[1 2 3] [99 99] [3 2 1]</span></span><br></pre></td></tr></table></figure>

<p>np.hsplit &amp; np.vsplit</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grid = np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>))  </span><br><span class="line">grid  </span><br><span class="line"><span class="comment">#Out:array([[ 0, 1, 2, 3],  </span></span><br><span class="line"><span class="comment">#			[ 4, 5, 6, 7],  </span></span><br><span class="line"><span class="comment">#			[ 8, 9, 10, 11],  </span></span><br><span class="line"><span class="comment">#			[12, 13, 14, 15]])  </span></span><br><span class="line"></span><br><span class="line">upper, lower = np.vsplit(grid, [<span class="number">2</span>])  </span><br><span class="line">print(upper)  </span><br><span class="line">print(lower)  </span><br><span class="line"><span class="comment">#out:[[0 1 2 3]  </span></span><br><span class="line"><span class="comment">#	  [4 5 6 7]]  </span></span><br><span class="line"><span class="comment">#	 [[ 8 9 10 11]  </span></span><br><span class="line"><span class="comment">#     [12 13 14 15]]  </span></span><br><span class="line"></span><br><span class="line">left, right = np.hsplit(grid, [<span class="number">2</span>])  </span><br><span class="line">print(left)  </span><br><span class="line">print(right)  </span><br><span class="line"><span class="comment">#out:[[ 0 1]  </span></span><br><span class="line"><span class="comment">#     [ 4 5]  </span></span><br><span class="line"><span class="comment">#     [ 8 9]  </span></span><br><span class="line"><span class="comment">#     [12 13]]  </span></span><br><span class="line"><span class="comment">#    [[ 2 3]  </span></span><br><span class="line"><span class="comment">#     [ 6 7]  </span></span><br><span class="line"><span class="comment">#     [10 11]  </span></span><br><span class="line"><span class="comment">#     [14 15]]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-NumPy</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy3</title>
    <url>/2020/07/11/numpy3/</url>
    <content><![CDATA[<h1 id="NumPy-Introduction-3"><a href="#NumPy-Introduction-3" class="headerlink" title="NumPy Introduction 3"></a>NumPy Introduction 3</h1><h2 id="broadcast"><a href="#broadcast" class="headerlink" title="broadcast"></a>broadcast</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">a = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])  </span><br><span class="line">b = np.array([<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>])  </span><br><span class="line">a + b  </span><br><span class="line"><span class="comment">#Out: array([5, 6, 7])</span></span><br><span class="line"></span><br><span class="line">a + <span class="number">5</span> </span><br><span class="line"><span class="comment">#Out: array([5, 6, 7])</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M = np.ones((<span class="number">3</span>, <span class="number">3</span>))  </span><br><span class="line">M  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: array([[ 1., 1., 1.],  </span></span><br><span class="line"><span class="string">			[ 1., 1., 1.],  </span></span><br><span class="line"><span class="string">		    [ 1., 1., 1.]])  </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">M + a  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: array([[ 1., 2., 3.],      change a to[[0,1,2],</span></span><br><span class="line"><span class="string">			[ 1., 2., 3.],                  [0,1,2],</span></span><br><span class="line"><span class="string">			[ 1., 2., 3.]])                 [0,1,2]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> a = np.arange(<span class="number">3</span>) </span><br><span class="line"> b = np.arange(<span class="number">3</span>)[:, np.newaxis] <span class="comment">#change to the other direction</span></span><br><span class="line"> print(a) </span><br><span class="line"> print(b) </span><br><span class="line"><span class="string">''''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">[0 1 2]   #--a</span></span><br><span class="line"><span class="string">[[0]      #--b</span></span><br><span class="line"><span class="string"> [1] </span></span><br><span class="line"><span class="string"> [2]] </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">a + b </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">array([[0, 1, 2], </span></span><br><span class="line"><span class="string"> 	   [1, 2, 3], </span></span><br><span class="line"><span class="string"> 	   [2, 3, 4]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/U50DZ6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/21/U50DZ6.png" alt="U50DZ6.png"></a></p>
<h3 id="rule-of-broadcast"><a href="#rule-of-broadcast" class="headerlink" title="rule of broadcast"></a>rule of broadcast</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M = np.ones((<span class="number">2</span>, <span class="number">3</span>)) </span><br><span class="line">a = np.arange(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>we can know that:</p>
<p>M.shape=(2,3) ; a.shape=(3,)</p>
<p>to add this two,first add  one more dimension to a: a.shape=(1,3)</p>
<p>then expand a: a.shape=(2,3)</p>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">3</span>).reshape((<span class="number">3</span>, <span class="number">1</span>)) </span><br><span class="line">b = np.arange(<span class="number">3</span>)</span><br><span class="line">a + b </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: array([[0, 1, 2], </span></span><br><span class="line"><span class="string"> 			[1, 2, 3], </span></span><br><span class="line"><span class="string"> 			[2, 3, 4]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>



<p>sometimes it may not success:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">M = np.ones((<span class="number">3</span>, <span class="number">2</span>)) </span><br><span class="line">a = np.arange(<span class="number">3</span>)</span><br><span class="line">M + a </span><br><span class="line">    </span><br><span class="line">--------------------------------------------------------------------------- </span><br><span class="line">ValueError Traceback (most recent call last) </span><br><span class="line">&lt;ipython-input<span class="number">-13</span><span class="number">-9e16</span>e9f98da6&gt; <span class="keyword">in</span> &lt;module&gt;() </span><br><span class="line">----&gt; 1 M + a</span><br></pre></td></tr></table></figure>

<p>after broadcast</p>
<p>M.shape -&gt; (3, 2) </p>
<p>a.shape -&gt; (3, 3)</p>
<p>if you want to add number on the right of the shape,you can reshape the array:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M + a[:, np.newaxis] <span class="comment">#a's shape now is(3,1)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: array([[ 1., 1.], </span></span><br><span class="line"><span class="string">			[ 2., 2.], </span></span><br><span class="line"><span class="string">			[ 3., 3.]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>



<p>this rules can be used with any common function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.logaddexp(M, a[:, np.newaxis]) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: array([[ 1.31326169, 1.31326169], </span></span><br><span class="line"><span class="string"> 			[ 1.69314718, 1.69314718], </span></span><br><span class="line"><span class="string"> 			[ 2.31326169, 2.31326169]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>it’s more accurate than <code>log(exp(a) + exp(b))</code></p>
<h3 id="dealing-with-numbers"><a href="#dealing-with-numbers" class="headerlink" title="dealing with numbers"></a>dealing with numbers</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = np.random.random((<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">Xmean = X.mean(<span class="number">0</span>) </span><br><span class="line">Xmean</span><br><span class="line"><span class="comment">#out:array([ 0.53514715, 0.66567217, 0.44385899])</span></span><br></pre></td></tr></table></figure>

<p>check: whether they’re close to 0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_centered = X - Xmean</span><br><span class="line">X_centered.mean(<span class="number">0</span>) </span><br><span class="line"><span class="comment">#Out: array([ 2.22044605e-17, -7.77156117e-17, -1.66533454e-17])</span></span><br></pre></td></tr></table></figure>



<p>plot the picture:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=np.linspace(<span class="number">0</span>,<span class="number">5</span>,<span class="number">50</span>)</span><br><span class="line">y=np.linspace(<span class="number">0</span>,<span class="number">5</span>,<span class="number">50</span>)[:,np.newaxis]</span><br><span class="line">z=np.sin(x)**<span class="number">10</span>+np.cos(<span class="number">10</span>+y*x)*np.cos(x)</span><br><span class="line"></span><br><span class="line">%matplotlib inline </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line">plt.imshow(z, origin=<span class="string">'lower'</span>, extent=[<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>], cmap=<span class="string">'viridis'</span>) </span><br><span class="line">plt.colorbar()</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/U5sY01" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/21/U5sY01.png" alt="U5sY01.png"></a></p>
<h3 id="mask"><a href="#mask" class="headerlink" title="mask"></a>mask</h3><p>e.g. record the raining days</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">rainfall=pd.read_csv(<span class="string">'Seattle2014.csv'</span>)[<span class="string">'PRCP'</span>].values</span><br><span class="line">inches=rainfall/<span class="number">254</span> </span><br><span class="line">inches.shape</span><br><span class="line"><span class="comment">#out:(365,)</span></span><br><span class="line"></span><br><span class="line">%matplotlib inline </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">import</span> seaborn; seaborn.set() <span class="comment"># change the style</span></span><br><span class="line">plt.hist(inches, <span class="number">40</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/07/21/U5cFSO.png" alt="U5cFSO.png"></p>
<p>compare the value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) </span><br><span class="line">x &lt; <span class="number">3</span> <span class="comment"># 小于</span></span><br><span class="line"><span class="comment">#Out: array([ True, True, False, False, False], dtype=bool) </span></span><br><span class="line"></span><br><span class="line">x &gt; <span class="number">3</span> <span class="comment"># 大于</span></span><br><span class="line"><span class="comment">#Out: array([False, False, False, True, True], dtype=bool) </span></span><br><span class="line"></span><br><span class="line">x &lt;= <span class="number">3</span> <span class="comment"># 小于等于</span></span><br><span class="line"><span class="comment">#Out: array([ True, True, True, False, False], dtype=bool) </span></span><br><span class="line"></span><br><span class="line">x &gt;= <span class="number">3</span> <span class="comment"># 大于等于</span></span><br><span class="line"><span class="comment">#Out: array([False, False, True, True, True], dtype=bool) </span></span><br><span class="line"></span><br><span class="line">x != <span class="number">3</span> <span class="comment"># 不等于</span></span><br><span class="line"><span class="comment">#Out: array([ True, True, False, True, True], dtype=bool) </span></span><br><span class="line"></span><br><span class="line">x == <span class="number">3</span> <span class="comment"># 等于</span></span><br><span class="line"><span class="comment">#Out: array([False, False, True, False, False], dtype=bool)</span></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span> * x) == (x ** <span class="number">2</span>) </span><br><span class="line"><span class="comment">#Out: array([False, True, False, False, False], dtype=bool)</span></span><br></pre></td></tr></table></figure>



<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(x)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">[[5 0 3 3] </span></span><br><span class="line"><span class="string"> [7 9 3 5] </span></span><br><span class="line"><span class="string"> [2 4 7 6]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#the number of value less than 6</span></span><br><span class="line">np.count_nonzero(x &lt; <span class="number">6</span>) </span><br><span class="line"><span class="comment">#Out: 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#the sum of value that less than 6</span></span><br><span class="line">np.sum(x &lt; <span class="number">6</span>) </span><br><span class="line"><span class="comment">#Out: 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#count the number of value less than 6 in every line</span></span><br><span class="line">np.sum(x &lt; <span class="number">6</span>, axis=<span class="number">1</span>) </span><br><span class="line"><span class="comment">#Out: array([4, 2, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#is there any value larger than 8</span></span><br><span class="line">np.any(x &gt; <span class="number">8</span>) </span><br><span class="line"><span class="comment">#Out: True </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#is there any value smaller than 0</span></span><br><span class="line"> np.any(x &lt; <span class="number">0</span>) </span><br><span class="line"><span class="comment">#Out: False </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#are all the value smaller than 10</span></span><br><span class="line"> np.all(x &lt; <span class="number">10</span>) </span><br><span class="line"><span class="comment">#Out: True </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#are all the number 6</span></span><br><span class="line"> np.all(x == <span class="number">6</span>) </span><br><span class="line"><span class="comment">#Out: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#np.all() and np.any() can also be used like this:</span></span><br><span class="line"><span class="comment">#are all the value in the first line 8</span></span><br><span class="line">np.all(x &lt; <span class="number">8</span>, axis=<span class="number">1</span>) </span><br><span class="line"><span class="comment">#Out: array([ True, False, True], dtype=bool)</span></span><br></pre></td></tr></table></figure>

<p>Boolean symbols can also be used:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.sum((inches &gt; <span class="number">0.5</span>) &amp; (inches &lt; <span class="number">1</span>)) <span class="comment">#count the date of raining within the standard</span></span><br><span class="line"><span class="comment">#Out: 29</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#can be also written like:</span></span><br><span class="line">np.sum(~( (inches &lt;= <span class="number">0.5</span>) | (inches &gt;= <span class="number">1</span>) )) </span><br><span class="line"><span class="comment">#Out: 29</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>&amp;</th>
<th>np.bitwise_and</th>
</tr>
</thead>
<tbody><tr>
<td>|</td>
<td>np.bitwise_or</td>
</tr>
<tr>
<td>^</td>
<td>np.bitwise_xor</td>
</tr>
<tr>
<td>~</td>
<td>np.bitwise_not</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Number days without rain: "</span>, np.sum(inches == <span class="number">0</span>)) </span><br><span class="line">print(<span class="string">"Number days with rain: "</span>, np.sum(inches != <span class="number">0</span>)) </span><br><span class="line">print(<span class="string">"Days with more than 0.5 inches:"</span>, np.sum(inches &gt; <span class="number">0.5</span>)) </span><br><span class="line">print(<span class="string">"Rainy days with &lt; 0.1 inches :"</span>, np.sum((inches &gt; <span class="number">0</span>) &amp; (inches &lt; <span class="number">0.2</span>))) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">Number days without rain: 215 </span></span><br><span class="line"><span class="string">Number days with rain: 150 </span></span><br><span class="line"><span class="string">Days with more than 0.5 inches: 37 </span></span><br><span class="line"><span class="string">Rainy days with &lt; 0.1 inches : 75</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>



<h3 id="use-Boolean-as-mask"><a href="#use-Boolean-as-mask" class="headerlink" title="use Boolean as mask"></a>use Boolean as mask</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: array([[5, 0, 3, 3], </span></span><br><span class="line"><span class="string"> 			[7, 9, 3, 5], </span></span><br><span class="line"><span class="string"> 			[2, 4, 7, 6]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">x &lt; <span class="number">5</span> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: array([[False, True, True, True], </span></span><br><span class="line"><span class="string"> 			[False, False, True, False], </span></span><br><span class="line"><span class="string"> 			[ True, True, False, False]], dtype=bool)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">x[x &lt; <span class="number">5</span>] </span><br><span class="line"><span class="comment">#Out: array([0, 3, 3, 3, 2, 4])</span></span><br></pre></td></tr></table></figure>





<h2 id="easier-way-to-get-index"><a href="#easier-way-to-get-index" class="headerlink" title="easier way to get index"></a>easier way to get index</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">rand = np.random.RandomState(<span class="number">42</span>) </span><br><span class="line">x = rand.randint(<span class="number">100</span>, size=<span class="number">10</span>) </span><br><span class="line">print(x) </span><br><span class="line"><span class="comment">#out:[51 92 14 71 60 20 82 86 74 74]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[x[<span class="number">3</span>], x[<span class="number">7</span>], x[<span class="number">2</span>]] </span><br><span class="line"><span class="comment">#Out: [71, 86, 14]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ind = [<span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>] </span><br><span class="line">x[ind] </span><br><span class="line"><span class="comment">#Out: array([71, 86, 60])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ind = np.array([[<span class="number">3</span>, <span class="number">7</span>], </span><br><span class="line"> 				[<span class="number">4</span>, <span class="number">5</span>]]) </span><br><span class="line">x[ind] </span><br><span class="line"><span class="comment">#Out: array([[71, 86], </span></span><br><span class="line"><span class="comment"># 			 [60, 20]])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>)) </span><br><span class="line">X </span><br><span class="line"><span class="comment">#Out: array([[ 0, 1, 2, 3], </span></span><br><span class="line"><span class="comment"># 			 [ 4, 5, 6, 7], </span></span><br><span class="line"><span class="comment">#			 [ 8, 9, 10, 11]])</span></span><br><span class="line"></span><br><span class="line">row = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]) <span class="comment">#the  index</span></span><br><span class="line">col = np.array([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]) </span><br><span class="line">X[row, col] </span><br><span class="line"><span class="comment">#Out: array([ 2, 5, 11])</span></span><br><span class="line"></span><br><span class="line">X[row[:, np.newaxis], col] <span class="comment">#form multi-dimension array</span></span><br><span class="line"><span class="comment">#Out: array([[ 2, 1, 3], </span></span><br><span class="line"><span class="comment">#			 [ 6, 5, 7], </span></span><br><span class="line"><span class="comment">#			 [10, 9, 11]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#we can see the calculation through:</span></span><br><span class="line">row[:, np.newaxis] * col </span><br><span class="line"><span class="comment">#Out: array([[0, 0, 0], </span></span><br><span class="line"><span class="comment">#			 [2, 1, 3], </span></span><br><span class="line"><span class="comment">#			 [4, 2, 6]])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X[<span class="number">2</span>, [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>]] </span><br><span class="line"><span class="comment">#Out: array([10, 8, 9])</span></span><br><span class="line"></span><br><span class="line">X[<span class="number">1</span>:, [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>]] </span><br><span class="line"><span class="comment">#Out: array([[ 6, 4, 5], </span></span><br><span class="line"><span class="comment">#			 [10, 8, 9]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mask:</span></span><br><span class="line">mask = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], dtype=bool) </span><br><span class="line">X[row[:, np.newaxis], mask] </span><br><span class="line"><span class="comment">#Out: array([[ 0, 2], </span></span><br><span class="line"><span class="comment">#			 [ 4, 6], </span></span><br><span class="line"><span class="comment">#			 [ 8, 10]])</span></span><br></pre></td></tr></table></figure>

<p>change the value:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>) </span><br><span class="line">i = np.array([<span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">4</span>]) </span><br><span class="line">x[i] = <span class="number">99</span> </span><br><span class="line">print(x) </span><br><span class="line"><span class="comment">#out:[ 0 99 99 3 99 5 6 7 99 9]</span></span><br><span class="line"></span><br><span class="line">x[i] -= <span class="number">10</span> <span class="comment">#the selected ones -10</span></span><br><span class="line">print(x) </span><br><span class="line"><span class="comment">#out:[ 0 89 89 3 89 5 6 7 89 9]</span></span><br></pre></td></tr></table></figure>

<p>another way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.zeros(<span class="number">10</span>) </span><br><span class="line">x[[<span class="number">0</span>, <span class="number">0</span>]] = [<span class="number">4</span>, <span class="number">6</span>] </span><br><span class="line">print(x) </span><br><span class="line"><span class="comment">#out:[ 6. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"></span><br><span class="line">i = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>] </span><br><span class="line">x[i] += <span class="number">1</span> </span><br><span class="line">x </span><br><span class="line"><span class="comment">#Out: array([ 6., 0., 1., 1., 1., 0., 0., 0., 0., 0.])</span></span><br><span class="line"></span><br><span class="line">x = np.zeros(<span class="number">10</span>) </span><br><span class="line">np.add.at(x, i, <span class="number">1</span>) </span><br><span class="line">print(x) </span><br><span class="line"><span class="comment">#out:[ 0. 0. 1. 2. 3. 0. 0. 0. 0. 0.]</span></span><br></pre></td></tr></table></figure>



<h2 id="sort-the-array"><a href="#sort-the-array" class="headerlink" title="sort the array"></a>sort the array</h2><p>know more about sort: <a href="https://arya-1017.github.io/2020/07/12/《算法图解》读书笔记1/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/07/12/《算法图解》读书笔记1/</a></p>
<p>and <a href="https://arya-1017.github.io/2020/07/13/《算法图解》读书笔记2/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/07/13/《算法图解》读书笔记2/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(x)</span>:</span> </span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)): </span><br><span class="line">		swap = i + np.argmin(x[i:]) </span><br><span class="line">        (x[i], x[swap]) = (x[swap], x[i]) </span><br><span class="line">    <span class="keyword">return</span> x </span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>]) </span><br><span class="line">selection_sort(x) </span><br><span class="line"><span class="comment">#Out: array([1, 2, 3, 4, 5])</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bogosort</span><span class="params">(x)</span>:</span> </span><br><span class="line">	<span class="keyword">while</span> np.any(x[:<span class="number">-1</span>] &gt; x[<span class="number">1</span>:]): </span><br><span class="line">		np.random.shuffle(x) </span><br><span class="line">	<span class="keyword">return</span> x </span><br><span class="line">x = np.array([<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>]) </span><br><span class="line">bogosort(x) </span><br><span class="line"><span class="comment">#Out: array([1, 2, 3, 4, 5])</span></span><br></pre></td></tr></table></figure>

<p>easier way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>]) </span><br><span class="line">np.sort(x) </span><br><span class="line"><span class="comment">#Out: array([1, 2, 3, 4, 5])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#argsort返回的是原始数组排好序的索引值</span></span><br><span class="line">x = np.array([<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>]) </span><br><span class="line">i = np.argsort(x) </span><br><span class="line">print(i) </span><br><span class="line"><span class="comment">#out:[1 0 3 2 4]</span></span><br><span class="line"></span><br><span class="line">x[i] </span><br><span class="line"><span class="comment">#Out: array([1, 2, 3, 4, 5])</span></span><br></pre></td></tr></table></figure>

<p>multi-dimension array:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rand = np.random.RandomState(<span class="number">42</span>) </span><br><span class="line">X = rand.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">4</span>, <span class="number">6</span>)) </span><br><span class="line">print(X) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">[[6 3 7 4 6 9] </span></span><br><span class="line"><span class="string"> [2 6 7 4 3 7] </span></span><br><span class="line"><span class="string"> [7 2 5 4 1 7] </span></span><br><span class="line"><span class="string"> [5 1 4 0 9 5]] </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对X的每一列排序</span></span><br><span class="line">np.sort(X, axis=<span class="number">0</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">array([[2, 1, 4, 0, 1, 5], </span></span><br><span class="line"><span class="string"> 	   [5, 2, 5, 4, 3, 7], </span></span><br><span class="line"><span class="string">	   [6, 3, 7, 4, 6, 7], </span></span><br><span class="line"><span class="string">	   [7, 6, 7, 4, 9, 9]]) </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对X每一行排序</span></span><br><span class="line">np.sort(X, axis=<span class="number">1</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">array([[3, 4, 6, 6, 7, 9], </span></span><br><span class="line"><span class="string"> 	   [2, 3, 4, 6, 7, 7], </span></span><br><span class="line"><span class="string">	   [1, 2, 4, 5, 7, 7], </span></span><br><span class="line"><span class="string">	   [0, 1, 4, 5, 5, 9]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>sort partially:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]) </span><br><span class="line">np.partition(x, <span class="number">3</span>) <span class="comment">#get 3 minimum numbers in the array</span></span><br><span class="line"><span class="comment">#Out: array([2, 1, 3, 4, 6, 5, 7])</span></span><br><span class="line"></span><br><span class="line">np.partition(X, <span class="number">2</span>, axis=<span class="number">1</span>) </span><br><span class="line"><span class="comment">#Out: array([[3, 4, 6, 7, 6, 9], </span></span><br><span class="line"><span class="comment">#			 [2, 3, 4, 7, 6, 7], </span></span><br><span class="line"><span class="comment">#			 [1, 2, 4, 5, 7, 7], </span></span><br><span class="line"><span class="comment">#			 [0, 1, 4, 5, 9, 5]])</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-NumPy</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas1</title>
    <url>/2020/07/23/pandas1/</url>
    <content><![CDATA[<h1 id="Pandas-Introduction-1"><a href="#Pandas-Introduction-1" class="headerlink" title="Pandas Introduction 1"></a>Pandas Introduction 1</h1><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>first import pandas:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas </span><br><span class="line">pandas.__version__ </span><br><span class="line"><span class="comment">#Out: '0.18.1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>

<h3 id="create-series"><a href="#create-series" class="headerlink" title="create series:"></a><strong>create series:</strong></h3><blockquote>
<p> pd.Series(data, index=index)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.Series([<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1.0</span>]) </span><br><span class="line">data</span><br></pre></td></tr></table></figure>

<p> 0   0.25 </p>
<p> 1   0.50 </p>
<p> 2   0.75 </p>
<p> 3   1.00 </p>
<p> dtype: float64</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.Series(<span class="number">5</span>, index=[<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>])</span><br></pre></td></tr></table></figure>

<p>100   5 </p>
<p>200   5 </p>
<p>300   5 </p>
<p> dtype: int64</p>
<p><strong>it can also be dictionary, and it will sort as the index</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.Series(&#123;<span class="number">2</span>:<span class="string">'a'</span>, <span class="number">1</span>:<span class="string">'b'</span>, <span class="number">3</span>:<span class="string">'c'</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>1 b </p>
<p>2 a </p>
<p>3 c </p>
<p> dtype: object</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.Series(&#123;<span class="number">2</span>:<span class="string">'a'</span>, <span class="number">1</span>:<span class="string">'b'</span>, <span class="number">3</span>:<span class="string">'c'</span>&#125;, index=[<span class="number">3</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p> 3 c </p>
<p> 2 a </p>
<p> dtype: object</p>
<h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><p>we can check the value(similar to numpy) and index:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.values </span><br><span class="line"><span class="comment">#Out: array([ 0.25, 0.5 , 0.75, 1. ])</span></span><br><span class="line"></span><br><span class="line">data.index </span><br><span class="line"><span class="comment">#Out: RangeIndex(start=0, stop=4, step=1)</span></span><br></pre></td></tr></table></figure>

<p>it can also be get as python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="number">1</span>] </span><br><span class="line"><span class="comment">#Out: 0.5 </span></span><br><span class="line"></span><br><span class="line">data[<span class="number">1</span>:<span class="number">3</span>] </span><br><span class="line"><span class="comment">#Out: 1 0.50 </span></span><br><span class="line"><span class="comment"># 	  2 0.75 </span></span><br><span class="line"><span class="comment"># 	  dtype: float64</span></span><br></pre></td></tr></table></figure>

<p>we can change the index:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.Series([<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1.0</span>], </span><br><span class="line">                 index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]) </span><br><span class="line">data </span><br><span class="line"></span><br><span class="line"><span class="comment">#Out: a 0.25 </span></span><br><span class="line"><span class="comment">#	  b 0.50 </span></span><br><span class="line"><span class="comment">#	  c 0.75 </span></span><br><span class="line"><span class="comment">#	  d 1.00 </span></span><br><span class="line"><span class="comment">#	  dtype: float64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#can be got like before</span></span><br><span class="line">data[<span class="string">'b'</span>] </span><br><span class="line"><span class="comment">#Out: 0.5</span></span><br></pre></td></tr></table></figure>

<p>the index can be whatever you like:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.Series([<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1.0</span>], </span><br><span class="line">                 index=[<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>]) </span><br><span class="line">data </span><br><span class="line"><span class="comment">#Out: 2 0.25 </span></span><br><span class="line"><span class="comment">#	  5 0.50 </span></span><br><span class="line"><span class="comment">#	  3 0.75 </span></span><br><span class="line"><span class="comment">#	  7 1.00 </span></span><br><span class="line"><span class="comment">#	  dtype: float64 </span></span><br><span class="line"></span><br><span class="line">data[<span class="number">5</span>] </span><br><span class="line"><span class="comment">#Out: 0.5</span></span><br></pre></td></tr></table></figure>

<p>it can be considered as a kind of dictionary:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">population_dict = &#123;<span class="string">'California'</span>: <span class="number">38332521</span>, </span><br><span class="line">                   <span class="string">'Texas'</span>: <span class="number">26448193</span>, </span><br><span class="line">                   <span class="string">'New York'</span>: <span class="number">19651127</span>, </span><br><span class="line">                   <span class="string">'Florida'</span>: <span class="number">19552860</span>, </span><br><span class="line">                   <span class="string">'Illinois'</span>: <span class="number">12882135</span>&#125; </span><br><span class="line">population = pd.Series(population_dict) </span><br><span class="line">population</span><br></pre></td></tr></table></figure>

<p>California   38332521 </p>
<p> Florida       19552860 </p>
<p> Illinois        12882135 </p>
<p> New York  19651127 </p>
<p> Texas         26448193 </p>
<p> dtype: int64</p>
<p>it can also be selected:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">population[<span class="string">'California'</span>] </span><br><span class="line"><span class="comment">#Out: 38332521</span></span><br><span class="line"></span><br><span class="line">population[<span class="string">'California'</span>:<span class="string">'Illinois'</span>]</span><br></pre></td></tr></table></figure>

<p>California  38332521<br>Florida      19552860<br>Illinois       12882135<br>dtype: int64</p>
<h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">area_dict = &#123;<span class="string">'California'</span>: <span class="number">423967</span>, <span class="string">'Texas'</span>: <span class="number">695662</span>, <span class="string">'New York'</span>: <span class="number">141297</span>, </span><br><span class="line">             <span class="string">'Florida'</span>: <span class="number">170312</span>, <span class="string">'Illinois'</span>: <span class="number">149995</span>&#125; </span><br><span class="line">area = pd.Series(area_dict) </span><br><span class="line">area</span><br></pre></td></tr></table></figure>

<p>California 423967 </p>
<p>Florida 170312 </p>
<p>Illinois 149995 </p>
<p>New York 141297 </p>
<p>Texas 695662 </p>
<p>dtype: int64</p>
<p>combine it with the former one:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">states = pd.DataFrame(&#123;<span class="string">'population'</span>: population, </span><br><span class="line">                       <span class="string">'area'</span>: area&#125;) </span><br><span class="line">states</span><br></pre></td></tr></table></figure>

<p>​                       area      population<br>California   423967    38332521<br>Florida       170312    19552860<br>Illinois        149995    12882135<br>New York  141297    19651127<br>Texas         695662    26448193</p>
<h3 id="index-and-column"><a href="#index-and-column" class="headerlink" title="index and column"></a>index and column</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">states.index </span><br><span class="line"><span class="comment">#Out: Index(['California', 'Florida', 'Illinois', 'New York', 'Texas'], dtype='object')</span></span><br><span class="line"></span><br><span class="line">states.columns </span><br><span class="line"><span class="comment">#Out: Index(['area', 'population'], dtype='object')</span></span><br></pre></td></tr></table></figure>

<p> it can also be considered as dictionary:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">states[<span class="string">'area'</span>]</span><br></pre></td></tr></table></figure>

<p>California   423967<br>Florida        170312<br>Illinois         149995<br>New York   141297<br>Texas          695662<br>Name: area, dtype: int64</p>
<h3 id="create-DataFrame"><a href="#create-DataFrame" class="headerlink" title="create DataFrame:"></a>create DataFrame:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.DataFrame(population, columns=[<span class="string">'population'</span>])</span><br></pre></td></tr></table></figure>

<p>​                       population<br> California     38332521<br> Florida         19552860<br> Illinois          12882135<br> New York    19651127<br> Texas           26448193</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [&#123;<span class="string">'a'</span>: i, <span class="string">'b'</span>: <span class="number">2</span> * i&#125; </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)] </span><br><span class="line">pd.DataFrame(data)</span><br></pre></td></tr></table></figure>

<p>​    a b </p>
<p> 0 0 0 </p>
<p> 1 1 2 </p>
<p> 2 2 4</p>
<p>when combine two column, if some values doesn’t exist, it will show NaN</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.DataFrame([&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;, &#123;<span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">4</span>&#125;])</span><br></pre></td></tr></table></figure>

<p>​      a       b     c </p>
<p>0 1.0      2     NaN<br>1 NaN    3     4.0</p>
<p>it can also be made up of series:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.DataFrame(&#123;<span class="string">'population'</span>: population, <span class="string">'area'</span>: area&#125;)</span><br></pre></td></tr></table></figure>

<pre><code>area      population </code></pre><p>​                       area      population </p>
<p>California   423967    38332521<br>Florida       170312    19552860<br>Illinois        149995    12882135<br>New York  141297    19651127<br>Texas         695662    26448193</p>
<p>if there is a two dimension array, it can also be made to DataFrame</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.DataFrame(np.random.rand(<span class="number">3</span>, <span class="number">2</span>), </span><br><span class="line">             columns=[<span class="string">'foo'</span>, <span class="string">'bar'</span>], </span><br><span class="line">             index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br></pre></td></tr></table></figure>

<p>​        foo         bar<br> a 0.865257     0.213169<br> b 0.442759     0.108267<br> c 0.047110     0.905718</p>
<h3 id="Index函数"><a href="#Index函数" class="headerlink" title="Index函数"></a>Index函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ind = pd.Index([<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>]) </span><br><span class="line">ind </span><br><span class="line"><span class="comment">#Out: Int64Index([2, 3, 5, 7, 11], dtype='int64')</span></span><br><span class="line"></span><br><span class="line">ind[<span class="number">1</span>] </span><br><span class="line"><span class="comment">#Out: 3 </span></span><br><span class="line"></span><br><span class="line">ind[::<span class="number">2</span>] </span><br><span class="line"><span class="comment">#Out: Int64Index([2, 5, 11], dtype='int64')</span></span><br><span class="line"></span><br><span class="line">print(ind.size, ind.shape, ind.ndim, ind.dtype) </span><br><span class="line"><span class="comment">#out:5 (5,) 1 int64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#but it can't be change</span></span><br><span class="line">ind[<span class="number">1</span>] = <span class="number">0</span> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">--------------------------------------------------------------------------- </span></span><br><span class="line"><span class="string">TypeError Traceback (most recent call last) </span></span><br><span class="line"><span class="string">&lt;ipython-input-34-40e631c82e8a&gt; in &lt;module&gt;() </span></span><br><span class="line"><span class="string">----&gt; 1 ind[1] = 0 </span></span><br><span class="line"><span class="string">/Users/jakevdp/anaconda/lib/python3.5/site-packages/pandas/indexes/base.py ... </span></span><br><span class="line"><span class="string"> 1243 </span></span><br><span class="line"><span class="string"> 1244 def __setitem__(self, key, value): </span></span><br><span class="line"><span class="string">-&gt; 1245 raise TypeError("Index does not support mutable operations") </span></span><br><span class="line"><span class="string"> 1246 </span></span><br><span class="line"><span class="string"> 1247 def __getitem__(self, key): </span></span><br><span class="line"><span class="string">TypeError: Index does not support mutable operations</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="join-two-DataFrame"><a href="#join-two-DataFrame" class="headerlink" title="join two DataFrame"></a>join two DataFrame</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">indA = pd.Index([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]) </span><br><span class="line">indB = pd.Index([<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>]) </span><br><span class="line">indA &amp; indB <span class="comment"># 交集 and</span></span><br><span class="line"><span class="comment">#Out: Int64Index([3, 5, 7], dtype='int64') </span></span><br><span class="line"></span><br><span class="line">indA | indB <span class="comment"># 并集 or</span></span><br><span class="line"><span class="comment">#Out: Int64Index([1, 2, 3, 5, 7, 9, 11], dtype='int64') </span></span><br><span class="line"></span><br><span class="line">indA ^ indB <span class="comment"># 异或 nor</span></span><br><span class="line"><span class="comment">#Out: Int64Index([1, 2, 9, 11], dtype='int64')</span></span><br></pre></td></tr></table></figure>



<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><h3 id="series"><a href="#series" class="headerlink" title="series"></a>series</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.Series([<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1.0</span>], </span><br><span class="line">                 index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]) </span><br><span class="line">data </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"> a 0.25 </span></span><br><span class="line"><span class="string"> b 0.50 </span></span><br><span class="line"><span class="string"> c 0.75 </span></span><br><span class="line"><span class="string"> d 1.00 </span></span><br><span class="line"><span class="string"> dtype: float64 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">'b'</span>] </span><br><span class="line"><span class="comment">#Out: 0.5</span></span><br><span class="line"></span><br><span class="line"><span class="string">'a'</span> <span class="keyword">in</span> data </span><br><span class="line"><span class="comment">#Out: True </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#it can be selected as the way of dictionary</span></span><br><span class="line">data.keys() </span><br><span class="line"><span class="comment">#Out: Index(['a', 'b', 'c', 'd'], dtype='object') </span></span><br><span class="line"></span><br><span class="line">list(data.items()) </span><br><span class="line"><span class="comment">#Out: [('a', 0.25), ('b', 0.5), ('c', 0.75), ('d', 1.0)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#add items to series(the same as dictionary)</span></span><br><span class="line">data[<span class="string">'e'</span>] = <span class="number">1.25</span> </span><br><span class="line"> data </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"> a 0.25 </span></span><br><span class="line"><span class="string"> b 0.50 </span></span><br><span class="line"><span class="string"> c 0.75 </span></span><br><span class="line"><span class="string"> d 1.00 </span></span><br><span class="line"><span class="string"> e 1.25 </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>use series the same as array:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将显式索引作为切片</span></span><br><span class="line">data[<span class="string">'a'</span>:<span class="string">'c'</span>] </span><br><span class="line"><span class="comment">#Out: a 0.25 </span></span><br><span class="line"><span class="comment">#     b 0.50 </span></span><br><span class="line"><span class="comment">#	  c 0.75 </span></span><br><span class="line"><span class="comment">#	  dtype: float64 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将隐式整数索引作为切片</span></span><br><span class="line">data[<span class="number">0</span>:<span class="number">2</span>] </span><br><span class="line"><span class="comment">#Out: a 0.25 </span></span><br><span class="line"><span class="comment">#	  b 0.50 </span></span><br><span class="line"><span class="comment">#	  dtype: float64 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 掩码</span></span><br><span class="line">data[(data &gt; <span class="number">0.3</span>) &amp; (data &lt; <span class="number">0.8</span>)] </span><br><span class="line"><span class="comment">#Out: b 0.50 </span></span><br><span class="line"><span class="comment">#	  c 0.75 </span></span><br><span class="line"><span class="comment">#	  dtype: float64 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 花哨的索引</span></span><br><span class="line">data[[<span class="string">'a'</span>, <span class="string">'e'</span>]] </span><br><span class="line"><span class="comment">#Out: a 0.25 </span></span><br><span class="line"><span class="comment">#	  e 1.25 </span></span><br><span class="line"><span class="comment">#	  dtype: float64</span></span><br></pre></td></tr></table></figure>



<h4 id="loc、iloc-and-ix"><a href="#loc、iloc-and-ix" class="headerlink" title="loc、iloc and ix"></a><code>loc</code>、<code>iloc</code> and <code>ix</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.Series([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], index=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]) </span><br><span class="line">data </span><br><span class="line"><span class="comment">#Out: 1 a </span></span><br><span class="line"><span class="comment">#     3 b </span></span><br><span class="line"><span class="comment">#	  5 c </span></span><br><span class="line"><span class="comment">#	  dtype: object</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#we can get the value through the index we set</span></span><br><span class="line"><span class="comment"># 取值操作是显式索引</span></span><br><span class="line">data[<span class="number">1</span>] </span><br><span class="line"><span class="comment">#Out: 'a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#we can select several items through the index it has oraginally</span></span><br><span class="line"><span class="comment"># 切片操作是隐式索引</span></span><br><span class="line">data[<span class="number">1</span>:<span class="number">3</span>] </span><br><span class="line"><span class="comment">#Out: 3 b </span></span><br><span class="line"><span class="comment">#	  5 c </span></span><br><span class="line"><span class="comment">#	  dtype: object</span></span><br></pre></td></tr></table></figure>

<p>it is difficult to remember, so we use loc:</p>
<p>it can be used to select through the index you set.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.loc[<span class="number">1</span>] </span><br><span class="line"><span class="comment">#Out: 'a' </span></span><br><span class="line"></span><br><span class="line">data.loc[<span class="number">1</span>:<span class="number">3</span>] </span><br><span class="line"><span class="comment">#Out: 1 a </span></span><br><span class="line"><span class="comment">#	  3 b </span></span><br><span class="line"><span class="comment">#	  dtype: object</span></span><br></pre></td></tr></table></figure>

<p>in the contrast, iloc can be used to select through the index it has originally.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.iloc[<span class="number">1</span>] </span><br><span class="line"><span class="comment">#Out: 'b' </span></span><br><span class="line"></span><br><span class="line">data.iloc[<span class="number">1</span>:<span class="number">3</span>] </span><br><span class="line"><span class="comment">#Out: 3 b </span></span><br><span class="line"><span class="comment">#	  5 c </span></span><br><span class="line"><span class="comment">#	  dtype: object</span></span><br></pre></td></tr></table></figure>

<p>ix is the combination of the two, it will be mentioned later.</p>
<h3 id="DataFrame-1"><a href="#DataFrame-1" class="headerlink" title="DataFrame"></a>DataFrame</h3><p><strong>considered as dictionary</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">area = pd.Series(&#123;<span class="string">'California'</span>: <span class="number">423967</span>, <span class="string">'Texas'</span>: <span class="number">695662</span>, </span><br><span class="line">                  <span class="string">'New York'</span>: <span class="number">141297</span>, <span class="string">'Florida'</span>: <span class="number">170312</span>, </span><br><span class="line">                  <span class="string">'Illinois'</span>: <span class="number">149995</span>&#125;) </span><br><span class="line">pop = pd.Series(&#123;<span class="string">'California'</span>: <span class="number">38332521</span>, <span class="string">'Texas'</span>: <span class="number">26448193</span>, </span><br><span class="line">                 <span class="string">'New York'</span>: <span class="number">19651127</span>, <span class="string">'Florida'</span>: <span class="number">19552860</span>, </span><br><span class="line">                 <span class="string">'Illinois'</span>: <span class="number">12882135</span>&#125;) </span><br><span class="line">data = pd.DataFrame(&#123;<span class="string">'area'</span>:area, <span class="string">'pop'</span>:pop&#125;) </span><br><span class="line">data</span><br></pre></td></tr></table></figure>

<p>​                       area      population </p>
<p>California   423967    38332521<br>Florida       170312    19552860<br>Illinois        149995    12882135<br>New York  141297    19651127<br>Texas         695662    26448193</p>
<p><strong>attribute-style</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">'area'</span>]</span><br></pre></td></tr></table></figure>

<p>​                    area</p>
<p>California   423967<br>Florida        170312<br>Illinois         149995<br>New York   141297<br>Texas          695662<br>Name: area, dtype: int64</p>
<p><strong>they are the same:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.area <span class="keyword">is</span> data[<span class="string">'area'</span>] </span><br><span class="line"><span class="comment">#Out: True</span></span><br></pre></td></tr></table></figure>

<p>but, data.area, this form can’t be used in some condition: if it can’t be a valuable’s name</p>
<h4 id="calculate-as-dictionary"><a href="#calculate-as-dictionary" class="headerlink" title="calculate as dictionary"></a>calculate as dictionary</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">'density'</span>] = data[<span class="string">'pop'</span>] / data[<span class="string">'area'</span>] </span><br><span class="line">data </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:              area  pop     density </span></span><br><span class="line"><span class="string">	 California 423967 38332521 90.413926 </span></span><br><span class="line"><span class="string">	 Florida    170312 19552860 114.806121 </span></span><br><span class="line"><span class="string">	 Illinois   149995 12882135 85.883763 </span></span><br><span class="line"><span class="string">	 New York   141297 19651127 139.076746 </span></span><br><span class="line"><span class="string">	 Texas      695662 26448193 38.018740</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">data.values </span><br><span class="line"><span class="comment">#Out: array([[ 4.23967000e+05, 3.83325210e+07, 9.04139261e+01], </span></span><br><span class="line"><span class="comment"># 			 [ 1.70312000e+05, 1.95528600e+07, 1.14806121e+02], </span></span><br><span class="line"><span class="comment"># 			 [ 1.49995000e+05, 1.28821350e+07, 8.58837628e+01], </span></span><br><span class="line"><span class="comment"># 			 [ 1.41297000e+05, 1.96511270e+07, 1.39076746e+02], </span></span><br><span class="line"><span class="comment"># 			 [ 6.95662000e+05, 2.64481930e+07, 3.80187404e+01]])</span></span><br></pre></td></tr></table></figure>

<p>reshape</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.T</span><br></pre></td></tr></table></figure>

<p>​                California             Florida             Illinois                 New York         Texas<br>area        4.239670e+05 1.703120e+05 1.499950e+05 1.412970e+05 6.956620e+05<br>pop         3.833252e+07 1.955286e+07 1.288214e+07 1.965113e+07 2.644819e+07<br>density   9.041393e+01 1.148061e+02 8.588376e+01 1.390767e+02 3.801874e+01</p>
<p>get the whole index or column：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.values[<span class="number">0</span>] </span><br><span class="line"><span class="comment">#Out: array([ 4.23967000e+05, 3.83325210e+07, 9.04139261e+01])</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">'area'</span>]</span><br></pre></td></tr></table></figure>

<p>​                    area</p>
<p>California   423967<br>Florida        170312<br>Illinois         149995<br>New York   141297<br>Texas          695662<br>Name: area, dtype: int64</p>
<p>loc、iloc and ix</p>
<p>the same as series</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.iloc[:<span class="number">3</span>, :<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<p>​                        area             pop<br> California     423967     38332521<br> Florida         170312     19552860<br> Illinois         149995      12882135 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.loc[:<span class="string">'Illinois'</span>, :<span class="string">'pop'</span>]</span><br></pre></td></tr></table></figure>

<p>​                         area         pop<br> California     423967     38332521<br> Florida         170312     19552860<br> Illinois          149995     12882135</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ix can mix them,but readers may not distiguish</span></span><br><span class="line">data.ix[:<span class="number">3</span>, :<span class="string">'pop'</span>]</span><br></pre></td></tr></table></figure>

<p>​                         area         pop<br> California     423967     38332521<br> Florida         170312     19552860<br> Illinois         149995      12882135</p>
<p>advanced way</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.loc[data.density &gt; <span class="number">100</span>, [<span class="string">'pop'</span>, <span class="string">'density'</span>]]</span><br></pre></td></tr></table></figure>

<p>​                         pop             density<br> Florida          19552860     114.806121<br> New York     19651127     139.076746</p>
<p>change the value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.iloc[<span class="number">0</span>, <span class="number">2</span>] = <span class="number">90</span> </span><br><span class="line">data</span><br></pre></td></tr></table></figure>

<p>​                            area  pop     density<br>​     California 423967 38332521 <strong>90.000000</strong><br>​     Florida      170312 19552860 114.806121<br>​     Illinois       149995 12882135 85.883763<br>​     New York 141297 19651127 139.076746<br>​     Texas        695662 26448193 38.018740</p>
<h4 id="other-ways"><a href="#other-ways" class="headerlink" title="other ways"></a>other ways</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#slice</span></span><br><span class="line">data[<span class="string">'Florida'</span>:<span class="string">'Illinois'</span>]</span><br></pre></td></tr></table></figure>

<p>​                   area   pop          density<br> Florida 170312 19552860 114.806121<br> Illinois  149995 12882135 85.883763</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#use the index</span></span><br><span class="line">data[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<pre><code>area     pop             density </code></pre><p> Florida 170312 19552860 114.806121<br> Illinois  149995 12882135 85.883763</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mask</span></span><br><span class="line">data[data.density &gt; <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<p>​                     area         pop         density<br> Florida      170312 19552860 114.806121<br> New York 141297 19651127 139.076746</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas2</title>
    <url>/2020/07/26/pandas2/</url>
    <content><![CDATA[<h1 id="Pandas-Introduction-2"><a href="#Pandas-Introduction-2" class="headerlink" title="Pandas Introduction 2"></a>Pandas Introduction 2</h1><h2 id="indexes"><a href="#indexes" class="headerlink" title="indexes"></a>indexes</h2><h3 id="keep-the-indexes"><a href="#keep-the-indexes" class="headerlink" title="keep the indexes:"></a>keep the indexes:</h3><p>when making difficult calculations,it will keep its indexes.</p>
<p>first create a series and a dataframe:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">rng = np.random.RandomState(<span class="number">42</span>) </span><br><span class="line">ser = pd.Series(rng.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>)) <span class="comment">#select 4 numbers within 0 to 10</span></span><br><span class="line">ser </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string"> 0 6 </span></span><br><span class="line"><span class="string"> 1 3 </span></span><br><span class="line"><span class="string"> 2 7 </span></span><br><span class="line"><span class="string"> 3 4 </span></span><br><span class="line"><span class="string"> dtype: int64 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(rng.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">4</span>)), </span><br><span class="line">columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>]) </span><br><span class="line">df </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out: </span></span><br><span class="line"><span class="string">   A B C D </span></span><br><span class="line"><span class="string"> 0 6 9 2 6 </span></span><br><span class="line"><span class="string"> 1 7 4 3 7 </span></span><br><span class="line"><span class="string"> 2 7 2 5 4</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>e to the x:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.exp(ser) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string"> 0 403.428793 </span></span><br><span class="line"><span class="string"> 1 20.085537 </span></span><br><span class="line"><span class="string"> 2 1096.633158 </span></span><br><span class="line"><span class="string"> 3 54.598150 </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>or more complex one:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.sin(df * np.pi / <span class="number">4</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out[5]: </span></span><br><span class="line"><span class="string">	A 			B			 C 			D </span></span><br><span class="line"><span class="string"> 0 -1.000000 7.071068e-01 1.000000 -1.000000e+00 </span></span><br><span class="line"><span class="string"> 1 -0.707107 1.224647e-16 0.707107 -7.071068e-01 </span></span><br><span class="line"><span class="string"> 2 -0.707107 1.000000e+00 -0.707107 1.224647e-16</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="match-the-index"><a href="#match-the-index" class="headerlink" title="match the index:"></a>match the index:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">area = pd.Series(&#123;<span class="string">'Alaska'</span>: <span class="number">1723337</span>, <span class="string">'Texas'</span>: <span class="number">695662</span>, </span><br><span class="line">                  <span class="string">'California'</span>: <span class="number">423967</span>&#125;, name=<span class="string">'area'</span>) </span><br><span class="line">population = pd.Series(&#123;<span class="string">'California'</span>: <span class="number">38332521</span>, <span class="string">'Texas'</span>: <span class="number">26448193</span>, </span><br><span class="line">                        <span class="string">'New York'</span>: <span class="number">19651127</span>&#125;, name=<span class="string">'population'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#calculate the density:</span></span><br><span class="line">population / area </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out[7]: </span></span><br><span class="line"><span class="string"> Alaska		 NaN </span></span><br><span class="line"><span class="string"> California  90.413926 </span></span><br><span class="line"><span class="string"> New York 	 NaN </span></span><br><span class="line"><span class="string"> Texas 		 38.018740 </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>their indexes:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">area.index | population.index </span><br><span class="line"><span class="comment">#Out: Index(['Alaska', 'California', 'New York', 'Texas'], dtype='object')</span></span><br></pre></td></tr></table></figure>

<p>if there is no value, it will show NaN</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = pd.Series([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>], index=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]) </span><br><span class="line">B = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], index=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) </span><br><span class="line">A + B </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> 0 NaN </span></span><br><span class="line"><span class="string"> 1 5.0 </span></span><br><span class="line"><span class="string"> 2 9.0 </span></span><br><span class="line"><span class="string"> 3 NaN </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>using this, we can fill the values that don’t exist with 0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.add(B, fill_value=<span class="number">0</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> 0 2.0 </span></span><br><span class="line"><span class="string"> 1 5.0 </span></span><br><span class="line"><span class="string"> 2 9.0 </span></span><br><span class="line"><span class="string"> 3 5.0 </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>when comes to DataFrame:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = pd.DataFrame(rng.randint(<span class="number">0</span>, <span class="number">20</span>, (<span class="number">2</span>, <span class="number">2</span>)), </span><br><span class="line">columns=list(<span class="string">'AB'</span>)) </span><br><span class="line">A </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">   A B </span></span><br><span class="line"><span class="string"> 0 1 11 </span></span><br><span class="line"><span class="string"> 1 5 1 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">B = pd.DataFrame(rng.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">3</span>)), columns=list(<span class="string">'BAC'</span>)) </span><br><span class="line">B </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">   B A C </span></span><br><span class="line"><span class="string"> 0 4 0 9 </span></span><br><span class="line"><span class="string"> 1 5 8 0 </span></span><br><span class="line"><span class="string"> 2 9 2 6 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">A + B </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string">    A   B   C </span></span><br><span class="line"><span class="string"> 0 1.0  15.0 NaN </span></span><br><span class="line"><span class="string"> 1 13.0 6.0  NaN </span></span><br><span class="line"><span class="string"> 2 NaN  NaN  NaN</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>use the mean to fill NaN</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fill = A.stack().mean() </span><br><span class="line">A.add(B, fill_value=fill) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">    A   B   C </span></span><br><span class="line"><span class="string"> 0 1.0 15.0 13.5 </span></span><br><span class="line"><span class="string"> 1 13.0 6.0 4.5 </span></span><br><span class="line"><span class="string"> 2 6.5 13.5 10.5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Python运算符</th>
<th>Pandas方法</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>add()</td>
</tr>
<tr>
<td>-</td>
<td>sub()、subtract()</td>
</tr>
<tr>
<td>*</td>
<td>mul()、multiply()</td>
</tr>
<tr>
<td>/</td>
<td>truediv()、div()、divide()</td>
</tr>
<tr>
<td>//</td>
<td>floordiv()</td>
</tr>
<tr>
<td>%</td>
<td>mod()</td>
</tr>
<tr>
<td>**</td>
<td>pow()</td>
</tr>
</tbody></table>
<h3 id="calculation"><a href="#calculation" class="headerlink" title="calculation"></a>calculation</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = rng.randint(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">4</span>)) </span><br><span class="line">A </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">array([[3, 8, 2, 4], </span></span><br><span class="line"><span class="string">	  [2, 6, 4, 8], </span></span><br><span class="line"><span class="string">	  [6, 1, 3, 8]]) </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">A - A[<span class="number">0</span>] </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">array([[ 0, 0, 0, 0], </span></span><br><span class="line"><span class="string">	  [-1, -2, 2, 4], </span></span><br><span class="line"><span class="string">	  [ 3, -7, 1, 4]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>DataFrame id the same:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(A, columns=list(<span class="string">'QRST'</span>)) </span><br><span class="line">df - df.iloc[<span class="number">0</span>] </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string">    Q R S T </span></span><br><span class="line"><span class="string"> 0  0  0 0 0 </span></span><br><span class="line"><span class="string"> 1 -1 -2 2 4 </span></span><br><span class="line"><span class="string"> 2  3 -7 1 4</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>change to columns:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.subtract(df[<span class="string">'R'</span>], axis=<span class="number">0</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string">    Q R S T </span></span><br><span class="line"><span class="string"> 0 -5 0 -6 -4 </span></span><br><span class="line"><span class="string"> 1 -4 0 -2  2 </span></span><br><span class="line"><span class="string"> 2  5 0  2  7</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">halfrow = df.iloc[<span class="number">0</span>, ::<span class="number">2</span>] </span><br><span class="line">halfrow </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string"> Q 3 </span></span><br><span class="line"><span class="string"> S 2 </span></span><br><span class="line"><span class="string">Name: 0, dtype: int64 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">df - halfrow </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">    Q   R   S   T   </span></span><br><span class="line"><span class="string"> 0 0.0 NaN 0.0 NaN </span></span><br><span class="line"><span class="string"> 1 -1.0 NaN 2.0 NaN </span></span><br><span class="line"><span class="string"> 2 3.0 NaN 1.0 NaN</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>



<h2 id="deal-with-NaN"><a href="#deal-with-NaN" class="headerlink" title="deal with NaN"></a>deal with NaN</h2><h3 id="what-is-NaN"><a href="#what-is-NaN" class="headerlink" title="what is NaN"></a>what is NaN</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vals1 = np.array([<span class="number">1</span>, <span class="literal">None</span>, <span class="number">3</span>, <span class="number">4</span>]) </span><br><span class="line">vals1 </span><br><span class="line"><span class="comment">#Out: array([1, None, 3, 4], dtype=object)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vals1.sum() </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">TypeError Traceback (most recent call last) </span></span><br><span class="line"><span class="string">&lt;ipython-input-4-749fd8ae6030&gt; in &lt;module&gt;() </span></span><br><span class="line"><span class="string">----&gt; 1 vals1.sum() </span></span><br><span class="line"><span class="string">/Users/jakevdp/anaconda/lib/python3.5/site-packages/numpy/core/_methods.py ... </span></span><br><span class="line"><span class="string"> 30 </span></span><br><span class="line"><span class="string"> 31 def _sum(a, axis=None, dtype=None, out=None, keepdims=False): </span></span><br><span class="line"><span class="string">---&gt; 32 return umr_sum(a, axis, dtype, out, keepdims) </span></span><br><span class="line"><span class="string"> 33 </span></span><br><span class="line"><span class="string"> 34 def _prod(a, axis=None, dtype=None, out=None, keepdims=False): </span></span><br><span class="line"><span class="string">TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>None can’t be add to integers</p>
</blockquote>
<p>NaN: not a number</p>
<p>It can be calculated with integer:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + np.nan </span><br><span class="line"><span class="comment">#Out: nan </span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> * np.nan </span><br><span class="line"><span class="comment">#Out: nan</span></span><br></pre></td></tr></table></figure>

<p>The result will always be nan.</p>
<p>including the maximum and minimum:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vals2 = np.array([<span class="number">1</span>, np.nan, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">vals2.sum(), vals2.min(), vals2.max() </span><br><span class="line"><span class="comment">#Out: (nan, nan, nan)</span></span><br></pre></td></tr></table></figure>

<p>delete the nan:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.nansum(vals2), np.nanmin(vals2), np.nanmax(vals2) </span><br><span class="line"><span class="comment">#Out: (8.0, 1.0, 4.0)</span></span><br></pre></td></tr></table></figure>

<p>In pandas, None=NaN:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.Series([<span class="number">1</span>, np.nan, <span class="number">2</span>, <span class="literal">None</span>]) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string"> 0 1.0 </span></span><br><span class="line"><span class="string"> 1 NaN </span></span><br><span class="line"><span class="string"> 2 2.0 </span></span><br><span class="line"><span class="string"> 3 NaN </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>If there is a NaN the type will be changed to float:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = pd.Series(range(<span class="number">2</span>), dtype=int) </span><br><span class="line">x </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string"> 0 0 </span></span><br><span class="line"><span class="string"> 1 1 </span></span><br><span class="line"><span class="string"> dtype: int64 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">x[<span class="number">0</span>] = <span class="literal">None</span> </span><br><span class="line">x </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string"> 0 NaN </span></span><br><span class="line"><span class="string"> 1 1.0 </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>类型</th>
<th>缺失值转换规则</th>
<th>NA标签值</th>
</tr>
</thead>
<tbody><tr>
<td>floating 浮点型</td>
<td>无变化</td>
<td>np.nan</td>
</tr>
<tr>
<td>object 对象类型</td>
<td>无变化</td>
<td>None 或 np.nan</td>
</tr>
<tr>
<td>integer 整数类型</td>
<td>强制转换为 float64</td>
<td>np.nan</td>
</tr>
<tr>
<td>boolean 布尔类型</td>
<td>强制转换为 object</td>
<td>None 或 np.nan</td>
</tr>
</tbody></table>
<h3 id="whether-there-is-NaN-delete-NaN"><a href="#whether-there-is-NaN-delete-NaN" class="headerlink" title="whether there is NaN/delete NaN"></a>whether there is NaN/delete NaN</h3><p>.isnull():</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.Series([<span class="number">1</span>, np.nan, <span class="string">'hello'</span>, <span class="literal">None</span>]) </span><br><span class="line">data.isnull()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> 0 False </span></span><br><span class="line"><span class="string"> 1 True </span></span><br><span class="line"><span class="string"> 2 False </span></span><br><span class="line"><span class="string"> 3 True </span></span><br><span class="line"><span class="string"> dtype: bool</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>.notnull():</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[data.notnull()] </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> 0 1 </span></span><br><span class="line"><span class="string"> 2 hello </span></span><br><span class="line"><span class="string"> dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>.dropna(): (it will drop the whole index in DataFrame)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.dropna() </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> 0 1 </span></span><br><span class="line"><span class="string"> 2 hello </span></span><br><span class="line"><span class="string"> dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>change the direction it delete in DataFrame:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="number">3</span>] = np.nan </span><br><span class="line">df </span><br><span class="line"><span class="string">'''''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string">    0   1  2  3 </span></span><br><span class="line"><span class="string"> 0 1.0 NaN 2 NaN </span></span><br><span class="line"><span class="string"> 1 2.0 3.0 5 NaN </span></span><br><span class="line"><span class="string"> 2 NaN 4.0 6 NaN </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">df.dropna(axis=<span class="string">'columns'</span>, how=<span class="string">'all'</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string">    0   1  2 </span></span><br><span class="line"><span class="string"> 0 1.0 NaN 2 </span></span><br><span class="line"><span class="string"> 1 2.0 3.0 5 </span></span><br><span class="line"><span class="string"> 2 NaN 4.0 6</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">df.dropna(axis=<span class="string">'rows'</span>, thresh=<span class="number">3</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">     0 1   2 3 </span></span><br><span class="line"><span class="string"> 1 2.0 3.0 5 NaN</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="fill-the-NaN"><a href="#fill-the-NaN" class="headerlink" title="fill the NaN"></a>fill the NaN</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.Series([<span class="number">1</span>, np.nan, <span class="number">2</span>, <span class="literal">None</span>, <span class="number">3</span>], index=list(<span class="string">'abcde'</span>)) </span><br><span class="line">data </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> a 1.0 </span></span><br><span class="line"><span class="string"> b NaN </span></span><br><span class="line"><span class="string"> c 2.0 </span></span><br><span class="line"><span class="string"> d NaN </span></span><br><span class="line"><span class="string"> e 3.0 </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>.fillna():</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.fillna(<span class="number">0</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> a 1.0 </span></span><br><span class="line"><span class="string"> b 0.0 </span></span><br><span class="line"><span class="string"> c 2.0 </span></span><br><span class="line"><span class="string"> d 0.0 </span></span><br><span class="line"><span class="string"> e 3.0 </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">data.fillna(method=<span class="string">'ffill'</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string"> a 1.0 </span></span><br><span class="line"><span class="string"> b 1.0 </span></span><br><span class="line"><span class="string"> c 2.0 </span></span><br><span class="line"><span class="string"> d 2.0 </span></span><br><span class="line"><span class="string"> e 3.0 </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">data.fillna(method=<span class="string">'bfill'</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: a 1.0 </span></span><br><span class="line"><span class="string"> b 2.0 </span></span><br><span class="line"><span class="string"> c 2.0 </span></span><br><span class="line"><span class="string"> d 3.0 </span></span><br><span class="line"><span class="string"> e 3.0 </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>  It’s similar in DataFrame:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string">     0  1  2  3 </span></span><br><span class="line"><span class="string"> 0 1.0 NaN 2 NaN </span></span><br><span class="line"><span class="string"> 1 2.0 3.0 5 NaN </span></span><br><span class="line"><span class="string"> 2 NaN 4.0 6 NaN </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">df.fillna(method=<span class="string">'ffill'</span>, axis=<span class="number">1</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">    0  1   2   3 </span></span><br><span class="line"><span class="string"> 0 1.0 1.0 2.0 2.0 </span></span><br><span class="line"><span class="string"> 1 2.0 3.0 5.0 5.0 </span></span><br><span class="line"><span class="string"> 2 NaN 4.0 6.0 6.0</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>



<h2 id="multilevel-index"><a href="#multilevel-index" class="headerlink" title="multilevel index"></a>multilevel index</h2><p>reindex</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index = [(<span class="string">'California'</span>, <span class="number">2000</span>), (<span class="string">'California'</span>, <span class="number">2010</span>), </span><br><span class="line">         (<span class="string">'New York'</span>, <span class="number">2000</span>), (<span class="string">'New York'</span>, <span class="number">2010</span>), </span><br><span class="line">         (<span class="string">'Texas'</span>, <span class="number">2000</span>), (<span class="string">'Texas'</span>, <span class="number">2010</span>)] </span><br><span class="line">populations = [<span class="number">33871648</span>, <span class="number">37253956</span>, </span><br><span class="line">               <span class="number">18976457</span>, <span class="number">19378102</span>, </span><br><span class="line">               <span class="number">20851820</span>, <span class="number">25145561</span>] </span><br><span class="line"></span><br><span class="line">pop = pd.Series(populations, index=index)</span><br><span class="line">index = pd.MultiIndex.from_tuples(index) </span><br><span class="line">index </span><br><span class="line"><span class="comment">#Out: MultiIndex(levels=[['California', 'New York', 'Texas'], [2000, 2010]], </span></span><br><span class="line"><span class="comment">#                labels=[[0, 0, 1, 1, 2, 2], [0, 1, 0, 1, 0, 1]])</span></span><br><span class="line"></span><br><span class="line">pop = pop.reindex(index)</span><br><span class="line">pop[<span class="string">'California'</span>, <span class="number">2000</span>] </span><br><span class="line"><span class="comment">#Out: 33871648</span></span><br></pre></td></tr></table></figure>

<p>unstack and stack</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop_df = pop.unstack() </span><br><span class="line">pop_df </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">             2000    2010 </span></span><br><span class="line"><span class="string">California 33871648 37253956 </span></span><br><span class="line"><span class="string">New York   18976457 19378102 </span></span><br><span class="line"><span class="string">Texas      20851820 25145561</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">pop_df.stack() </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">California 2000 33871648 </span></span><br><span class="line"><span class="string"> 		   2010 37253956 </span></span><br><span class="line"><span class="string">New York   2000 18976457 </span></span><br><span class="line"><span class="string"> 		   2010 19378102 </span></span><br><span class="line"><span class="string">Texas 	   2000 20851820 </span></span><br><span class="line"><span class="string"> 		   2010 25145561 </span></span><br><span class="line"><span class="string">dtype: int64</span></span><br></pre></td></tr></table></figure>



<h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">4</span>, <span class="number">2</span>), </span><br><span class="line">index=[[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]], </span><br><span class="line">columns=[<span class="string">'data1'</span>, <span class="string">'data2'</span>]) </span><br><span class="line">df </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">    data1       data2 </span></span><br><span class="line"><span class="string"> a 1 0.554233   0.356072 </span></span><br><span class="line"><span class="string">   2 0.925244   0.219474 </span></span><br><span class="line"><span class="string"> b 1 0.441759   0.610054 </span></span><br><span class="line"><span class="string">   2 0.171495   0.886688</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;(<span class="string">'California'</span>, <span class="number">2000</span>): <span class="number">33871648</span>, </span><br><span class="line"> (<span class="string">'California'</span>, <span class="number">2010</span>): <span class="number">37253956</span>, </span><br><span class="line"> (<span class="string">'Texas'</span>, <span class="number">2000</span>): <span class="number">20851820</span>, </span><br><span class="line"> (<span class="string">'Texas'</span>, <span class="number">2010</span>): <span class="number">25145561</span>, </span><br><span class="line"> (<span class="string">'New York'</span>, <span class="number">2000</span>): <span class="number">18976457</span>, </span><br><span class="line"> (<span class="string">'New York'</span>, <span class="number">2010</span>): <span class="number">19378102</span>&#125; </span><br><span class="line">pd.Series(data) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">California 2000 33871648 </span></span><br><span class="line"><span class="string"> 		   2010 37253956 </span></span><br><span class="line"><span class="string">New York   2000 18976457 </span></span><br><span class="line"><span class="string"> 		   2010 19378102 </span></span><br><span class="line"><span class="string">Texas 	   2000 20851820 </span></span><br><span class="line"><span class="string">  		   2010 25145561 </span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>special ways:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.MultiIndex.from_arrays([[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]]) </span><br><span class="line"><span class="comment">#Out: MultiIndex(levels=[['a', 'b'], [1, 2]], </span></span><br><span class="line"><span class="comment">#                labels=[[0, 0, 1, 1], [0, 1, 0, 1]])</span></span><br><span class="line"></span><br><span class="line">pd.MultiIndex.from_tuples([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">2</span>), (<span class="string">'b'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>)]) </span><br><span class="line"><span class="comment">#Out: MultiIndex(levels=[['a', 'b'], [1, 2]], </span></span><br><span class="line"><span class="comment">#                labels=[[0, 0, 1, 1], [0, 1, 0, 1]])</span></span><br><span class="line"></span><br><span class="line">pd.MultiIndex.from_product([[<span class="string">'a'</span>, <span class="string">'b'</span>], [<span class="number">1</span>, <span class="number">2</span>]]) </span><br><span class="line"><span class="comment">#Out: MultiIndex(levels=[['a', 'b'], [1, 2]], </span></span><br><span class="line"><span class="comment">#                labels=[[0, 0, 1, 1], [0, 1, 0, 1]])</span></span><br><span class="line"></span><br><span class="line">pd.MultiIndex(levels=[[<span class="string">'a'</span>, <span class="string">'b'</span>], [<span class="number">1</span>, <span class="number">2</span>]], </span><br><span class="line">              labels=[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]]) </span><br><span class="line"><span class="comment">#Out: MultiIndex(levels=[['a', 'b'], [1, 2]], </span></span><br><span class="line"><span class="comment">#                labels=[[0, 0, 1, 1], [0, 1, 0, 1]])</span></span><br></pre></td></tr></table></figure>

<p>*在创建 Series 或 DataFrame 时，可以将这些对象作为 index 参数，或者通过 reindex 方法更新 Series 或 DataFrame 的索引。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#create names for indexes</span></span><br><span class="line">pop.index.names = [<span class="string">'state'</span>, <span class="string">'year'</span>] </span><br><span class="line">pop</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">	state   year </span></span><br><span class="line"><span class="string"> California 2000 33871648 </span></span><br><span class="line"><span class="string"> 			2010 37253956 </span></span><br><span class="line"><span class="string"> New York   2000 18976457 </span></span><br><span class="line"><span class="string"> 			2010 19378102 </span></span><br><span class="line"><span class="string"> Texas      2000 20851820 </span></span><br><span class="line"><span class="string"> 			2010 25145561 </span></span><br><span class="line"><span class="string"> dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>more than one  multilevel index</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index = pd.MultiIndex.from_product([[<span class="number">2013</span>, <span class="number">2014</span>], [<span class="number">1</span>, <span class="number">2</span>]],names=[<span class="string">'year'</span>, <span class="string">'visit'</span>]) </span><br><span class="line">columns = pd.MultiIndex.from_product([[<span class="string">'Bob'</span>, <span class="string">'Guido'</span>, <span class="string">'Sue'</span>], [<span class="string">'HR'</span>, <span class="string">'Temp'</span>]], </span><br><span class="line">                                     names=[<span class="string">'subject'</span>, <span class="string">'type'</span>]) </span><br><span class="line"><span class="comment"># 模拟数据</span></span><br><span class="line">data = np.round(np.random.randn(<span class="number">4</span>, <span class="number">6</span>), <span class="number">1</span>) <span class="comment">#取小数点后一位</span></span><br><span class="line">data[:, ::<span class="number">2</span>] *= <span class="number">10</span>  <span class="comment">#make the data more different 所有行，0、2、4列扩大10倍</span></span><br><span class="line">data += <span class="number">37</span> </span><br><span class="line"><span class="comment"># 创建DataFrame </span></span><br><span class="line">health_data = pd.DataFrame(data, index=index, columns=columns) </span><br><span class="line">health_data </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> subject    Bob       Guido     Sue </span></span><br><span class="line"><span class="string"> type       HR  Temp  HR  Temp  HR  Temp </span></span><br><span class="line"><span class="string"> year visit </span></span><br><span class="line"><span class="string"> 2013 1     31.0 38.7 32.0 36.7 35.0 37.2 </span></span><br><span class="line"><span class="string">      2 	44.0 37.7 50.0 35.0 29.0 36.7 </span></span><br><span class="line"><span class="string"> 2014 1 	30.0 37.4 39.0 37.8 61.0 36.9 </span></span><br><span class="line"><span class="string">      2 	47.0 37.8 48.0 37.3 51.0 36.5</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">health_data[<span class="string">'Bob'</span>][<span class="string">'HR'</span>]<span class="comment">#now it is series</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">year  visit  </span></span><br><span class="line"><span class="string">2013  1     31.0</span></span><br><span class="line"><span class="string">      2     44.0</span></span><br><span class="line"><span class="string">2014  1     30.0</span></span><br><span class="line"><span class="string">      2     47.0</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="get-the-value"><a href="#get-the-value" class="headerlink" title="get the value"></a>get the value</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">state year </span></span><br><span class="line"><span class="string">California 2000 33871648 </span></span><br><span class="line"><span class="string"> 		   2010 37253956 </span></span><br><span class="line"><span class="string">New York   2000 18976457 </span></span><br><span class="line"><span class="string"> 		   2010 19378102 </span></span><br><span class="line"><span class="string">Texas      2000 20851820 </span></span><br><span class="line"><span class="string">           2010 25145561 </span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>get only one:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop[<span class="string">'California'</span>, <span class="number">2000</span>] </span><br><span class="line"><span class="comment">#Out: 33871648</span></span><br></pre></td></tr></table></figure>

<p>partial indexing:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop[<span class="string">'California'</span>] </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">year </span></span><br><span class="line"><span class="string">2000 33871648 </span></span><br><span class="line"><span class="string">2010 37253956 </span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>slice</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop.loc[<span class="string">'California'</span>:<span class="string">'New York'</span>] </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">state year </span></span><br><span class="line"><span class="string">California 2000 33871648 </span></span><br><span class="line"><span class="string"> 		   2010 37253956 </span></span><br><span class="line"><span class="string">New York   2000 18976457 </span></span><br><span class="line"><span class="string"> 		   2010 19378102 dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#get the data in 2000</span></span><br><span class="line">pop[:, <span class="number">2000</span>] </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">state </span></span><br><span class="line"><span class="string">California  33871648 </span></span><br><span class="line"><span class="string">New York    18976457 </span></span><br><span class="line"><span class="string">Texas 		20851820 </span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>mask</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop[pop &gt; <span class="number">22000000</span>] </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">state      year </span></span><br><span class="line"><span class="string">California 2000 33871648 </span></span><br><span class="line"><span class="string"> 		   2010 37253956 </span></span><br><span class="line"><span class="string">Texas      2010 25145561 dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">pop[[<span class="string">'California'</span>, <span class="string">'Texas'</span>]] </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">state      year </span></span><br><span class="line"><span class="string">California 2000 33871648 </span></span><br><span class="line"><span class="string"> 		   2010 37253956 </span></span><br><span class="line"><span class="string">Texas      2000 20851820 </span></span><br><span class="line"><span class="string">           2010 25145561 </span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">health_data </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> subject    Bob       Guido     Sue </span></span><br><span class="line"><span class="string"> type       HR  Temp  HR  Temp  HR  Temp </span></span><br><span class="line"><span class="string"> year visit </span></span><br><span class="line"><span class="string"> 2013 1     31.0 38.7 32.0 36.7 35.0 37.2 </span></span><br><span class="line"><span class="string">      2 	44.0 37.7 50.0 35.0 29.0 36.7 </span></span><br><span class="line"><span class="string"> 2014 1 	30.0 37.4 39.0 37.8 61.0 36.9 </span></span><br><span class="line"><span class="string">      2 	47.0 37.8 48.0 37.3 51.0 36.5</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#the same method in series can be used</span></span><br><span class="line">health_data[<span class="string">'Guido'</span>, <span class="string">'HR'</span>] </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">year visit </span></span><br><span class="line"><span class="string">2013 1 		32.0 </span></span><br><span class="line"><span class="string"> 	 2 		50.0 </span></span><br><span class="line"><span class="string">2014 1 		39.0 </span></span><br><span class="line"><span class="string"> 	 2 		48.0 </span></span><br><span class="line"><span class="string">Name: (Guido, HR), dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>loc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">health_data.iloc[:<span class="number">2</span>, :<span class="number">2</span>] <span class="comment">#隐式索引</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">subject    Bob </span></span><br><span class="line"><span class="string">type       HR   Temp </span></span><br><span class="line"><span class="string">year visit </span></span><br><span class="line"><span class="string">2013  1    31.0 38.7 </span></span><br><span class="line"><span class="string">      2    44.0 37.7</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#more than one indexes can be used</span></span><br><span class="line">health_data.loc[:, (<span class="string">'Bob'</span>, <span class="string">'HR'</span>)] </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">year visit </span></span><br><span class="line"><span class="string">2013   1   31.0 </span></span><br><span class="line"><span class="string">       2   44.0 </span></span><br><span class="line"><span class="string">2014   1   30.0 </span></span><br><span class="line"><span class="string">       2   47.0 </span></span><br><span class="line"><span class="string">Name: (Bob, HR), dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h4 id="IndexSlice"><a href="#IndexSlice" class="headerlink" title="IndexSlice"></a>IndexSlice</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">idx = pd.IndexSlice </span><br><span class="line">health_data.loc[idx[:, <span class="number">1</span>], idx[:, <span class="string">'HR'</span>]] </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">subject     Bob Guido Sue </span></span><br><span class="line"><span class="string">type        HR  HR    HR </span></span><br><span class="line"><span class="string">year visit </span></span><br><span class="line"><span class="string">2013 1     31.0 32.0 35.0 </span></span><br><span class="line"><span class="string">2014 1     30.0 39.0 61.0</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="index-column-exchange"><a href="#index-column-exchange" class="headerlink" title="index/column exchange"></a>index/column exchange</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index = pd.MultiIndex.from_product([[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>], [<span class="number">1</span>, <span class="number">2</span>]]) </span><br><span class="line">data = pd.Series(np.random.rand(<span class="number">6</span>), index=index) </span><br><span class="line">data.index.names = [<span class="string">'char'</span>, <span class="string">'int'</span>] </span><br><span class="line">data </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">  char int </span></span><br><span class="line"><span class="string"> a 1 0.003001 </span></span><br><span class="line"><span class="string"> 2 0.164974 </span></span><br><span class="line"><span class="string"> c 1 0.741650 </span></span><br><span class="line"><span class="string"> 2 0.569264 </span></span><br><span class="line"><span class="string"> b 1 0.001693 </span></span><br><span class="line"><span class="string"> 2 0.526226 </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#code will go wrong if the DataFrame is not sorted</span></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    data[<span class="string">'a'</span>:<span class="string">'b'</span>] </span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e: </span><br><span class="line">    print(type(e)) </span><br><span class="line">    print(e) </span><br><span class="line"><span class="comment">#&lt;class 'KeyError'&gt; </span></span><br><span class="line"><span class="comment">#'Key length (1) was greater than MultiIndex lexsort depth (0)'</span></span><br></pre></td></tr></table></figure>

<p>sort_index()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = data.sort_index() </span><br><span class="line">data </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">char int </span></span><br><span class="line"><span class="string"> a    1 0.003001 </span></span><br><span class="line"><span class="string">      2 0.164974 </span></span><br><span class="line"><span class="string"> b    1 0.001693 </span></span><br><span class="line"><span class="string">      2 0.526226 </span></span><br><span class="line"><span class="string"> c    1 0.741650 </span></span><br><span class="line"><span class="string">      2 0.569264 </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">'a'</span>:<span class="string">'b'</span>] </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">char int </span></span><br><span class="line"><span class="string"> a    1 0.003001 </span></span><br><span class="line"><span class="string">      2 0.164974 </span></span><br><span class="line"><span class="string"> b    1 0.001693 </span></span><br><span class="line"><span class="string">      2 0.526226 </span></span><br><span class="line"><span class="string"> dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>stack and unstack</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop.unstack(level=<span class="number">0</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> state California New York Texas </span></span><br><span class="line"><span class="string"> year </span></span><br><span class="line"><span class="string"> 2000 33871648 18976457 20851820 </span></span><br><span class="line"><span class="string"> 2010 37253956 19378102 25145561 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">pop.unstack(level=<span class="number">1</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">        year  2000   2010 </span></span><br><span class="line"><span class="string"> state </span></span><br><span class="line"><span class="string"> California 33871648 37253956 </span></span><br><span class="line"><span class="string"> New York   18976457 19378102 </span></span><br><span class="line"><span class="string"> Texas      20851820 25145561</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop.unstack().stack() </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> state      year </span></span><br><span class="line"><span class="string"> California 2000 33871648 </span></span><br><span class="line"><span class="string">            2010 37253956 </span></span><br><span class="line"><span class="string"> New York   2000 18976457 </span></span><br><span class="line"><span class="string">            2010 19378102 </span></span><br><span class="line"><span class="string"> Texas      2000 20851820 </span></span><br><span class="line"><span class="string">            2010 25145561 </span></span><br><span class="line"><span class="string"> dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>set and reset</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop_flat = pop.reset_index(name=<span class="string">'population'</span>) </span><br><span class="line">pop_flat </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string">    state     year population </span></span><br><span class="line"><span class="string"> 0 California 2000 33871648 </span></span><br><span class="line"><span class="string"> 1 California 2010 37253956 </span></span><br><span class="line"><span class="string"> 2 New York   2000 18976457 </span></span><br><span class="line"><span class="string"> 3 New York   2010 19378102 </span></span><br><span class="line"><span class="string"> 4 Texas      2000 20851820 </span></span><br><span class="line"><span class="string"> 5 Texas      2010 25145561</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">pop_flat.set_index([<span class="string">'state'</span>, <span class="string">'year'</span>]) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">                 population </span></span><br><span class="line"><span class="string"> state      year </span></span><br><span class="line"><span class="string"> California 2000 33871648 </span></span><br><span class="line"><span class="string">            2010 37253956 </span></span><br><span class="line"><span class="string"> New York   2000 18976457 </span></span><br><span class="line"><span class="string">            2010 19378102 </span></span><br><span class="line"><span class="string"> Texas      2000 20851820 </span></span><br><span class="line"><span class="string">            2010 25145561</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">health_data </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> subject   Bob     Guido   Sue </span></span><br><span class="line"><span class="string"> type      HR Temp HR Temp HR Temp </span></span><br><span class="line"><span class="string"> year visit </span></span><br><span class="line"><span class="string"> 2013 1    31.0 38.7 32.0 36.7 35.0 37.2 </span></span><br><span class="line"><span class="string">      2    44.0 37.7 50.0 35.0 29.0 36.7 </span></span><br><span class="line"><span class="string"> 2014 1    30.0 37.4 39.0 37.8 61.0 36.9 </span></span><br><span class="line"><span class="string">      2    47.0 37.8 48.0 37.3 51.0 36.5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>mean:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_mean = health_data.mean(level=<span class="string">'year'</span>) </span><br><span class="line">data_mean </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> subject Bob       Guido      Sue </span></span><br><span class="line"><span class="string"> type    HR Temp   HR Temp    HR Temp </span></span><br><span class="line"><span class="string"> year </span></span><br><span class="line"><span class="string"> 2013    37.5 38.2 41.0 35.85 32.0 36.95 </span></span><br><span class="line"><span class="string"> 2014    38.5 37.6 43.5 37.55 56.0 36.70</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">data_mean.mean(axis=<span class="number">1</span>, level=<span class="string">'type'</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> type HR        Temp </span></span><br><span class="line"><span class="string"> year </span></span><br><span class="line"><span class="string"> 2013 36.833333 37.000000 </span></span><br><span class="line"><span class="string"> 2014 46.000000 37.283333</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas3</title>
    <url>/2020/07/27/pandas3/</url>
    <content><![CDATA[<h1 id="Pandas-Introduction-3"><a href="#Pandas-Introduction-3" class="headerlink" title="Pandas Introduction 3"></a>Pandas Introduction 3</h1><h2 id="Concat-and-Append"><a href="#Concat-and-Append" class="headerlink" title="Concat and Append"></a>Concat and Append</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_df</span><span class="params">(cols, ind)</span>:</span> </span><br><span class="line"> <span class="string">"""一个简单的DataFrame"""</span> </span><br><span class="line">	data = &#123;c: [str(c) + str(i) <span class="keyword">for</span> i <span class="keyword">in</span> ind] </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> cols&#125; </span><br><span class="line"> 	<span class="keyword">return</span> pd.DataFrame(data, ind) </span><br><span class="line"> <span class="comment"># DataFrame示例</span></span><br><span class="line"> 	make_df(<span class="string">'ABC'</span>, range(<span class="number">3</span>)) </span><br><span class="line">Out: </span><br><span class="line">   A  B  C </span><br><span class="line"> <span class="number">0</span> A0 B0 C0 </span><br><span class="line"> <span class="number">1</span> A1 B1 C1 </span><br><span class="line"> <span class="number">2</span> A2 B2 C2</span><br></pre></td></tr></table></figure>

<p>review: numpy.concatenate</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [[<span class="number">1</span>, <span class="number">2</span>], </span><br><span class="line"> 	 [<span class="number">3</span>, <span class="number">4</span>]] </span><br><span class="line">np.concatenate([x, x], axis=<span class="number">1</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">array([[1, 2, 1, 2], </span></span><br><span class="line"><span class="string"> 	   [3, 4, 3, 4]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="use-concat-to-combine"><a href="#use-concat-to-combine" class="headerlink" title="use .concat to combine"></a>use .concat to combine</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser1 = pd.Series([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>], index=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) </span><br><span class="line">ser2 = pd.Series([<span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>], index=[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]) </span><br><span class="line">pd.concat([ser1, ser2]) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string"> 1 A </span></span><br><span class="line"><span class="string"> 2 B </span></span><br><span class="line"><span class="string"> 3 C </span></span><br><span class="line"><span class="string"> 4 D </span></span><br><span class="line"><span class="string"> 5 E </span></span><br><span class="line"><span class="string"> 6 F </span></span><br><span class="line"><span class="string"> dtype: object</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>and multilevel one:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = make_df(<span class="string">'AB'</span>, [<span class="number">1</span>, <span class="number">2</span>]) </span><br><span class="line">df2 = make_df(<span class="string">'AB'</span>, [<span class="number">3</span>, <span class="number">4</span>]) </span><br><span class="line">print(df1); print(df2); print(pd.concat([df1, df2])) </span><br><span class="line">df1 df2 pd.concat([df1, df2]) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">    A B     A B     A B </span></span><br><span class="line"><span class="string"> 1 A1 B1 3 A3 B3 1 A1 B1 </span></span><br><span class="line"><span class="string"> 2 A2 B2 4 A4 B4 2 A2 B2 </span></span><br><span class="line"><span class="string">                 3 A3 B3 </span></span><br><span class="line"><span class="string">                 4 A4 B4</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#change the direction</span></span><br><span class="line">df3 = make_df(<span class="string">'AB'</span>, [<span class="number">0</span>, <span class="number">1</span>]) </span><br><span class="line">df4 = make_df(<span class="string">'CD'</span>, [<span class="number">0</span>, <span class="number">1</span>]) </span><br><span class="line">print(df3); print(df4); print(pd.concat([df3, df4], axis=<span class="string">'col'</span>)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">   df3      df4      pd.concat([df3, df4], axis='col') </span></span><br><span class="line"><span class="string">    A B     C D    A  B  C  D </span></span><br><span class="line"><span class="string"> 0 A0 B0 0 C0 D0 0 A0 B0 C0 D0 </span></span><br><span class="line"><span class="string"> 1 A1 B1 1 C1 D1 1 A1 B1 C1 D1</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>when the indexes are the same:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = make_df(<span class="string">'AB'</span>, [<span class="number">0</span>, <span class="number">1</span>]) </span><br><span class="line">y = make_df(<span class="string">'AB'</span>, [<span class="number">2</span>, <span class="number">3</span>]) </span><br><span class="line">y.index = x.index <span class="comment"># 复制索引</span></span><br><span class="line">print(x); print(y); print(pd.concat([x, y])) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">      x       y      pd.concat([x, y]) </span></span><br><span class="line"><span class="string">    A B     A B     A B </span></span><br><span class="line"><span class="string"> 0 A0 B0 0 A2 B2 0 A0 B0 </span></span><br><span class="line"><span class="string"> 1 A1 B1 1 A3 B3 1 A1 B1 </span></span><br><span class="line"><span class="string">                 0 A2 B2 </span></span><br><span class="line"><span class="string">                 1 A3 B3</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>ignore:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(x); print(y); print(pd.concat([x, y], ignore_index=<span class="literal">True</span>)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">     x      y      pd.concat([x, y], ignore_index=True) </span></span><br><span class="line"><span class="string">    A B     A B     A B </span></span><br><span class="line"><span class="string"> 0 A0 B0 0 A2 B2 0 A0 B0 </span></span><br><span class="line"><span class="string"> 1 A1 B1 1 A3 B3 1 A1 B1 </span></span><br><span class="line"><span class="string">                 2 A2 B2 </span></span><br><span class="line"><span class="string">                 3 A3 B3</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>add more indexes:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(x); print(y); print(pd.concat([x, y], keys=[<span class="string">'x'</span>, <span class="string">'y'</span>])) </span><br><span class="line">     x       y         pd.concat([x, y], keys=[<span class="string">'x'</span>, <span class="string">'y'</span>]) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    A B     A B       A B </span></span><br><span class="line"><span class="string"> 0 A0 B0 0 A2 B2 x 0 A0 B0 </span></span><br><span class="line"><span class="string"> 1 A1 B1 1 A3 B3   1 A1 B1 </span></span><br><span class="line"><span class="string">                 y 0 A2 B2 </span></span><br><span class="line"><span class="string">                   1 A3 B3</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>join:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df5 = make_df(<span class="string">'ABC'</span>, [<span class="number">1</span>, <span class="number">2</span>]) </span><br><span class="line">df6 = make_df(<span class="string">'BCD'</span>, [<span class="number">3</span>, <span class="number">4</span>]) </span><br><span class="line">print(df5); print(df6); print(pd.concat([df5, df6]) </span><br><span class="line"><span class="string">'''                              </span></span><br><span class="line"><span class="string">     df5        df6      pd.concat([df5, df6]) </span></span><br><span class="line"><span class="string">   A  B  C    B  C  D    A  B  C  D </span></span><br><span class="line"><span class="string"> 1 A1 B1 C1 3 B3 C3 D3 1 A1 B1 C1 NaN </span></span><br><span class="line"><span class="string"> 2 A2 B2 C2 4 B4 C4 D4 2 A2 B2 C2 NaN </span></span><br><span class="line"><span class="string">                       3 NaN B3 C3 D3 </span></span><br><span class="line"><span class="string">                       4 NaN B4 C4 D4</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>to deal with NaN:</p>
<p>inner and outer:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df5); print(df6); </span><br><span class="line">print(pd.concat([df5, df6], join=<span class="string">'inner'</span>)) </span><br><span class="line">df5 df6 pd.concat([df5, df6], join=<span class="string">'inner'</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   A  B  C    B  C  D     B C </span></span><br><span class="line"><span class="string"> 1 A1 B1 C1 3 B3 C3 D3 1 B1 C1 </span></span><br><span class="line"><span class="string"> 2 A2 B2 C2 4 B4 C4 D4 2 B2 C2 </span></span><br><span class="line"><span class="string">                       3 B3 C3 </span></span><br><span class="line"><span class="string">                       4 B4 C4</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>axe:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df5); print(df6); </span><br><span class="line">print(pd.concat([df5, df6], join_axes=[df5.columns])) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">     df5        df6       pd.concat([df5, df6], join_axes=[df5.columns]) </span></span><br><span class="line"><span class="string">   A  B  C    B  C  D    A  B  C </span></span><br><span class="line"><span class="string"> 1 A1 B1 C1 3 B3 C3 D3 1 A1 B1 C1 </span></span><br><span class="line"><span class="string"> 2 A2 B2 C2 4 B4 C4 D4 2 A2 B2 C2 </span></span><br><span class="line"><span class="string">                       3 NaN B3 C3 </span></span><br><span class="line"><span class="string">                       4 NaN B4 C4</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>append：df1.append(df2) = pd.concat([df1, df2]) </p>
<h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p>pd.merge:</p>
<p>one to one:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = pd.DataFrame(&#123;<span class="string">'employee'</span>: [<span class="string">'Bob'</span>, <span class="string">'Jake'</span>, <span class="string">'Lisa'</span>, <span class="string">'Sue'</span>], </span><br><span class="line">                    <span class="string">'group'</span>: [<span class="string">'Accounting'</span>, <span class="string">'Engineering'</span>, <span class="string">'Engineering'</span>, <span class="string">'HR'</span>]&#125;) </span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">'employee'</span>: [<span class="string">'Lisa'</span>, <span class="string">'Bob'</span>, <span class="string">'Jake'</span>, <span class="string">'Sue'</span>], </span><br><span class="line">                    <span class="string">'hire_date'</span>: [<span class="number">2004</span>, <span class="number">2008</span>, <span class="number">2012</span>, <span class="number">2014</span>]&#125;) </span><br><span class="line">print(df1); print(df2) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">       df1                 df2 </span></span><br><span class="line"><span class="string"> employee group     employee hire_date </span></span><br><span class="line"><span class="string">0 Bob Accounting   0 Lisa 2004 </span></span><br><span class="line"><span class="string">1 Jake Engineering 1 Bob 2008 </span></span><br><span class="line"><span class="string">2 Lisa Engineering 2 Jake 2012 </span></span><br><span class="line"><span class="string">3 Sue HR           3 Sue 2014</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2) </span><br><span class="line">df3 </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out:</span></span><br><span class="line"><span class="string">    employee group hire_date </span></span><br><span class="line"><span class="string"> 0   Bob   Accounting  2008 </span></span><br><span class="line"><span class="string"> 1   Jake Engineering  2012 </span></span><br><span class="line"><span class="string"> 2   Lisa Engineering  2004 </span></span><br><span class="line"><span class="string"> 3   Sue       HR      2014</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>many to one:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df4 = pd.DataFrame(&#123;<span class="string">'group'</span>: [<span class="string">'Accounting'</span>, <span class="string">'Engineering'</span>, <span class="string">'HR'</span>], </span><br><span class="line">                    <span class="string">'supervisor'</span>: [<span class="string">'Carly'</span>, <span class="string">'Guido'</span>, <span class="string">'Steve'</span>]&#125;) </span><br><span class="line">print(df3); print(df4); print(pd.merge(df3, df4)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">      df3                         df4 </span></span><br><span class="line"><span class="string"> employee group hire_date     group    supervisor </span></span><br><span class="line"><span class="string">0 Bob Accounting   2008   0 Accounting  Carly </span></span><br><span class="line"><span class="string">1 Jake Engineering 2012   1 Engineering Guido </span></span><br><span class="line"><span class="string">2 Lisa Engineering 2004   2 HR          Steve </span></span><br><span class="line"><span class="string">3 Sue   HR         2014 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">pd.merge(df3, df4) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"> employee group hire_date supervisor </span></span><br><span class="line"><span class="string">0 Bob   Accounting  2008   Carly </span></span><br><span class="line"><span class="string">1 Jake  Engineering 2012   Guido </span></span><br><span class="line"><span class="string">2 Lisa  Engineering 2004   Guido </span></span><br><span class="line"><span class="string">3 Sue        HR     2014   Steve</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>many to many:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df5 = pd.DataFrame(&#123;<span class="string">'group'</span>: [<span class="string">'Accounting'</span>, <span class="string">'Accounting'</span>, </span><br><span class="line">                              <span class="string">'Engineering'</span>, <span class="string">'Engineering'</span>, <span class="string">'HR'</span>, <span class="string">'HR'</span>], </span><br><span class="line">                    <span class="string">'skills'</span>: [<span class="string">'math'</span>, <span class="string">'spreadsheets'</span>, <span class="string">'coding'</span>, <span class="string">'linux'</span>, </span><br><span class="line">                               <span class="string">'spreadsheets'</span>, <span class="string">'organization'</span>]&#125;) </span><br><span class="line">print(df1); print(df5); print(pd.merge(df1, df5)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">        df1                 df5 </span></span><br><span class="line"><span class="string"> employee group          group skills </span></span><br><span class="line"><span class="string">0 Bob  Accounting  0 Accounting math </span></span><br><span class="line"><span class="string">1 Jake Engineering 1 Accounting spreadsheets </span></span><br><span class="line"><span class="string">2 Lisa Engineering 2 Engineering coding </span></span><br><span class="line"><span class="string">3 Sue  HR          3 Engineering linux </span></span><br><span class="line"><span class="string">                   4 HR spreadsheets </span></span><br><span class="line"><span class="string">                   5 HR organization </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">pd.merge(df1, df5) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"> employee group skills </span></span><br><span class="line"><span class="string">0 Bob Accounting math </span></span><br><span class="line"><span class="string">1 Bob Accounting spreadsheets </span></span><br><span class="line"><span class="string">2 Jake Engineering coding </span></span><br><span class="line"><span class="string">3 Jake Engineering linux </span></span><br><span class="line"><span class="string">4 Lisa Engineering coding </span></span><br><span class="line"><span class="string">5 Lisa Engineering linux </span></span><br><span class="line"><span class="string">6 Sue HR spreadsheets </span></span><br><span class="line"><span class="string">7 Sue HR organization</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>use of on</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df1); print(df2); print(pd.merge(df1, df2, on=<span class="string">'employee'</span>)) </span><br><span class="line">df1 df2 </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"> employee group     employee hire_date </span></span><br><span class="line"><span class="string">0 Bob  Accounting  0 Lisa    2004 </span></span><br><span class="line"><span class="string">1 Jake Engineering 1 Bob     2008 </span></span><br><span class="line"><span class="string">2 Lisa Engineering 2 Jake    2012 </span></span><br><span class="line"><span class="string">3 Sue  HR          3 Sue     2014 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pd.merge(df1, df2, on='employee') </span></span><br><span class="line"><span class="string"> employee group    hire_date </span></span><br><span class="line"><span class="string">0 Bob  Accounting  2008 </span></span><br><span class="line"><span class="string">1 Jake Engineering 2012 </span></span><br><span class="line"><span class="string">2 Lisa Engineering 2004 </span></span><br><span class="line"><span class="string">3 Sue  HR          2014</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>when two dataframes use different column names but the sam data,we can use left_on and right_on</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3 = pd.DataFrame(&#123;<span class="string">'name'</span>: [<span class="string">'Bob'</span>, <span class="string">'Jake'</span>, <span class="string">'Lisa'</span>, <span class="string">'Sue'</span>], <span class="string">'salary'</span>: [<span class="number">70000</span>, <span class="number">80000</span>, <span class="number">120000</span>, <span class="number">90000</span>]&#125;) </span><br><span class="line">print(df1); print(df3); </span><br><span class="line">print(pd.merge(df1, df3, left_on=<span class="string">"employee"</span>, right_on=<span class="string">"name"</span>)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   df1              df3 </span></span><br><span class="line"><span class="string"> employee group     name  salary </span></span><br><span class="line"><span class="string">0 Bob  Accounting  0 Bob  70000 </span></span><br><span class="line"><span class="string">1 Jake Engineering 1 Jake 80000 </span></span><br><span class="line"><span class="string">2 Lisa Engineering 2 Lisa 120000 </span></span><br><span class="line"><span class="string">3 Sue  HR          3 Sue  90000</span></span><br><span class="line"><span class="string">pd.merge(df1, df3, left_on="employee", right_on="name") </span></span><br><span class="line"><span class="string"> employee group    name salary </span></span><br><span class="line"><span class="string">0 Bob  Accounting  Bob  70000 </span></span><br><span class="line"><span class="string">1 Jake Engineering Jake 80000 </span></span><br><span class="line"><span class="string">2 Lisa Engineering Lisa 120000 </span></span><br><span class="line"><span class="string">3 Sue  HR          Sue  90000</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>left_index and right_index</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1a = df1.set_index(<span class="string">'employee'</span>) </span><br><span class="line">df2a = df2.set_index(<span class="string">'employee'</span>) </span><br><span class="line">print(df1a); print(df2a) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    df1a                 df2a </span></span><br><span class="line"><span class="string">        group                       hire_date </span></span><br><span class="line"><span class="string">employee                 employee </span></span><br><span class="line"><span class="string">Bob     Accounting       Lisa       2004 </span></span><br><span class="line"><span class="string">Jake    Engineering      Bob        2008 </span></span><br><span class="line"><span class="string">Lisa    Engineering      Jake       2012 </span></span><br><span class="line"><span class="string">Sue     HR               Sue        2014</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(df1a); print(df2a); </span><br><span class="line">print(pd.merge(df1a, df2a, left_index=<span class="literal">True</span>, right_index=<span class="literal">True</span>)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    df1a                 df2a </span></span><br><span class="line"><span class="string">        group                       hire_date </span></span><br><span class="line"><span class="string">employee                 employee </span></span><br><span class="line"><span class="string">Bob     Accounting       Lisa       2004 </span></span><br><span class="line"><span class="string">Jake    Engineering      Bob        2008 </span></span><br><span class="line"><span class="string">Lisa    Engineering      Jake       2012 </span></span><br><span class="line"><span class="string">Sue     HR               Sue        2014</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pd.merge(df1a, df2a, left_index=True, right_index=True) </span></span><br><span class="line"><span class="string">        group       hire_date </span></span><br><span class="line"><span class="string">employee </span></span><br><span class="line"><span class="string">Lisa    Engineering 2004 </span></span><br><span class="line"><span class="string">Bob     Accounting  2008 </span></span><br><span class="line"><span class="string">Jake    Engineering 2012 </span></span><br><span class="line"><span class="string">Sue     HR          2014</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#join</span></span><br><span class="line">print(df1a); print(df2a); print(df1a.join(df2a)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    df1a                 df2a </span></span><br><span class="line"><span class="string">        group                       hire_date </span></span><br><span class="line"><span class="string">employee                 employee </span></span><br><span class="line"><span class="string">Bob     Accounting       Lisa       2004 </span></span><br><span class="line"><span class="string">Jake    Engineering      Bob        2008 </span></span><br><span class="line"><span class="string">Lisa    Engineering      Jake       2012 </span></span><br><span class="line"><span class="string">Sue     HR               Sue        2014</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pd.merge(df1a, df2a, left_index=True, right_index=True) </span></span><br><span class="line"><span class="string">        group       hire_date </span></span><br><span class="line"><span class="string">employee </span></span><br><span class="line"><span class="string">Lisa    Engineering 2004 </span></span><br><span class="line"><span class="string">Bob     Accounting  2008 </span></span><br><span class="line"><span class="string">Jake    Engineering 2012 </span></span><br><span class="line"><span class="string">Sue     HR          2014</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(df1a); print(df3); </span><br><span class="line">print(pd.merge(df1a, df3, left_index=<span class="literal">True</span>, right_on=<span class="string">'name'</span>)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   df1              df3 </span></span><br><span class="line"><span class="string"> employee group     name  salary </span></span><br><span class="line"><span class="string">0 Bob  Accounting  0 Bob  70000 </span></span><br><span class="line"><span class="string">1 Jake Engineering 1 Jake 80000 </span></span><br><span class="line"><span class="string">2 Lisa Engineering 2 Lisa 120000 </span></span><br><span class="line"><span class="string">3 Sue  HR          3 Sue  90000</span></span><br><span class="line"><span class="string">pd.merge(df1, df3, left_on="employee", right_on="name") </span></span><br><span class="line"><span class="string"> employee group    name salary </span></span><br><span class="line"><span class="string">0 Bob  Accounting  Bob  70000 </span></span><br><span class="line"><span class="string">1 Jake Engineering Jake 80000 </span></span><br><span class="line"><span class="string">2 Lisa Engineering Lisa 120000 </span></span><br><span class="line"><span class="string">3 Sue  HR          Sue  90000</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>merge of different dataframes:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df6 = pd.DataFrame(&#123;<span class="string">'name'</span>: [<span class="string">'Peter'</span>, <span class="string">'Paul'</span>, <span class="string">'Mary'</span>], </span><br><span class="line">                    <span class="string">'food'</span>: [<span class="string">'fish'</span>, <span class="string">'beans'</span>, <span class="string">'bread'</span>]&#125;, </span><br><span class="line">                   columns=[<span class="string">'name'</span>, <span class="string">'food'</span>]) </span><br><span class="line">df7 = pd.DataFrame(&#123;<span class="string">'name'</span>: [<span class="string">'Mary'</span>, <span class="string">'Joseph'</span>], </span><br><span class="line">                    <span class="string">'drink'</span>: [<span class="string">'wine'</span>, <span class="string">'beer'</span>]&#125;, </span><br><span class="line">                   columns=[<span class="string">'name'</span>, <span class="string">'drink'</span>]) </span><br><span class="line">print(df6); print(df7); print(pd.merge(df6, df7)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    df6        df7            pd.merge(df6, df7) </span></span><br><span class="line"><span class="string"> name   food    name   drink   name food  drink </span></span><br><span class="line"><span class="string">0 Peter fish  0 Mary   wine  0 Mary bread wine </span></span><br><span class="line"><span class="string">1 Paul  beans 1 Joseph beer </span></span><br><span class="line"><span class="string">2 Mary  bread</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">pd.merge(df6, df7, how=<span class="string">'inner'</span>) </span><br><span class="line"><span class="comment">#   name food drink </span></span><br><span class="line"><span class="comment"># 0 Mary bread wine</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#NaN</span></span><br><span class="line">print(df6); print(df7); print(pd.merge(df6, df7, how=<span class="string">'outer'</span>)) </span><br><span class="line">df6 df7 pd.merge(df6, df7, how=<span class="string">'outer'</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  name food    name drink    name food drink </span></span><br><span class="line"><span class="string">0 Peter fish 0 Mary wine   0 Peter fish NaN </span></span><br><span class="line"><span class="string">1 Paul beans 1 Joseph beer 1 Paul beans NaN </span></span><br><span class="line"><span class="string">2 Mary bread               2 Mary bread wine </span></span><br><span class="line"><span class="string">                           3 Joseph NaN beer</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#left join,right join</span></span><br><span class="line">print(df6); print(df7); print(pd.merge(df6, df7, how=<span class="string">'left'</span>)) </span><br><span class="line">df6 df7 pd.merge(df6, df7, how=<span class="string">'left'</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  name food    name drink    name food drink </span></span><br><span class="line"><span class="string">0 Peter fish 0 Mary   wine 0 Peter fish NaN </span></span><br><span class="line"><span class="string">1 Paul beans 1 Joseph beer 1 Paul beans NaN </span></span><br><span class="line"><span class="string">2 Mary bread               2 Mary bread wine</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>suffixes: the column names are repeated</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df8 = pd.DataFrame(&#123;<span class="string">'name'</span>: [<span class="string">'Bob'</span>, <span class="string">'Jake'</span>, <span class="string">'Lisa'</span>, <span class="string">'Sue'</span>], </span><br><span class="line">                    <span class="string">'rank'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;) </span><br><span class="line">df9 = pd.DataFrame(&#123;<span class="string">'name'</span>: [<span class="string">'Bob'</span>, <span class="string">'Jake'</span>, <span class="string">'Lisa'</span>, <span class="string">'Sue'</span>], </span><br><span class="line">                    <span class="string">'rank'</span>: [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>]&#125;) </span><br><span class="line">print(df8); print(df9); print(pd.merge(df8, df9, on=<span class="string">"name"</span>)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    df8        df9       pd.merge(df8, df9, on="name") </span></span><br><span class="line"><span class="string">  name rank   name rank  name rank_x rank_y </span></span><br><span class="line"><span class="string">0 Bob  1    0 Bob   3   0 Bob  1     3 </span></span><br><span class="line"><span class="string">1 Jake 2    1 Jake  1   1 Jake 2     1 </span></span><br><span class="line"><span class="string">2 Lisa 3    2 Lisa  4   2 Lisa 3     4 </span></span><br><span class="line"><span class="string">3 Sue  4    3 Sue   2   3 Sue  4     2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(df8); print(df9); </span><br><span class="line">print(pd.merge(df8, df9, on=<span class="string">"name"</span>, suffixes=[<span class="string">"_L"</span>, <span class="string">"_R"</span>])) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    df8        df9       pd.merge(df8, df9, on="name", suffixes=["_L", "_R"])</span></span><br><span class="line"><span class="string">  name rank   name rank  name rank_L rank_R</span></span><br><span class="line"><span class="string">0 Bob  1    0 Bob   3   0 Bob  1     3 </span></span><br><span class="line"><span class="string">1 Jake 2    1 Jake  1   1 Jake 2     1 </span></span><br><span class="line"><span class="string">2 Lisa 3    2 Lisa  4   2 Lisa 3     4 </span></span><br><span class="line"><span class="string">3 Sue  4    3 Sue   2   3 Sue  4     2</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h2 id="accumulation"><a href="#accumulation" class="headerlink" title="accumulation"></a>accumulation</h2><table>
<thead>
<tr>
<th>count()</th>
<th>计数项</th>
</tr>
</thead>
<tbody><tr>
<td>first()、last()</td>
<td>第一项与最后一项</td>
</tr>
<tr>
<td>mean()、median()</td>
<td>均值与中位数</td>
</tr>
<tr>
<td>min()、max()</td>
<td>最小值与最大值</td>
</tr>
<tr>
<td>std()、var()</td>
<td>标准差与方差</td>
</tr>
<tr>
<td>mad()</td>
<td>均值绝对偏差（mean absolute deviation）</td>
</tr>
<tr>
<td>prod()</td>
<td>所有项乘积</td>
</tr>
<tr>
<td>sum()</td>
<td>所有项求和</td>
</tr>
<tr>
<td>describe()</td>
<td>分析数据的所有特征（如最大值）</td>
</tr>
</tbody></table>
<p>​     </p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习7</title>
    <url>/2020/07/05/python%E5%AD%A6%E4%B9%A07/</url>
    <content><![CDATA[<h1 id="Python-Import-files"><a href="#Python-Import-files" class="headerlink" title="Python-Import files"></a>Python-Import files</h1><p>Every file has own path to access.</p>
<p>e.g.</p>
<p><img src="https://s1.ax1x.com/2020/07/05/UpDp6K.png" alt="UpDp6K.png"></p>
<p>C:\Users\asweigart\Documents\project.docx</p>
<p>When comes to OS X and Linux, we use / to separate.</p>
<p><em>在 OS X 上，它们表示为新的文件夹，在/Volumes 文件夹下。在 Linux 上，它们表示为新的</em> </p>
<p><em>文件夹，在/mnt（”mount”）文件夹下。同时也要注意，虽然文件夹名称和文件名在</em> </p>
<p><em>Windows 和 OS X 上是不区分大小写的，但在 Linux 上是区分大小写的。</em></p>
<h2 id="import-files"><a href="#import-files" class="headerlink" title="import files"></a>import files</h2><h3 id="os-path-join"><a href="#os-path-join" class="headerlink" title="os.path.join()"></a>os.path.join()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.path.join(<span class="string">'usr'</span>, <span class="string">'bin'</span>, <span class="string">'spam'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:'usr\\bin\\spam'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myFiles = [<span class="string">'accounts.txt'</span>, <span class="string">'details.csv'</span>, <span class="string">'invite.docx'</span>]</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> myFiles: <span class="comment">#add diferent filename after the same route as they are in the same folder</span></span><br><span class="line">	print(os.path.join(<span class="string">'C:\\Users\\asweigart'</span>, filename)) </span><br><span class="line"></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#C:\Users\asweigart\accounts.txt </span></span><br><span class="line"><span class="comment">#C:\Users\asweigart\details.csv </span></span><br><span class="line"><span class="comment">#C:\Users\asweigart\invite.docx</span></span><br></pre></td></tr></table></figure>

<h3 id="current-folder"><a href="#current-folder" class="headerlink" title="current folder:"></a>current folder:</h3><p>getcwd() : check which folder is the process in</p>
<p>chdir() :change the current folder (the folder must exist)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getcwd()</span><br><span class="line"><span class="comment">#out:'C:\\Python34' </span></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">'C:\\Windows\\System32'</span>)</span><br><span class="line">os.getcwd()</span><br><span class="line"><span class="comment">#out:'C:\\Windows\\System32'</span></span><br></pre></td></tr></table></figure>

<h3 id="create-new-folder-os-makedirs"><a href="#create-new-folder-os-makedirs" class="headerlink" title="create new folder:os.makedirs()"></a>create new folder:os.makedirs()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.makedirs(<span class="string">'C:\\delicious\\walnut\\waffles'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="AP-absolute-path-and-relative-path"><a href="#AP-absolute-path-and-relative-path" class="headerlink" title="AP(absolute path)  and relative path"></a>AP(absolute path)  and relative path</h3><p><img src="https://s1.ax1x.com/2020/07/05/UpyNct.png" alt="UpyNct.png"></p>
<h3 id="processing-with-absolute-path-and-relative-path"><a href="#processing-with-absolute-path-and-relative-path" class="headerlink" title="processing with absolute path  and relative path"></a>processing with absolute path  and relative path</h3><p>os.path.abspath():show the absolute path(if something in the blanket,add it to the end of the absolute path, which means to open one folder or file in the original folder)</p>
<p>os.path.isabs():check wether it is absolute path</p>
<p>os.path.relpath(path,start):find the relative path from the start</p>
<p>os.path.dirname(path):return the string after the last \</p>
<p>os.path.split():separate the dirname and the basename by the last \</p>
<p>split() can also be used</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.abspath(<span class="string">'.'</span>)</span><br><span class="line"><span class="comment">#out:'C:\\Python34' </span></span><br><span class="line"></span><br><span class="line">os.path.abspath(<span class="string">'.\\Scripts'</span>)</span><br><span class="line"><span class="comment">#out:'C:\\Python34\\Scripts' </span></span><br><span class="line"></span><br><span class="line">os.path.isabs(<span class="string">'.'</span>)</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"></span><br><span class="line">os.path.isabs(os.path.abspath(<span class="string">'.'</span>))</span><br><span class="line"><span class="comment">#out:True</span></span><br><span class="line"></span><br><span class="line">os.path.relpath(<span class="string">'C:\\Windows'</span>, <span class="string">'C:\\'</span>)</span><br><span class="line"><span class="comment">#out:'Windows'</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">'C:\\Windows\\System32\\calc.exe'</span></span><br><span class="line">os.path.basename(path)</span><br><span class="line"><span class="comment">#out:'calc.exe'</span></span><br><span class="line"></span><br><span class="line">calcFilePath = <span class="string">'C:\\Windows\\System32\\calc.exe'</span></span><br><span class="line">os.path.split(calcFilePath)</span><br><span class="line"><span class="comment">#out:('C:\\Windows\\System32', 'calc.exe')</span></span><br><span class="line"></span><br><span class="line">(os.path.dirname(calcFilePath), os.path.basename(calcFilePath))</span><br><span class="line"><span class="comment">#out:('C:\\Windows\\System32', 'calc.exe')</span></span><br><span class="line"></span><br><span class="line">calcFilePath.split(os.path.sep)</span><br><span class="line"><span class="comment">#out:['C:', 'Windows', 'System32', 'calc.exe']</span></span><br><span class="line"></span><br><span class="line"><span class="string">'/usr/bin'</span>.split(os.path.sep)</span><br><span class="line"><span class="comment">#out:['', 'usr', 'bin']</span></span><br></pre></td></tr></table></figure>

<p>others:</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">os.path.abspath(path)</td>
<td align="left">返回绝对路径</td>
</tr>
<tr>
<td align="left">os.path.basename(path)</td>
<td align="left">返回文件名</td>
</tr>
<tr>
<td align="left">os.path.commonprefix(list)</td>
<td align="left">返回list(多个路径)中，所有path共有的最长的路径</td>
</tr>
<tr>
<td align="left">os.path.dirname(path)</td>
<td align="left">返回文件路径</td>
</tr>
<tr>
<td align="left">os.path.exists(path)</td>
<td align="left">如果路径 path 存在，返回 True；如果路径 path 不存在，返回 False。</td>
</tr>
<tr>
<td align="left">os.path.lexists</td>
<td align="left">路径存在则返回True,路径损坏也返回True</td>
</tr>
<tr>
<td align="left">os.path.expanduser(path)</td>
<td align="left">把path中包含的”<del>“和”</del>user”转换成用户目录</td>
</tr>
<tr>
<td align="left">os.path.expandvars(path)</td>
<td align="left">根据环境变量的值替换path中包含的”$name”和”${name}”</td>
</tr>
<tr>
<td align="left">os.path.getatime(path)</td>
<td align="left">返回最近访问时间（浮点型秒数）</td>
</tr>
<tr>
<td align="left">os.path.getmtime(path)</td>
<td align="left">返回最近文件修改时间</td>
</tr>
<tr>
<td align="left">os.path.getctime(path)</td>
<td align="left">返回文件 path 创建时间</td>
</tr>
<tr>
<td align="left">os.path.getsize(path)</td>
<td align="left">返回文件大小，如果文件不存在就返回错误</td>
</tr>
<tr>
<td align="left">os.path.isabs(path)</td>
<td align="left">判断是否为绝对路径</td>
</tr>
<tr>
<td align="left">os.path.isfile(path)</td>
<td align="left">判断路径是否为文件</td>
</tr>
<tr>
<td align="left">os.path.isdir(path)</td>
<td align="left">判断路径是否为目录</td>
</tr>
<tr>
<td align="left">os.path.islink(path)</td>
<td align="left">判断路径是否为链接</td>
</tr>
<tr>
<td align="left">os.path.ismount(path)</td>
<td align="left">判断路径是否为挂载点</td>
</tr>
<tr>
<td align="left">os.path.join(path1[, path2[, …]])</td>
<td align="left">把目录和文件名合成一个路径</td>
</tr>
<tr>
<td align="left">os.path.normcase(path)</td>
<td align="left">转换path的大小写和斜杠</td>
</tr>
<tr>
<td align="left">os.path.normpath(path)</td>
<td align="left">规范path字符串形式</td>
</tr>
<tr>
<td align="left">os.path.realpath(path)</td>
<td align="left">返回path的真实路径</td>
</tr>
<tr>
<td align="left">os.path.relpath(path[, start])</td>
<td align="left">从start开始计算相对路径</td>
</tr>
<tr>
<td align="left">os.path.samefile(path1, path2)</td>
<td align="left">判断目录或文件是否相同</td>
</tr>
<tr>
<td align="left">os.path.sameopenfile(fp1, fp2)</td>
<td align="left">判断fp1和fp2是否指向同一文件</td>
</tr>
<tr>
<td align="left">os.path.samestat(stat1, stat2)</td>
<td align="left">判断stat tuple stat1和stat2是否指向同一个文件</td>
</tr>
<tr>
<td align="left">os.path.split(path)</td>
<td align="left">把路径分割成 dirname 和 basename，返回一个元组</td>
</tr>
<tr>
<td align="left">os.path.splitdrive(path)</td>
<td align="left">一般用在 windows 下，返回驱动器名和路径组成的元组</td>
</tr>
<tr>
<td align="left">os.path.splitext(path)</td>
<td align="left">分割路径，返回路径名和文件扩展名的元组</td>
</tr>
<tr>
<td align="left">os.path.splitunc(path)</td>
<td align="left">把路径分割为加载点与文件</td>
</tr>
<tr>
<td align="left">os.path.walk(path, visit, arg)</td>
<td align="left">遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数</td>
</tr>
<tr>
<td align="left">os.path.supports_unicode_filenames</td>
<td align="left">设置是否支持unicode路径名</td>
</tr>
</tbody></table>
<h3 id="check-the-size-and-name"><a href="#check-the-size-and-name" class="headerlink" title="check the size and name"></a>check the size and name</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.getsize(<span class="string">'C:\\Windows\\System32\\calc.exe'</span>)</span><br><span class="line"><span class="comment">#out:776192</span></span><br><span class="line"></span><br><span class="line">os.listdir(<span class="string">'C:\\Windows\\System32'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:['0409', '12520437.cpx', '12520850.cpx', '5U877.ax', 'aaclient.dll', 'xwtpdui.dll', 'xwtpw32.dll', 'zh-CN', 'zh-HK', 'zh-TW', 'zipfldr.dll']</span></span><br><span class="line"></span><br><span class="line">totalSize = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">'C:\\Windows\\System32'</span>):</span><br><span class="line">totalSize = totalSize + os.path.getsize(os.path.join(<span class="string">'C:\\Windows\\System32'</span>, filename))</span><br><span class="line">print(totalSize)</span><br><span class="line"><span class="comment">#out:1117846456</span></span><br></pre></td></tr></table></figure>



<p>os.path.exists(path): check whether it exists</p>
<p>os.path.isfile(path): check whether it is a file</p>
<p>os.path.isdir(path): check whether it is a folder</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.exists(<span class="string">'C:\\Windows'</span>)</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"></span><br><span class="line">os.path.exists(<span class="string">'C:\\some_made_up_folder'</span>)</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"></span><br><span class="line">os.path.isdir(<span class="string">'C:\\Windows\\System32'</span>)</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"></span><br><span class="line">os.path.isfile(<span class="string">'C:\\Windows\\System32'</span>)</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"></span><br><span class="line">os.path.isdir(<span class="string">'C:\\Windows\\System32\\calc.exe'</span>)</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"></span><br><span class="line">os.path.isfile(<span class="string">'C:\\Windows\\System32\\calc.exe'</span>)</span><br><span class="line"><span class="comment">#out:True</span></span><br></pre></td></tr></table></figure>



<h2 id="read-the-file"><a href="#read-the-file" class="headerlink" title="read the file"></a>read the file</h2><h3 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h3><p>windows:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">helloFile = open(<span class="string">'C:\\Users\\your_home_folder\\hello.txt'</span>)</span><br></pre></td></tr></table></figure>

<p>OS X</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">helloFile = open(<span class="string">'/Users/your_home_folder/hello.txt'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">helloContent = helloFile.read()</span><br><span class="line">helloContent</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:'Hello world!'</span></span><br></pre></td></tr></table></figure>



<p>When, in disgrace with fortune and men’s eyes, </p>
<p>I all alone beweep my outcast state,</p>
<p>And trouble deaf heaven with my bootless cries, </p>
<p>And look upon myself and curse my fate,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sonnetFile = open(<span class="string">'sonnet29.txt'</span>)</span><br><span class="line">sonnetFile.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#[When, in disgrace with fortune and men's eyes,\n', ' I all alone beweep my outcast #state,\n', And trouble deaf heaven with my bootless cries,\n', And look upon myself and #curse my fate,']</span></span><br></pre></td></tr></table></figure>

<h3 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">baconFile = open(<span class="string">'bacon.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">baconFile.write(<span class="string">'Hello world!\n'</span>)</span><br><span class="line"><span class="comment">#out:13 </span></span><br><span class="line"></span><br><span class="line">baconFile.close()</span><br><span class="line">baconFile = open(<span class="string">'bacon.txt'</span>, <span class="string">'a'</span>)</span><br><span class="line">baconFile.write(<span class="string">'Bacon is not a vegetable.'</span>)</span><br><span class="line"><span class="comment">#out:25 </span></span><br><span class="line"></span><br><span class="line">baconFile.close()</span><br><span class="line">baconFile = open(<span class="string">'bacon.txt'</span>)</span><br><span class="line">content = baconFile.read()</span><br><span class="line">baconFile.close()</span><br><span class="line">print(content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#Hello world! </span></span><br><span class="line"><span class="comment">#Bacon is not a vegetable.</span></span><br></pre></td></tr></table></figure>

<h2 id="shelve"><a href="#shelve" class="headerlink" title="shelve"></a>shelve</h2><p>在交互环境下 under interactive environment</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shelve</span><br><span class="line">shelfFile = shelve.open(<span class="string">'mydata'</span>)</span><br><span class="line">cats = [<span class="string">'Zophie'</span>, <span class="string">'Pooka'</span>, <span class="string">'Simon'</span>]</span><br><span class="line">shelfFile[<span class="string">'cats'</span>] = cats</span><br><span class="line">shelfFile.close()<span class="comment">#don't forget to close the file</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shelfFile = shelve.open(<span class="string">'mydata'</span>)</span><br><span class="line">type(shelfFile)</span><br><span class="line"><span class="comment">#out:&lt;class 'shelve.DbfilenameShelf'&gt; </span></span><br><span class="line"></span><br><span class="line">shelfFile[<span class="string">'cats'</span>]</span><br><span class="line"><span class="comment">#out:['Zophie', 'Pooka', 'Simon'] </span></span><br><span class="line"></span><br><span class="line">shelfFile.close()</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shelfFile = shelve.open(<span class="string">'mydata'</span>)</span><br><span class="line">list(shelfFile.keys())</span><br><span class="line"><span class="comment">#out:['cats'] </span></span><br><span class="line"></span><br><span class="line">list(shelfFile.values())</span><br><span class="line"><span class="comment">#out:[['Zophie', 'Pooka', 'Simon']] </span></span><br><span class="line"></span><br><span class="line">shelfFile.close()</span><br></pre></td></tr></table></figure>



<h2 id="pprint-pformat"><a href="#pprint-pformat" class="headerlink" title="pprint.pformat()"></a>pprint.pformat()</h2><p>to show the content but not print</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line">cats = [&#123;<span class="string">'name'</span>: <span class="string">'Zophie'</span>, <span class="string">'desc'</span>: <span class="string">'chubby'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'Pooka'</span>, <span class="string">'desc'</span>: <span class="string">'fluffy'</span>&#125;]</span><br><span class="line">pprint.pformat(cats)</span><br><span class="line"><span class="comment">#out:"[&#123;'desc': 'chubby', 'name': 'Zophie'&#125;, &#123;'desc': 'fluffy', 'name': 'Pooka'&#125;]" </span></span><br><span class="line"></span><br><span class="line">fileObj = open(<span class="string">'myCats.py'</span>, <span class="string">'w'</span>)</span><br><span class="line">fileObj.write(<span class="string">'cats = '</span> + pprint.pformat(cats) + <span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#out:83 </span></span><br><span class="line"></span><br><span class="line">fileObj.close()</span><br></pre></td></tr></table></figure>

<p>import can be used toimport files</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> myCats</span><br><span class="line">myCats.cats</span><br><span class="line"><span class="comment">#out:[&#123;'name': 'Zophie', 'desc': 'chubby'&#125;, &#123;'name': 'Pooka', 'desc': 'fluffy'&#125;] </span></span><br><span class="line"></span><br><span class="line">myCats.cats[<span class="number">0</span>]</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Zophie'</span>, <span class="string">'desc'</span>: <span class="string">'chubby'</span>&#125; </span><br><span class="line">myCats.cats[<span class="number">0</span>][<span class="string">'name'</span>]</span><br><span class="line"><span class="comment">#out:'Zophie'</span></span><br></pre></td></tr></table></figure>



<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>You want to create 35 different quiz files for 35 students tocheck their knowledge about sates and their capitals in America. Every quiz should include 50 multiple choice questions, and they should be in different order.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># randomQuizGenerator.py - Creates quizzes with questions and answers in</span></span><br><span class="line"><span class="comment"># random order, along with the answer key.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># The quiz data. Keys are states and values are their capitals.</span></span><br><span class="line"></span><br><span class="line">capitals = &#123;<span class="string">'Alabama'</span>: <span class="string">'Montgomery'</span>, <span class="string">'Alaska'</span>: <span class="string">'Juneau'</span>, <span class="string">'Arizona'</span>: <span class="string">'Phoenix'</span>,</span><br><span class="line"><span class="string">'Arkansas'</span>: <span class="string">'Little Rock'</span>, <span class="string">'California'</span>: <span class="string">'Sacramento'</span>, <span class="string">'Colorado'</span>: <span class="string">'Denver'</span>,</span><br><span class="line"><span class="string">'Connecticut'</span>: <span class="string">'Hartford'</span>, <span class="string">'Delaware'</span>: <span class="string">'Dover'</span>, <span class="string">'Florida'</span>: <span class="string">'Tallahassee'</span>,</span><br><span class="line"><span class="string">'Georgia'</span>: <span class="string">'Atlanta'</span>, <span class="string">'Hawaii'</span>: <span class="string">'Honolulu'</span>, <span class="string">'Idaho'</span>: <span class="string">'Boise'</span>, <span class="string">'Illinois'</span>:</span><br><span class="line"><span class="string">'Springfield'</span>, <span class="string">'Indiana'</span>: <span class="string">'Indianapolis'</span>, <span class="string">'Iowa'</span>: <span class="string">'Des Moines'</span>, <span class="string">'Kansas'</span>:</span><br><span class="line"><span class="string">'Topeka'</span>, <span class="string">'Kentucky'</span>: <span class="string">'Frankfort'</span>, <span class="string">'Louisiana'</span>: <span class="string">'Baton Rouge'</span>, <span class="string">'Maine'</span>:</span><br><span class="line"><span class="string">'Augusta'</span>, <span class="string">'Maryland'</span>: <span class="string">'Annapolis'</span>, <span class="string">'Massachusetts'</span>: <span class="string">'Boston'</span>, <span class="string">'Michigan'</span>:</span><br><span class="line"><span class="string">'Lansing'</span>, <span class="string">'Minnesota'</span>: <span class="string">'Saint Paul'</span>, <span class="string">'Mississippi'</span>: <span class="string">'Jackson'</span>, <span class="string">'Missouri'</span>:</span><br><span class="line"><span class="string">'Jefferson City'</span>, <span class="string">'Montana'</span>: <span class="string">'Helena'</span>, <span class="string">'Nebraska'</span>: <span class="string">'Lincoln'</span>, <span class="string">'Nevada'</span>:</span><br><span class="line"><span class="string">'Carson City'</span>, <span class="string">'New Hampshire'</span>: <span class="string">'Concord'</span>, <span class="string">'New Jersey'</span>: <span class="string">'Trenton'</span>, </span><br><span class="line"><span class="string">'New Mexico'</span>: <span class="string">'Santa Fe'</span>, <span class="string">'New York'</span>: <span class="string">'Albany'</span>, <span class="string">'North Carolina'</span>: <span class="string">'Raleigh'</span>,</span><br><span class="line"><span class="string">'North Dakota'</span>: <span class="string">'Bismarck'</span>, <span class="string">'Ohio'</span>: <span class="string">'Columbus'</span>, <span class="string">'Oklahoma'</span>: <span class="string">'Oklahoma City'</span>,</span><br><span class="line"><span class="string">'Oregon'</span>: <span class="string">'Salem'</span>, <span class="string">'Pennsylvania'</span>: <span class="string">'Harrisburg'</span>, <span class="string">'Rhode Island'</span>: <span class="string">'Providence'</span>,</span><br><span class="line"><span class="string">'South Carolina'</span>: <span class="string">'Columbia'</span>, <span class="string">'South Dakota'</span>: <span class="string">'Pierre'</span>, <span class="string">'Tennessee'</span>:</span><br><span class="line"><span class="string">'Nashville'</span>, <span class="string">'Texas'</span>: <span class="string">'Austin'</span>, <span class="string">'Utah'</span>: <span class="string">'Salt Lake City'</span>, <span class="string">'Vermont'</span>:</span><br><span class="line"><span class="string">'Montpelier'</span>, <span class="string">'Virginia'</span>: <span class="string">'Richmond'</span>, <span class="string">'Washington'</span>: <span class="string">'Olympia'</span>, </span><br><span class="line"><span class="string">'West Virginia'</span>: <span class="string">'Charleston'</span>, <span class="string">'Wisconsin'</span>: <span class="string">'Madison'</span>, <span class="string">'Wyoming'</span>: <span class="string">'Cheyenne'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate 35 quiz files.</span></span><br><span class="line"><span class="keyword">for</span> quizNum <span class="keyword">in</span> range(<span class="number">35</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Create the quiz and answer key files.</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Write out the header for the quiz.</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Shuffle the order of the states.</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Loop through all 50 states, making a question for each.</span></span><br><span class="line"><span class="comment"># Create the quiz and answer key files.</span></span><br><span class="line"></span><br><span class="line">    quizFile = open(<span class="string">'capitalsquiz%s.txt'</span> % (quizNum + <span class="number">1</span>), <span class="string">'w'</span>)</span><br><span class="line">    answerKeyFile = open(<span class="string">'capitalsquiz_answers%s.txt'</span> % (quizNum + <span class="number">1</span>), <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write out the header for the quiz.</span></span><br><span class="line"></span><br><span class="line">    quizFile.write(<span class="string">'Name:\n\nDate:\n\nPeriod:\n\n'</span>)</span><br><span class="line">    quizFile.write((<span class="string">' '</span> * <span class="number">20</span>) + <span class="string">'State Capitals Quiz (Form %s)'</span> % (quizNum + <span class="number">1</span>))</span><br><span class="line">    quizFile.write(<span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shuffle the order of the states.</span></span><br><span class="line"></span><br><span class="line">    states = list(capitals.keys())</span><br><span class="line">    random.shuffle(states)<span class="comment">#change the order of the list in random</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Loop through all 50 states, making a question for each.</span></span><br><span class="line"><span class="comment"># Loop through all 50 states, making a question for each.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> questionNum <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get right and wrong answers.</span></span><br><span class="line"></span><br><span class="line">        correctAnswer = capitals[states[questionNum]]</span><br><span class="line">        wrongAnswers = list(capitals.values())</span><br><span class="line">        <span class="keyword">del</span> wrongAnswers[wrongAnswers.index(correctAnswer)] <span class="comment">#delete the correct answer</span></span><br><span class="line">        wrongAnswers = random.sample(wrongAnswers, <span class="number">3</span>) <span class="comment">#get three of them randomly</span></span><br><span class="line">        answerOptions = wrongAnswers + [correctAnswer]</span><br><span class="line">        random.shuffle(answerOptions) <span class="comment">#change the order of the options randomly</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Write the question and answer options to the quiz file.</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Write the answer key to a file.</span></span><br><span class="line"><span class="comment"># Loop through all 50 states, making a question for each.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> questionNum <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write the question and the answer options to the quiz file.</span></span><br><span class="line"></span><br><span class="line">        quizFile.write(<span class="string">'%s. What is the capital of %s?\n'</span> % (questionNum + <span class="number">1</span>,states[questionNum]))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            quizFile.write(<span class="string">' %s. %s\n'</span> % (<span class="string">'ABCD'</span>[i], answerOptions[i]))</span><br><span class="line">        quizFile.write(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write the answer key to a file.</span></span><br><span class="line"></span><br><span class="line">        answerKeyFile.write(<span class="string">'%s. %s\n'</span> % (questionNum + <span class="number">1</span>, <span class="string">'ABCD'</span>[answerOptions.index(correctAnswer)]))</span><br><span class="line">    quizFile.close()</span><br><span class="line">    answerKeyFile.close()</span><br></pre></td></tr></table></figure>

<p>Name: </p>
<p>Date: </p>
<p>Period: </p>
<p>​                    State Capitals Quiz (Form 1) </p>
<ol>
<li>What is the capital of West Virginia? </li>
</ol>
<p>A. Hartford </p>
<p>B. Santa Fe </p>
<p>C. Harrisburg </p>
<p>D. Charleston </p>
<ol start="2">
<li>What is the capital of Colorado? </li>
</ol>
<p>A. Raleigh </p>
<p>B. Harrisburg </p>
<p>C. Denver </p>
<p>D. Lincoln</p>
<p>… …</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>reading seminar整理</title>
    <url>/2020/07/26/reading-seminar%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="reading-seminar-collection"><a href="#reading-seminar-collection" class="headerlink" title="reading seminar collection"></a>reading seminar collection</h1><h2 id="心理学"><a href="#心理学" class="headerlink" title="心理学"></a>心理学</h2><p><img src="https://s1.ax1x.com/2020/07/26/aptwm6.png" alt="aptwm6.png"></p>
<h2 id="经济学"><a href="#经济学" class="headerlink" title="经济学"></a>经济学</h2><p>《第一本经济学》</p>
<p><a href="https://imgchr.com/i/aptfnP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/26/aptfnP.png" alt="aptfnP.png"></a></p>
<p><img src="https://s1.ax1x.com/2020/07/26/apw2e1.png" alt="apw2e1.png"></p>
<p><img src="https://s1.ax1x.com/2020/08/02/aJk6Gn.png" alt="aJk6Gn.png"></p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>-reading seminar</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习5</title>
    <url>/2020/06/26/python%E5%AD%A6%E4%B9%A05/</url>
    <content><![CDATA[<h1 id="Python-dictionary"><a href="#Python-dictionary" class="headerlink" title="Python-dictionary"></a>Python-dictionary</h1><h2 id="dictionary-and-import"><a href="#dictionary-and-import" class="headerlink" title="dictionary and import"></a>dictionary and import</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=&#123;<span class="string">'name'</span>:<span class="string">'Zophie'</span>,<span class="string">'age'</span>:<span class="number">7</span>&#125;</span><br><span class="line">spam[<span class="string">'name'</span>]</span><br><span class="line"><span class="comment">#out:'Zophie'</span></span><br></pre></td></tr></table></figure>

<p><code>values</code>&amp;<code>keys</code>&amp;<code>items</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=&#123;<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'age'</span>:<span class="string">'42'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> spam.values():</span><br><span class="line">    print(v)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> spam.keys():</span><br><span class="line">    print(k)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> spam.items():</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>out:</p>
<p>red </p>
<p>42 </p>
<p>color </p>
<p>age </p>
<p>(‘color’, ‘red’)</p>
<p>(‘age’, ‘42’)</p>
<h2 id="use-the-factor-in-dictionary-to-form-list"><a href="#use-the-factor-in-dictionary-to-form-list" class="headerlink" title="use the factor in dictionary to form list"></a>use the factor in dictionary to form list</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=&#123;<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'age'</span>:<span class="string">'42'</span>&#125;</span><br><span class="line">list(spam.keys())</span><br><span class="line"><span class="comment">#out:['color', 'age']</span></span><br></pre></td></tr></table></figure>



<p>use the factors in <code>items</code> at the same time</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=&#123;<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'age'</span>:<span class="string">'42'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> spam.items():</span><br><span class="line">    print(<span class="string">'Key: '</span>+k+<span class="string">' Value: '</span>+str(v))</span><br></pre></td></tr></table></figure>

<p>out:</p>
<p>Key: color Value: red<br>Key: age Value: 42</p>
<p>use the <code>keys</code> to find the <code>values</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers=&#123;<span class="string">'one'</span>:<span class="number">1</span>,<span class="string">'two'</span>:<span class="number">2</span>,<span class="string">'three'</span>:<span class="number">3</span>&#125;</span><br><span class="line">print(numbers[<span class="string">'two'</span>])</span><br><span class="line"><span class="comment">#out:2</span></span><br></pre></td></tr></table></figure>

<p>but <code>values</code> can’t be used to find <code>keys</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers=&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">print</span> (numbers[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">KeyError                                  Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-1-d797711df7b1&gt; in &lt;module&gt;</span><br><span class="line">      1 numbers&#x3D;&#123;&quot;one&quot;: 1, &quot;two&quot;: 2&#125;</span><br><span class="line">----&gt; 2 print (numbers[2])</span><br><span class="line"></span><br><span class="line">KeyError: 2</span><br></pre></td></tr></table></figure>

<p>use with <code>sort</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers=&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: [<span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>], <span class="string">"three"</span>: <span class="number">3</span>&#125;</span><br><span class="line">x = (numbers[<span class="string">"two"</span>])</span><br><span class="line">print(x)</span><br><span class="line">x.sort()</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<p>out:</p>
<p>[4, 6, 3]<br>[3, 4, 6]</p>
<p>use <code>pop</code> to delete items</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers=&#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>:<span class="number">4</span>&#125;</span><br><span class="line">numbers.pop(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (numbers)</span><br><span class="line"><span class="comment">#out:&#123;1: 2&#125;</span></span><br></pre></td></tr></table></figure>



<p>use <code>get</code> to get  values</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=&#123;<span class="string">"uno"</span>:[<span class="string">"one"</span>,<span class="number">1</span>],<span class="string">"dos"</span>:[<span class="string">"two"</span>,<span class="number">2</span>]&#125;</span><br><span class="line">d.get(<span class="string">"uno"</span>)</span><br><span class="line"><span class="comment">#out:['one', 1]</span></span><br></pre></td></tr></table></figure>

<p>if there is no key </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=&#123;<span class="string">"uno"</span>:[<span class="string">"one"</span>,<span class="number">1</span>],<span class="string">"dos"</span>:[<span class="string">"two"</span>,<span class="number">2</span>]&#125;</span><br><span class="line"><span class="keyword">print</span> (d.get(<span class="number">3</span>,<span class="string">'cat'</span>))</span><br><span class="line"><span class="comment">#out:cat</span></span><br></pre></td></tr></table></figure>



<p>example for dictionary</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k=input()</span><br><span class="line">v1=int(input())</span><br><span class="line">v2=int(input())</span><br><span class="line">v3=int(input())</span><br><span class="line">d=&#123;k:(v1,v2,v3)&#125;</span><br><span class="line"><span class="keyword">if</span> v1&gt;=<span class="number">78</span> <span class="keyword">and</span> v2&gt;=<span class="number">78</span> <span class="keyword">and</span> v3&gt;=<span class="number">78</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> d.items():</span><br><span class="line">        print(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'not pass'</span>)</span><br></pre></td></tr></table></figure>

<p>out:</p>
<table>
<thead>
<tr>
<th>Jim</th>
<th>Jim</th>
</tr>
</thead>
<tbody><tr>
<td>78</td>
<td>90</td>
</tr>
<tr>
<td>76</td>
<td>78</td>
</tr>
<tr>
<td>90</td>
<td>80</td>
</tr>
<tr>
<td>not pass</td>
<td>(‘Jim’, (90, 78, 80))</td>
</tr>
</tbody></table>
<h2 id="use-setdefault-to-add-items-to-dictionary"><a href="#use-setdefault-to-add-items-to-dictionary" class="headerlink" title="use setdefault to add items to dictionary"></a>use <code>setdefault</code> to add items to dictionary</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=&#123;<span class="string">'name'</span>:<span class="string">'Pooka'</span>,<span class="string">'age'</span>:<span class="number">5</span>&#125;</span><br><span class="line">spam.setdefault(<span class="string">'color'</span>,<span class="string">'black'</span>)</span><br><span class="line">spam</span><br><span class="line">spam.setdefault(<span class="string">'color'</span>,<span class="string">'white'</span>)</span><br><span class="line">spam</span><br></pre></td></tr></table></figure>

<p>out: {‘name’: ‘Pooka’, ‘age’: 5, ‘color’: ‘black’}</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message=<span class="string">'It was a bright cold day in April,and the clocks were striking thirtheen.'</span></span><br><span class="line">count=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> message:</span><br><span class="line">    count.setdefault(character,<span class="number">0</span>)<span class="comment">#creat the items for counting the number</span></span><br><span class="line">    count[character]=count[character]+<span class="number">1</span><span class="comment">#add one more to count</span></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure>

<p>out: {‘I’: 1, ‘t’: 6, ‘ ‘: 12, ‘w’: 2, ‘a’: 4, ‘s’: 3, ‘b’: 1, ‘r’: 5, ‘i’: 6, ‘g’: 2, ‘h’: 4, ‘c’: 3, ‘o’: 2, ‘l’: 3, ‘d’: 3, ‘y’: 1, ‘n’: 4, ‘A’: 1, ‘p’: 1, ‘,’: 1, ‘e’: 5, ‘k’: 2, ‘.’: 1}</p>
<p>use of <code>pprint</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line">score=[<span class="number">90</span>,<span class="number">89</span>,<span class="number">80</span>,<span class="number">77</span>,<span class="number">89</span>,<span class="number">77</span>,<span class="number">90</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">76</span>,<span class="number">89</span>]</span><br><span class="line">result=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> score:</span><br><span class="line">    <span class="keyword">if</span> i&gt;=<span class="number">90</span>:</span><br><span class="line">        result.setdefault(<span class="string">'A*'</span>,<span class="number">0</span>) <span class="comment">#if there is no value, the value is 0</span></span><br><span class="line">        result[<span class="string">'A*'</span>]=result[<span class="string">'A*'</span>]+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i&gt;=<span class="number">75</span> <span class="keyword">and</span> i&lt;<span class="number">90</span>:</span><br><span class="line">        result.setdefault(<span class="string">'A'</span>,<span class="number">0</span>)</span><br><span class="line">        result[<span class="string">'A'</span>]=result[<span class="string">'A'</span>]+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i&gt;=<span class="number">60</span> <span class="keyword">and</span> i&lt;<span class="number">75</span>:</span><br><span class="line">        result.setdefault(<span class="string">'B'</span>,<span class="number">0</span>)</span><br><span class="line">        result[<span class="string">'B'</span>]=result[<span class="string">'B'</span>]+<span class="number">1</span></span><br><span class="line">pprint.pprint(result)</span><br></pre></td></tr></table></figure>

<p>out:{‘A’: 9, ‘A*’: 2}</p>
<h2 id="used-in-game"><a href="#used-in-game" class="headerlink" title="used in game:"></a>used in game:</h2><p>create background</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theBoard = &#123;<span class="string">'top-L'</span>: <span class="string">' '</span>, <span class="string">'top-M'</span>: <span class="string">' '</span>, <span class="string">'top-R'</span>: <span class="string">' '</span>,</span><br><span class="line">            <span class="string">'mid-L'</span>: <span class="string">' '</span>, <span class="string">'mid-M'</span>: <span class="string">' '</span>, <span class="string">'mid-R'</span>: <span class="string">' '</span>,</span><br><span class="line">            <span class="string">'low-L'</span>: <span class="string">' '</span>, <span class="string">'low-M'</span>: <span class="string">' '</span>, <span class="string">'low-R'</span>: <span class="string">' '</span>&#125; <span class="comment">#create dictionary to record the value</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printBoard</span><span class="params">(board)</span>:</span></span><br><span class="line">    print(board[<span class="string">'top-L'</span>] + <span class="string">'|'</span> + board[<span class="string">'top-M'</span>] + <span class="string">'|'</span> + board[<span class="string">'top-R'</span>]) <span class="comment">#put the records in the background</span></span><br><span class="line">    print(<span class="string">'-+-+-'</span>) <span class="comment">#separate the rows</span></span><br><span class="line">    print(board[<span class="string">'mid-L'</span>] + <span class="string">'|'</span> + board[<span class="string">'mid-M'</span>] + <span class="string">'|'</span> + board[<span class="string">'mid-R'</span>])</span><br><span class="line">    print(<span class="string">'-+-+-'</span>)</span><br><span class="line">    print(board[<span class="string">'low-L'</span>] + <span class="string">'|'</span> + board[<span class="string">'low-M'</span>] + <span class="string">'|'</span> + board[<span class="string">'low-R'</span>])</span><br><span class="line">printBoard(theBoard)</span><br></pre></td></tr></table></figure>

<p> | |<br>-+-+-<br> | |<br>-+-+-<br> | | </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theBoard = &#123;<span class="string">'top-L'</span>: <span class="string">'O'</span>, <span class="string">'top-M'</span>: <span class="string">'O'</span>, <span class="string">'top-R'</span>: <span class="string">'O'</span>, <span class="string">'mid-L'</span>: <span class="string">'X'</span>, <span class="string">'mid-M'</span>:</span><br><span class="line"><span class="string">'X'</span>, <span class="string">'mid-R'</span>: <span class="string">' '</span>, <span class="string">'low-L'</span>: <span class="string">' '</span>, <span class="string">'low-M'</span>: <span class="string">' '</span>, <span class="string">'low-R'</span>: <span class="string">'X'</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printBoard</span><span class="params">(board)</span>:</span> <span class="comment">#make the printing processes a function</span></span><br><span class="line">    print(board[<span class="string">'top-L'</span>] + <span class="string">'|'</span> + board[<span class="string">'top-M'</span>] + <span class="string">'|'</span> + board[<span class="string">'top-R'</span>])</span><br><span class="line">    print(<span class="string">'-+-+-'</span>)</span><br><span class="line">    print(board[<span class="string">'mid-L'</span>] + <span class="string">'|'</span> + board[<span class="string">'mid-M'</span>] + <span class="string">'|'</span> + board[<span class="string">'mid-R'</span>])</span><br><span class="line">    print(<span class="string">'-+-+-'</span>)</span><br><span class="line">    print(board[<span class="string">'low-L'</span>] + <span class="string">'|'</span> + board[<span class="string">'low-M'</span>] + <span class="string">'|'</span> + board[<span class="string">'low-R'</span>])</span><br><span class="line">printBoard(theBoard)</span><br></pre></td></tr></table></figure>

<p>O|O|O<br>-+-+-<br>X|X|<br>-+-+-<br> | |X</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">turn = <span class="string">'X'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    printBoard(theBoard) <span class="comment">#the function</span></span><br><span class="line">    print(<span class="string">'Turn for '</span> + turn + <span class="string">'. Move on which space?'</span>)</span><br><span class="line">    move = input()</span><br><span class="line">    theBoard[move] = turn</span><br><span class="line">    <span class="keyword">if</span> turn == <span class="string">'X'</span>:</span><br><span class="line">        turn = <span class="string">'O'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        turn = <span class="string">'X'</span></span><br><span class="line">printBoard(theBoard)</span><br></pre></td></tr></table></figure>

<p>O|O|O<br>-+-+-<br>X|X|<br>-+-+-<br> | |X<br>Turn for X. Move on which space?<br>top-L<br>X|O|O<br>-+-+-<br>X|X|<br>-+-+-<br> | |X</p>
<p>… …</p>
<p>another example to record the number:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">allGuests=&#123;<span class="string">'Alice'</span>:&#123;<span class="string">'apples'</span>:<span class="number">5</span>,<span class="string">'pretzels'</span>:<span class="number">12</span>&#125;,</span><br><span class="line">          <span class="string">'Bob'</span>:&#123;<span class="string">'ham sandwiches'</span>:<span class="number">3</span>,<span class="string">'apples'</span>:<span class="number">2</span>&#125;,</span><br><span class="line">          <span class="string">'Carol'</span>:&#123;<span class="string">'cups'</span>:<span class="number">3</span>,<span class="string">'apple pies'</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">totalBrought</span><span class="params">(guests,item)</span>:</span></span><br><span class="line">    numBrought=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> guests.items():</span><br><span class="line">        numBrought=numBrought+v.get(item,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> numBrought</span><br><span class="line">print(<span class="string">'Number of things being brought:'</span>)</span><br><span class="line">print(<span class="string">' - Apples '</span> + str(totalBrought(allGuests, <span class="string">'apples'</span>)))</span><br><span class="line">print(<span class="string">' - Cups '</span> + str(totalBrought(allGuests, <span class="string">'cups'</span>)))</span><br><span class="line">print(<span class="string">' - Cakes '</span> + str(totalBrought(allGuests, <span class="string">'cakes'</span>)))</span><br><span class="line">print(<span class="string">' - Ham Sandwiches '</span> + str(totalBrought(allGuests, <span class="string">'ham sandwiches'</span>)))</span><br><span class="line">print(<span class="string">' - Apple Pies '</span> + str(totalBrought(allGuests, <span class="string">'apple pies'</span>)))</span><br></pre></td></tr></table></figure>

<p>Number of things being brought:</p>
<ul>
<li>Apples 7</li>
<li>Cups 3</li>
<li>Cakes 0</li>
<li>Ham Sandwiches 3</li>
<li>Apple Pies 1</li>
</ul>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习6</title>
    <url>/2020/06/27/python%E5%AD%A6%E4%B9%A06/</url>
    <content><![CDATA[<h1 id="Python-字符串"><a href="#Python-字符串" class="headerlink" title="Python-字符串"></a>Python-字符串</h1><h3 id="双引号-“-“-表string"><a href="#双引号-“-“-表string" class="headerlink" title="双引号 “ “ 表string"></a>双引号 “ “ 表string</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">"That is Alice's cat."</span></span><br><span class="line"><span class="comment">#out: That is Alice's cat.</span></span><br></pre></td></tr></table></figure>

<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><table>
<thead>
<tr>
<th>转义字符</th>
<th>打印为</th>
</tr>
</thead>
<tbody><tr>
<td>```&#39;</td>
<td>单引号</td>
</tr>
<tr>
<td>```&quot;</td>
<td>双引号</td>
</tr>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>``` \</td>
<td>倒斜杠</td>
</tr>
</tbody></table>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Hello there!\nHow are you?\nI\'m doing fine."</span>)</span><br><span class="line"><span class="comment">#Hello there!</span></span><br><span class="line"><span class="comment">#How are you?</span></span><br><span class="line"><span class="comment">#I'm doing fine.</span></span><br></pre></td></tr></table></figure>

<h3 id="开头加r，表示全部为字符串"><a href="#开头加r，表示全部为字符串" class="headerlink" title="开头加r，表示全部为字符串"></a>开头加r，表示全部为字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">r'That is Carol\'s cat.'</span>)</span><br><span class="line"><span class="comment">#out:That is Carol\'s cat.</span></span><br></pre></td></tr></table></figure>

<h3 id="‘’’-‘’’中加段落"><a href="#‘’’-‘’’中加段落" class="headerlink" title="‘’’ ‘’’中加段落"></a>‘’’ ‘’’中加段落</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'''Dear Alice, </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Eve's cat has been arrested for catnapping, cat burglary, and extortion. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Sincerely, </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Bob'''</span>)</span><br></pre></td></tr></table></figure>

<p>out：</p>
<p>Dear Alice, </p>
<p>Eve’s cat has been arrested for catnapping, cat burglary, and extortion. </p>
<p>Sincerely, </p>
<p>Bob</p>
<h3 id="“””-“””中加注释："><a href="#“””-“””中加注释：" class="headerlink" title="“”” “””中加注释："></a>“”” “””中加注释：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""This is a test Python program. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Written by Al Sweigart al@inventwithpython.com </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This program was designed for Python 3, not Python 2.  # annotation </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""This is a multiline comment to help </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">explain what the spam() function does."""</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">'Hello!'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="下标与切片-Subscript-and-slice"><a href="#下标与切片-Subscript-and-slice" class="headerlink" title="下标与切片  Subscript and slice"></a>下标与切片  Subscript and slice</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">'Hello world!'</span></span><br><span class="line">spam[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#out：'H' </span></span><br><span class="line">spam[<span class="number">4</span>]</span><br><span class="line"><span class="comment">#out：'o' </span></span><br><span class="line">spam[<span class="number">-1</span>]</span><br><span class="line"><span class="comment">#out：'!' </span></span><br><span class="line">spam[<span class="number">0</span>:<span class="number">5</span>] </span><br><span class="line"><span class="comment">#out：'Hello' </span></span><br><span class="line">spam[:<span class="number">5</span>] </span><br><span class="line"><span class="comment">#out：'Hello' </span></span><br><span class="line">spam[<span class="number">6</span>:]</span><br><span class="line"><span class="comment">#out：'world!'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">'Hello world!'</span></span><br><span class="line">fizz = spam[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">fizz</span><br><span class="line"><span class="comment">#out：'Hello'</span></span><br></pre></td></tr></table></figure>

<h3 id="in-and-not-in"><a href="#in-and-not-in" class="headerlink" title="in and not in"></a>in and not in</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello'</span> <span class="keyword">in</span> <span class="string">'Hello World'</span></span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'Hello'</span> <span class="keyword">in</span> <span class="string">'Hello'</span></span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'HELLO'</span> <span class="keyword">in</span> <span class="string">'Hello World'</span></span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"><span class="string">''</span> <span class="keyword">in</span> <span class="string">'spam'</span></span><br><span class="line"><span class="comment">#out:True</span></span><br><span class="line"><span class="string">'cats'</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'cats and dogs'</span></span><br><span class="line"><span class="comment">#out:False</span></span><br></pre></td></tr></table></figure>

<h2 id="upper-、lower-、isupper-和-islower"><a href="#upper-、lower-、isupper-和-islower" class="headerlink" title="upper()、lower()、isupper()和 islower()"></a>upper()、lower()、isupper()和 islower()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">'Hello world!'</span></span><br><span class="line">spam = spam.upper()</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:'HELLO WORLD!' </span></span><br><span class="line">spam = spam.lower()</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:'hello world!'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'How are you?'</span>) </span><br><span class="line">feeling = input() </span><br><span class="line"><span class="keyword">if</span> feeling.lower() == <span class="string">'great'</span>: </span><br><span class="line">	print(<span class="string">'I feel great too.'</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">	print(<span class="string">'I hope the rest of your day is good.'</span>)</span><br></pre></td></tr></table></figure>

<p>out：</p>
<p>How are you? </p>
<p><strong>GREat</strong> </p>
<p>I feel great too.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">'Hello world!'</span></span><br><span class="line">spam.islower()</span><br><span class="line"><span class="comment">#out：False </span></span><br><span class="line">spam.isupper() </span><br><span class="line"><span class="comment">#out：False </span></span><br><span class="line"><span class="string">'HELLO'</span>.isupper()</span><br><span class="line"><span class="comment">#out：True </span></span><br><span class="line"><span class="string">'abc12345'</span>.islower()</span><br><span class="line"><span class="comment">#out：True </span></span><br><span class="line"><span class="string">'12345'</span>.islower()</span><br><span class="line"><span class="comment">#out：False </span></span><br><span class="line"><span class="string">'12345'</span>.isupper()</span><br><span class="line"><span class="comment">#out：False</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello'</span>.upper()</span><br><span class="line"><span class="comment">#out：'HELLO' </span></span><br><span class="line"><span class="string">'Hello'</span>.upper().lower()</span><br><span class="line"><span class="comment">#out：'hello' </span></span><br><span class="line"><span class="string">'Hello'</span>.upper().lower().upper()</span><br><span class="line"><span class="comment">#out：'HELLO' </span></span><br><span class="line"><span class="string">'HELLO'</span>.lower()</span><br><span class="line"><span class="comment">#out：'hello' </span></span><br><span class="line"><span class="string">'HELLO'</span>.lower().islower()</span><br><span class="line"><span class="comment">#out：True</span></span><br></pre></td></tr></table></figure>

<h2 id="isX-字符串方法"><a href="#isX-字符串方法" class="headerlink" title="isX 字符串方法"></a>isX 字符串方法</h2><ul>
<li><p>isalpha()返回 True，如果字符串只包含字母，并且非空； </p>
</li>
<li><p>isalnum()返回 True，如果字符串只包含字母和数字，并且非空； </p>
</li>
<li><p>isdecimal()返回 True，如果字符串只包含数字字符，并且非空； </p>
</li>
<li><p>isspace()返回 True，如果字符串只包含空格、制表符和换行，并且非空； </p>
</li>
<li><p>istitle()返回 True，如果字符串仅包含以大写字母开头、后面都是小写字母的单词。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'hello'</span>.isalpha()</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'hello123'</span>.isalpha()</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"><span class="string">'hello123'</span>.isalnum()</span><br><span class="line"><span class="comment">#out:True</span></span><br><span class="line"><span class="string">'hello'</span>.isalnum()</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'123'</span>.isdecimal()</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">' '</span>.isspace()</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'This Is Title Case'</span>.istitle()</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'This Is Title Case 123'</span>.istitle()</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'This Is not Title Case'</span>.istitle()</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"><span class="string">'This Is NOT Title Case Either'</span>.istitle()</span><br><span class="line"><span class="comment">#out:False</span></span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">	print(<span class="string">'Enter your age:'</span>) </span><br><span class="line">	age = input() </span><br><span class="line">	<span class="keyword">if</span> age.isdecimal(): </span><br><span class="line">		<span class="keyword">break</span> </span><br><span class="line">	print(<span class="string">'Please enter a number for your age.'</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">	print(<span class="string">'Select a new password (letters and numbers only):'</span>) </span><br><span class="line">    password = input() </span><br><span class="line">    <span class="keyword">if</span> password.isalnum(): </span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line">    print(<span class="string">'Passwords can only have letters and numbers.'</span>)</span><br></pre></td></tr></table></figure>

<p>Enter your age: </p>
<p>forty two </p>
<p>Please enter a number for your age. </p>
<p>Enter your age: </p>
<p>42 </p>
<p>Select a new password (letters and numbers only): </p>
<p>secr3t! </p>
<p>Passwords can only have letters and numbers. </p>
<p>Select a new password (letters and numbers only): </p>
<p>secr3t</p>
<h2 id="startswith-和-endswith"><a href="#startswith-和-endswith" class="headerlink" title="startswith()和 endswith()"></a>startswith()和 endswith()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello world!'</span>.startswith(<span class="string">'Hello'</span>)</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'Hello world!'</span>.endswith(<span class="string">'world!'</span>)</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'abc123'</span>.startswith(<span class="string">'abcdef'</span>)</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"><span class="string">'abc123'</span>.endswith(<span class="string">'12'</span>)</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"><span class="string">'Hello world!'</span>.startswith(<span class="string">'Hello world!'</span>)</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'Hello world!'</span>.endswith(<span class="string">'Hello world!'</span>)</span><br><span class="line"><span class="comment">#out:True</span></span><br></pre></td></tr></table></figure>

<h2 id="join-和-split"><a href="#join-和-split" class="headerlink" title="join()和 split()"></a>join()和 split()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">', '</span>.join([<span class="string">'cats'</span>, <span class="string">'rats'</span>, <span class="string">'bats'</span>])</span><br><span class="line"><span class="string">'cats, rats, bats'</span> </span><br><span class="line"><span class="string">' '</span>.join([<span class="string">'My'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'Simon'</span>])</span><br><span class="line"><span class="string">'My name is Simon'</span> </span><br><span class="line"><span class="string">'ABC'</span>.join([<span class="string">'My'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'Simon'</span>])</span><br><span class="line"><span class="string">'MyABCnameABCisABCSimon'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'My name is Simon'</span>.split() <span class="comment">#默认以空格分隔</span></span><br><span class="line"><span class="comment">#out：['My', 'name', 'is', 'Simon']</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'MyABCnameABCisABCSimon'</span>.split(<span class="string">'ABC'</span>)</span><br><span class="line"><span class="comment">#out：['My', 'name', 'is', 'Simon'] </span></span><br><span class="line"><span class="string">'My name is Simon'</span>.split(<span class="string">'m'</span>)</span><br><span class="line"><span class="comment">#out：['My na', 'e is Si', 'on']</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">'''Dear Alice,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">How have you been? I am fine.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">There is a container in the fridge</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">that is labeled "Milk Experiment".</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please do not drink it.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Sincerely,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Bob'''</span></span><br><span class="line">spam.split(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#out：['Dear Alice,', 'How have you been? I am fine.', 'There is a container in the #fridge', 'that is labeled "Milk Experiment".', '', 'Please do not drink it.', </span></span><br><span class="line"><span class="comment">#'Sincerely,', 'Bob']</span></span><br></pre></td></tr></table></figure>

<h2 id="rjust-、ljust-和-center"><a href="#rjust-、ljust-和-center" class="headerlink" title="rjust()、ljust()和 center()"></a>rjust()、ljust()和 center()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello'</span>.rjust(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#out:'          Hello' </span></span><br><span class="line"><span class="string">'Hello'</span>.rjust(<span class="number">20</span>)</span><br><span class="line"><span class="comment">#out:'                    Hello' </span></span><br><span class="line"><span class="string">'Hello World'</span>.rjust(<span class="number">20</span>)</span><br><span class="line"><span class="comment">#out:'          Hello World' </span></span><br><span class="line"><span class="string">'Hello'</span>.ljust(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#out:'Hello          '</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello'</span>.rjust(<span class="number">20</span>, <span class="string">'\*'</span>)</span><br><span class="line"><span class="comment">#out:'***************Hello' </span></span><br><span class="line"><span class="string">'Hello'</span>.ljust(<span class="number">20</span>, <span class="string">'-'</span>)</span><br><span class="line"><span class="comment">#out:'Hello---------------'</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello'</span>.center(<span class="number">20</span>)</span><br><span class="line"><span class="comment">#out:' Hello ' </span></span><br><span class="line"><span class="string">'Hello'</span>.center(<span class="number">20</span>, <span class="string">'='</span>)</span><br><span class="line"><span class="comment">#out:'=======Hello========'</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printPicnic</span><span class="params">(itemsDict, leftWidth, rightWidth)</span>:</span> </span><br><span class="line">	print(<span class="string">'PICNIC ITEMS'</span>.center(leftWidth + rightWidth, <span class="string">'-'</span>)) </span><br><span class="line">	<span class="keyword">for</span> k, v <span class="keyword">in</span> itemsDict.items(): </span><br><span class="line">		print(k.ljust(leftWidth, <span class="string">'.'</span>) + str(v).rjust(rightWidth)) </span><br><span class="line"></span><br><span class="line">picnicItems = &#123;<span class="string">'sandwiches'</span>: <span class="number">4</span>, <span class="string">'apples'</span>: <span class="number">12</span>, <span class="string">'cups'</span>: <span class="number">4</span>, <span class="string">'cookies'</span>: <span class="number">8000</span>&#125; </span><br><span class="line">printPicnic(picnicItems, <span class="number">12</span>, <span class="number">5</span>) </span><br><span class="line">printPicnic(picnicItems, <span class="number">20</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<p>—PICNIC ITEMS– </p>
<p>sandwiches.. 4 </p>
<p>apples…… 12 </p>
<p>cups…….. 4 </p>
<p>cookies….. 8000 </p>
<p>——-PICNIC ITEMS——- </p>
<p>sandwiches………. 4 </p>
<p>apples………….. 12 </p>
<p>cups……………. 4 </p>
<p>cookies…………. 8000</p>
<h2 id="strip-、rstrip-和-lstrip-删除空白字符"><a href="#strip-、rstrip-和-lstrip-删除空白字符" class="headerlink" title="strip()、rstrip()和 lstrip()删除空白字符"></a>strip()、rstrip()和 lstrip()删除空白字符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">' Hello World '</span></span><br><span class="line">spam.strip()</span><br><span class="line"><span class="comment">#out:'Hello World' </span></span><br><span class="line">spam.lstrip()</span><br><span class="line"><span class="comment">#out:'Hello World ' </span></span><br><span class="line">spam.rstrip()</span><br><span class="line"><span class="comment">#out:' Hello World'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">'SpamSpamBaconSpamEggsSpamSpam'</span></span><br><span class="line">spam.strip(<span class="string">'ampS'</span>)</span><br><span class="line"><span class="comment">#out:'BaconSpamEggs'</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>‘star’</title>
    <url>/2020/05/05/%E2%80%98star%E2%80%99/</url>
    <content><![CDATA[<p>列举所有六角星，使每条线上的数字和为26，数字取1-12，不可重复使用。</p>
<p> Enumerate all hexagon stars, make the sum of the Numbers on each line 26. Irreusable numbers are from 1-12. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">        <span class="keyword">if</span> a!=b:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                <span class="keyword">if</span> a!=c <span class="keyword">and</span> b!=c:</span><br><span class="line">                    <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                        <span class="keyword">if</span> a!=d <span class="keyword">and</span> b!=d <span class="keyword">and</span> c!=d:</span><br><span class="line">                            <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                <span class="keyword">if</span> a!=e <span class="keyword">and</span> b!=e <span class="keyword">and</span> c!=e <span class="keyword">and</span> d!=e:</span><br><span class="line">                                    <span class="keyword">for</span> f <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                        <span class="keyword">if</span> a!=f <span class="keyword">and</span> b!= f <span class="keyword">and</span> c!=f <span class="keyword">and</span> d!=f <span class="keyword">and</span> e!=f:</span><br><span class="line">                                            <span class="keyword">for</span> g <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                                <span class="keyword">if</span> a!=g <span class="keyword">and</span> b!= g <span class="keyword">and</span> c!=g <span class="keyword">and</span> d!=g <span class="keyword">and</span> e!=g <span class="keyword">and</span> f!=g:</span><br><span class="line">                                                    <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                                        <span class="keyword">if</span> a!=h <span class="keyword">and</span> b!=h <span class="keyword">and</span> c!=h <span class="keyword">and</span> d!=h <span class="keyword">and</span> e!=h <span class="keyword">and</span> f!=h <span class="keyword">and</span> g!=h:</span><br><span class="line">                                                            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                                                 <span class="keyword">if</span> a!=i <span class="keyword">and</span> b!=i <span class="keyword">and</span> c!=i <span class="keyword">and</span> d!=i <span class="keyword">and</span> e!=i <span class="keyword">and</span> f!=i <span class="keyword">and</span> g!=i <span class="keyword">and</span> h!=i:</span><br><span class="line">                                                                        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                                                             <span class="keyword">if</span> a!=j <span class="keyword">and</span> b!=j <span class="keyword">and</span> c!=j <span class="keyword">and</span> d!=j <span class="keyword">and</span> e!=j <span class="keyword">and</span> f!=j <span class="keyword">and</span> g!=j <span class="keyword">and</span> h!=j <span class="keyword">and</span> i!=j:</span><br><span class="line">                                                                                    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                                                                        <span class="keyword">if</span> a!=k <span class="keyword">and</span> b!=k <span class="keyword">and</span> c!=k <span class="keyword">and</span> d!=k <span class="keyword">and</span> e!=k <span class="keyword">and</span> f!=k <span class="keyword">and</span> g!=k <span class="keyword">and</span> h!=k <span class="keyword">and</span> i!=k <span class="keyword">and</span> j!=k:</span><br><span class="line">                                                                                            <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                                                                                <span class="keyword">if</span> a!=l <span class="keyword">and</span> b!=l <span class="keyword">and</span> c!=l <span class="keyword">and</span> d!=l <span class="keyword">and</span> e!=l <span class="keyword">and</span> f!=l <span class="keyword">and</span> g!=l <span class="keyword">and</span> h!=l <span class="keyword">and</span> i!=l <span class="keyword">and</span> j!=k <span class="keyword">and</span> k!=l:</span><br><span class="line">                                                                                                    <span class="keyword">if</span> a+c+f+h==<span class="number">26</span> <span class="keyword">and</span> a+d+g+k==<span class="number">26</span> <span class="keyword">and</span> h+i+j+k==<span class="number">26</span> <span class="keyword">and</span> b+c+d+e==<span class="number">26</span> <span class="keyword">and</span> b+f+i+l==<span class="number">26</span> <span class="keyword">and</span> e+g+j+l==<span class="number">26</span>:</span><br><span class="line">                                                                                                        print(<span class="string">'    '</span>,a)</span><br><span class="line">                                                                                                        print(b,<span class="string">''</span>,c,<span class="string">''</span>,d,<span class="string">''</span>,e)</span><br><span class="line">                                                                                                        print(<span class="string">' '</span>,f,<span class="string">'  '</span>,g)</span><br><span class="line">                                                                                                        print(h,<span class="string">''</span>,i,<span class="string">''</span>,j,<span class="string">''</span>,k)</span><br><span class="line">                                                                                                        print(<span class="string">'    '</span>,l)</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/05/05/YkVNfH.png" alt="YkVNfH.png"></p>
]]></content>
      <categories>
        <category>daily programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>《算法图解》读书笔记</title>
    <url>/2020/07/12/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<h1 id="《算法图解》Grokking-Algorithms-（1）"><a href="#《算法图解》Grokking-Algorithms-（1）" class="headerlink" title="《算法图解》Grokking Algorithms （1）"></a>《算法图解》Grokking Algorithms （1）</h1><h2 id="第一章-算法简介"><a href="#第一章-算法简介" class="headerlink" title="第一章 算法简介"></a>第一章 算法简介</h2><h3 id="二分法-dichotomy"><a href="#二分法-dichotomy" class="headerlink" title="二分法 dichotomy"></a>二分法 dichotomy</h3><p>definition：输入为<strong>有序</strong>的元素列表，若要找的元素存在，则返回其位置，否则返回null</p>
<blockquote>
<p>e.g. 1~100中找数字问题：猜测后会说大了，小了。</p>
<p>简单法查询：从1开始往上猜（至多99次）</p>
<p>二分法查询：50（小了，即可排除一半的数据），75（大了），… … (至多7次)</p>
<p>——大大缩短时间</p>
</blockquote>
<p>当数据量加大：</p>
<p>简单法：至多240k步</p>
<p>简单法：</p>
<p>240k—120k—60k—30k—15k—7.5k—3750—1875—937—468—234—117—58—29—14—7—3—1==&gt;17步</p>
<p>结论：对于n项：简单法：至多n步</p>
<p>​                             二分法：至多log2n步</p>
<p>查询代码：(python)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list,item)</span>:</span></span><br><span class="line">    low=<span class="number">0</span></span><br><span class="line">    high=len(list)<span class="number">-1</span> <span class="comment">#the last value in the list</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> low&lt;=high:</span><br><span class="line">        mid=(low+high)/<span class="number">2</span> <span class="comment">#the middle of the whole list</span></span><br><span class="line">        guess=list(mid)  <span class="comment">#check whether the value is correct</span></span><br><span class="line">        <span class="keyword">if</span> guess==item:  <span class="comment">#find the item</span></span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> guess&gt;item:   <span class="comment">#find again with deleting the other half of the list</span></span><br><span class="line">            high=mid<span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            low=mid<span class="number">-1</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">None</span>         <span class="comment">#item is not in list</span></span><br></pre></td></tr></table></figure>



<h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><p>O 用来表达运算速度，但不是时间</p>
<p>如：简单法的O = O(n)</p>
<p>二分法的O = O(log2n)</p>
<p>O后所跟的数据为最糟糕的情况</p>
<h4 id="算法运行时间以不同速度增加："><a href="#算法运行时间以不同速度增加：" class="headerlink" title="算法运行时间以不同速度增加："></a>算法运行时间以不同速度增加：</h4><p>假设一个运算要在10秒内完成，检查一个元素要1毫秒。</p>
<p>如果有100个元素要检查：简单法（100毫秒），二分法（检查7个元素，即7毫秒）</p>
<p>此时简单法是二分法的约15倍</p>
<p>实际有10亿个元素需要检查，二分法需要30毫秒（log2 1 000 000 000），简单法需要二分法的15倍即450毫秒？在10秒之内，可以选择？</p>
<p>不是。简单法需要10亿毫秒，相当于11天</p>
<h4 id="理解不同O的运算时间"><a href="#理解不同O的运算时间" class="headerlink" title="理解不同O的运算时间"></a>理解不同O的运算时间</h4><p>在纸上画16个格子：简单法：画16个格子——16步</p>
<p>​                                   二分法：将纸对折——4次</p>
<h4 id="常见的大O运行时间"><a href="#常见的大O运行时间" class="headerlink" title="常见的大O运行时间"></a>常见的大O运行时间</h4><p>O(log n)    二分法，对数时间</p>
<p>O(n)   简单法，线性时间</p>
<p>O(n*log n)     （第4章讲解，较为快速）</p>
<p>O(n^2)      （第二章讲解，比较慢）</p>
<p>O(n!)       旅行商问题：非常慢</p>
<p><img src="https://s1.ax1x.com/2020/07/12/U89gnU.jpg" alt="U89gnU.jpg"></p>
<h3 id="旅行商问题"><a href="#旅行商问题" class="headerlink" title="旅行商问题"></a>旅行商问题</h3><p>O(n！) : 运行时间如此长，意义何在？</p>
<p><img src="https://s1.ax1x.com/2020/07/12/U8ClbF.jpg" alt="U8ClbF.jpg"></p>
<p>5个城市就有5！=120种方法，6个有720种，7个有5040种… …</p>
<p>尚未有简便算法（可取近似值，详见第10章）</p>
<hr>
<hr>
<h2 id="第二章-选择排序"><a href="#第二章-选择排序" class="headerlink" title="第二章 选择排序"></a>第二章 选择排序</h2><p>内存工作原理：许多可以装数据的小抽屉的集合，每个小抽屉都有地址</p>
<h3 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h3><p>储存代办事件：数组or链表？</p>
<p>数组更为简单：</p>
<p><img src="https://s1.ax1x.com/2020/07/12/U8CxZF.jpg" alt="U8CxZF.jpg"></p>
<p>但当多一位需要加入（如和朋友看电影，周围坐满了，但又来了一个朋友，你们需要换一个地方），全部转移到另一个地方，重新分配，时间较长。</p>
<p>解决方法：预留位置/重新分配位置</p>
<p>缺点：预留位置可能没有数据，浪费；重新分配所花时间较长</p>
<p>于是：</p>
<h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p><img src="https://s1.ax1x.com/2020/07/12/U8nNu9.jpg" alt="U8nNu9.jpg"></p>
<p>每个元素储存下一个元素的地址</p>
<p>相互分离，但又有联系</p>
<p>不需要移动</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>一个用于增加网站浏览量的方法：排行榜从10到1，需要多看九页</p>
<p>优点：知道每一个数据的地址，直接访问（链表需要知道第一个然后慢慢推）</p>
<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><table>
<thead>
<tr>
<th>value</th>
<th>10</th>
<th>20</th>
<th>30</th>
<th>40</th>
</tr>
</thead>
<tbody><tr>
<td>index</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
</tbody></table>
<p>remember : index stars from 0</p>
<table>
<thead>
<tr>
<th></th>
<th>数组</th>
<th>链表</th>
</tr>
</thead>
<tbody><tr>
<td>output</td>
<td>O(1)（常量时间）</td>
<td>O(n)（线性时间）</td>
</tr>
<tr>
<td>input</td>
<td>O(n)</td>
<td>O(1)</td>
</tr>
<tr>
<td>delete</td>
<td>O(n)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<h3 id="插入删除数据"><a href="#插入删除数据" class="headerlink" title="插入删除数据"></a>插入删除数据</h3><p>链表：</p>
<p><img src="https://s1.ax1x.com/2020/07/12/U8Khp8.jpg" alt="U8Khp8.jpg"></p>
<p>数组：</p>
<p><img src="https://s1.ax1x.com/2020/07/12/U8KTmj.jpg" alt="U8KTmj.jpg"></p>
<p>删除同理</p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>将歌曲按播放量排序：</p>
<p>依次找出最多播放量的歌，移入另一个列表</p>
<p><img src="https://s1.ax1x.com/2020/07/12/U8Q2z8.jpg" alt="U8Q2z8.jpg"></p>
<p>每一次都要运行n次（n指每一个循环的数量而非总数，n在减少）</p>
<p><img src="https://s1.ax1x.com/2020/07/12/U8lEOe.jpg" alt="U8lEOe.jpg"></p>
<p>总共有n个数据，则每次需要运行：n-1,n-2,n-3… …2,1</p>
<p>和：(n-1+1)<em>n\</em>1/2=1/2n^2</p>
<p>而大O写法省略1/2（详见第4章）</p>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSmallest</span><span class="params">(arr)</span>:</span> <span class="comment">#arr=array</span></span><br><span class="line">    smallest=arr(<span class="number">0</span>)  <span class="comment">#储存最小值（如果第一项即为最小值）</span></span><br><span class="line">    smallest_index=<span class="number">0</span> <span class="comment">#最小值位置</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        <span class="keyword">if</span> arr[i]&lt;smallest:</span><br><span class="line">            smallest=arr[i]  <span class="comment">#如果这一项比之前的最小值小，就更换最小值</span></span><br><span class="line">            smallest_index=i</span><br><span class="line">        <span class="keyword">return</span> smalest_index</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    newArr=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        smallest=findSmallest(arr)     <span class="comment">#找到最小值</span></span><br><span class="line">        newArr.append(arr.pop(smallest))  <span class="comment">#将最小值放入新列表，删除此最小值</span></span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> selection([<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">10</span>])</span><br></pre></td></tr></table></figure>





<hr>
<hr>
<h2 id="第三章-递归"><a href="#第三章-递归" class="headerlink" title="第三章 递归"></a>第三章 递归</h2><p>理解递归：</p>
<p>在一个盒子里找钥匙，盒子里还有其他盒子,钥匙可能在盒子里的盒子里</p>
<p>有两种思路：</p>
<p>1.while循环：只要盒子不空、没找到钥匙就继续取</p>
<p><img src="https://s1.ax1x.com/2020/07/12/U83jOS.jpg" alt="U83jOS.jpg"></p>
<blockquote>
<ol>
<li>创建盒子堆</li>
<li>在大盒子里取出一个小盒子</li>
<li>如果没有，放入盒子堆</li>
<li>如果有钥匙，结束</li>
<li>不是回到第二步</li>
</ol>
</blockquote>
<p>2.for循环：找到钥匙即结束</p>
<p><img src="https://s1.ax1x.com/2020/07/12/U88ew4.jpg" alt="U88ew4.jpg"></p>
<blockquote>
<ol>
<li>检查每个物品</li>
<li>如果是盒子回到第一步</li>
<li>如果是钥匙结束</li>
</ol>
</blockquote>
<p>伪代码：</p>
<p>def look_for_key(box):</p>
<p>​    for item in box:</p>
<p>​        if item.is_a_box():</p>
<p>​            look_for_key(item) ——&gt;递归，用了自己本身的函数</p>
<p>​        elif item.is_a_key():</p>
<p>​            print(“Find the key!”)</p>
<p>第二种更清晰</p>
<h2 id="基线条件和递归条件"><a href="#基线条件和递归条件" class="headerlink" title="基线条件和递归条件"></a>基线条件和递归条件</h2><p>递归容易出现死循环：</p>
<p>编写倒计时，如3…2…1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span> <span class="title">down</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(i)</span><br><span class="line">    count down(i<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

<p>但结果为3…2…1…0…-1…-2…</p>
<p>(Ctrl+C 可停止)</p>
<p>所以要加基线条件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span> <span class="title">down</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">if</span> i&lt;=<span class="number">1</span>:  <span class="comment">#基线条件，到1即停</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:     <span class="comment">#递归条件</span></span><br><span class="line">        count down(i<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>调用栈（call stack）</p>
<p>一叠便签记录所要做的事，在最上面添加代办事项；阅读并删除最上面的代办事项</p>
<h4 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet2</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"how are you,"</span>+name+<span class="string">"?"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bye</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"ok bye!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"hello,"</span>+name+<span class="string">"!"</span>)</span><br><span class="line">	greet2(name)</span><br><span class="line">    print(<span class="string">"getting ready to say bye..."</span>)</span><br><span class="line">    bye()</span><br></pre></td></tr></table></figure>

<p>假设name=”maggie”，即调用greet(“maggie”)，该函数被分配一个区域</p>
<p>name被设置为maggie并存进去，运行greet(“maggie”)</p>
<p>然后调用greet2(“maggie”)，同上此时第2个函数在第一个上面，当打印完“how are you，maggie？”后从函数返回，此时栈顶的内存被弹出。</p>
<p>此时返回到了greet函数层（调用另一个函数时，当前函数暂停并处于未完成状态），函数值还在内存中，继续运行bye函数。</p>
<p>greet函数用于储存多个函数的变量，被称为调用栈。</p>
<h4 id="递归调用栈"><a href="#递归调用栈" class="headerlink" title="递归调用栈"></a>递归调用栈</h4><p>阶乘：fact为调用栈</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x*fact(x<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/07/12/U8wynI.jpg" alt="U8wynI.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/07/12/U80CHx.jpg" alt="U80CHx.jpg"></p>
<p>回到开始的盒子找钥匙问题</p>
<p>第一种循环有盒子堆，就始终知道哪些盒子要查</p>
<p>那递归法的盒子堆呢？</p>
<p><img src="https://s1.ax1x.com/2020/07/12/U80Yvj.jpg" alt="U80Yvj.jpg"></p>
<p>虽然栈很方便，但需要大量的内存</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>-reading seminar</tag>
      </tags>
  </entry>
  <entry>
    <title>我的视频测试文章</title>
    <url>/2020/02/13/%E6%88%91%E7%9A%84%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h3 id="我的视频测试文章"><a href="#我的视频测试文章" class="headerlink" title="我的视频测试文章"></a>我的视频测试文章</h3><p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"> </span><br><span class="line">&lt;div style&#x3D;&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;</span><br><span class="line">    &lt;iframe src&#x3D;&quot;&#x2F;&#x2F;player.bilibili.com&#x2F;player.html?aid&#x3D;76306723&amp;cid&#x3D;130524568&amp;page&#x3D;1&quot; scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot; style&#x3D;&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;&gt;</span><br><span class="line">    &lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>


<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=76306723&cid=130524568&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">
    </iframe>
</div>

]]></content>
      <categories>
        <category>Testing</category>
      </categories>
  </entry>
  <entry>
    <title>有关海华AI比赛</title>
    <url>/2020/02/25/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B1/</url>
    <content><![CDATA[<h1 id="Something-about-the-machine-learning"><a href="#Something-about-the-machine-learning" class="headerlink" title="Something about the machine learning"></a>Something about the machine learning</h1><p>(code by karbon)</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="Learning-with-supervision"><a href="#Learning-with-supervision" class="headerlink" title="Learning with  supervision:"></a>Learning with  supervision:</h3><h4 id="Input-and-output-are-known-The-machine-finds-the-relation-between-the-input-and-the-output-then-predicts-what-the-next-input-would-be-e-g-classification-regression"><a href="#Input-and-output-are-known-The-machine-finds-the-relation-between-the-input-and-the-output-then-predicts-what-the-next-input-would-be-e-g-classification-regression" class="headerlink" title="Input and output are known. The machine finds the relation between the input and the output, then predicts what the next input would be. e.g. classification, regression"></a>Input and output are known. The machine finds the relation between the input and the output, then predicts what the next input would be. e.g. classification, regression</h4><h3 id="Learning-without-supervision"><a href="#Learning-without-supervision" class="headerlink" title="Learning without supervision:"></a>Learning without supervision:</h3><h4 id="The-machine-finds-the-structure-from-the-data-e-g-cluster-the-difference-between-classification-and-cluster-is-classification-needs-a-definition-while-cluster-requires-the-machine-to-find-the-features-themselves"><a href="#The-machine-finds-the-structure-from-the-data-e-g-cluster-the-difference-between-classification-and-cluster-is-classification-needs-a-definition-while-cluster-requires-the-machine-to-find-the-features-themselves" class="headerlink" title="The machine finds the structure from the data. e.g. cluster(the difference between classification and cluster is: classification needs a definition while cluster requires the machine to find the features themselves. )"></a>The machine finds the structure from the data. e.g. cluster(the difference between classification and cluster is: classification needs a definition while cluster requires the machine to find the features themselves. )</h4><hr>
<h2 id="An-example-of-Linear-regression-with-one-variable"><a href="#An-example-of-Linear-regression-with-one-variable" class="headerlink" title="An example of  Linear regression with one variable"></a>An example of  Linear regression with one variable</h2><h6 id="use-the-method-of-Gradient-Descent"><a href="#use-the-method-of-Gradient-Descent" class="headerlink" title="use the method of Gradient Descent"></a>use the method of <strong>Gradient Descent</strong></h6><p>Imagine you are the CEO of a restaurant chain and you are considering opening a store in a new city. Suppose that your group’s data analysis department finds that there is a strong correlation between the amount of profit made in a city and the population of that city, so you get data on the amount of profit made in the cities where you have set up shop and the population of those cities .</p>
<p><img src="https://s2.ax1x.com/2020/02/25/3YLMx1.png" alt="3YLMx1.png"></p>
<h4 id="The-specific-steps"><a href="#The-specific-steps" class="headerlink" title="The specific steps:"></a>The specific steps:</h4><p>import:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> csv  <span class="comment">#read the data</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment">#plot the graph</span></span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declare lists for storing trainset of population and profit</span></span><br><span class="line">population = np.array([])</span><br><span class="line">profit = np.array([])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load trainset from csv file, add the data to the lists</span></span><br><span class="line">reader = csv.reader(open(<span class="string">'./dataForCEO.csv'</span>,<span class="string">'r'</span>))</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">    population = np.append(population, float(row[<span class="number">0</span>])) <span class="comment">#append:add value into list</span></span><br><span class="line">    profit = np.append(profit, float(row[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<p>Plot the diagram</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotData</span><span class="params">(x, y, t0=None, t1=None)</span>:</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>)) <span class="comment">#plot the background</span></span><br><span class="line">    plt.scatter(x.tolist(), y.tolist(), marker=<span class="string">'x'</span>) <span class="comment">#plot the scatter graph</span></span><br><span class="line">    <span class="keyword">if</span> (t0 != <span class="literal">None</span>) <span class="keyword">and</span> (t1 != <span class="literal">None</span>):</span><br><span class="line">        tempx = np.linspace(<span class="number">5</span>, <span class="number">22.5</span>, <span class="number">50</span>)</span><br><span class="line">        tempy = t0 + tempx * t1</span><br><span class="line">        plt.plot(tempx, tempy, color=<span class="string">'red'</span>, linestyle=<span class="string">'--'</span>) <span class="comment">#find the trend</span></span><br><span class="line">    plt.xlabel(<span class="string">'Population of City in 10000'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Profit in $10000'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">plotData(population, profit)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">(x, theta0, theta1)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> theta0 + theta1 * x</span><br></pre></td></tr></table></figure>

<p>The formula:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeCost</span><span class="params">(x, y, theta0, theta1)</span>:</span></span><br><span class="line">    m = len(y)</span><br><span class="line">    J = <span class="number">1</span>/(<span class="number">2</span>*m) * sum((h(x,theta0,theta1) - y) ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> J</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradientDescent</span><span class="params">(x, y, theta0, theta1, alpha, iterTimes)</span>:</span></span><br><span class="line">    m = len(y)</span><br><span class="line">    temp0 = theta0 - alpha*(<span class="number">1</span>/m) * sum((h(x, theta0, theta1) - y));  </span><br><span class="line">    temp1 = theta1 - alpha*(<span class="number">1</span>/m) * sum((h(x, theta0, theta1) - y) * x);  </span><br><span class="line">    iterTimes = iterTimes + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> temp0, temp1, iterTimes</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta0 = random.uniform(<span class="number">-10</span>,<span class="number">10</span>)</span><br><span class="line">theta1 = random.uniform(<span class="number">-10</span>,<span class="number">10</span>)</span><br><span class="line">alpha = <span class="number">0.001</span> <span class="comment">#the smaller the alpha, the more accurate the result can achieve</span></span><br><span class="line">iterTimes = <span class="number">0</span> <span class="comment"># times of iteration</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):  <span class="comment">#repeat for 1000 within one click to make the process faster</span></span><br><span class="line">    theta0, theta1, iterTimes = gradientDescent(population, profit, theta0, theta1, alpha, iterTimes)</span><br><span class="line">print(<span class="string">"After %d iterations:"</span>%(iterTimes))</span><br><span class="line">print(<span class="string">"h(x) = %f + %fx"</span>%((theta0, theta1)))  </span><br><span class="line">print(<span class="string">"Cost is %f now."</span>%(computeCost(population, profit, theta0, theta1)))</span><br><span class="line">plotData(population, profit, theta0, theta1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Out(the first time):After 0 iterations:          (times)</span></span><br><span class="line"><span class="comment">#                    h(x) = -9.955209 + 2.422265x (relationship)</span></span><br><span class="line"><span class="comment">#                    Cost is 23.558595 now.       (difference to the real value)</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/25/3Yjdz9.png" alt="3Yjdz9.png"></p>
<p> final result: ℎ(𝑥) = −3.895781 + 1.193034𝑥</p>
<p>the cost: 𝐶𝑜𝑠𝑡 = 4.476971 (the difference between the real value and the predicted value)</p>
<hr>
<h2 id="Digital-image-processing"><a href="#Digital-image-processing" class="headerlink" title="Digital image processing"></a>Digital image processing</h2><p><img src="https://s2.ax1x.com/2020/02/25/3YvVyR.png" alt="3YvVyR.png"></p>
<p><img src="https://s2.ax1x.com/2020/02/25/3YvG6A.png" alt="3YvG6A.png"></p>
<h2 id="Some-simple-examples-of-digital-image-processing"><a href="#Some-simple-examples-of-digital-image-processing" class="headerlink" title="Some simple examples of digital image processing"></a>Some simple examples of digital image processing</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import packages</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2  <span class="comment">#read the picture</span></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pictureRaw = cv2.imread(<span class="string">"/picture.jpg"</span>)</span><br><span class="line">print(type(pictureRaw))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:&lt;class 'numpy.ndarray'&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(pictureRaw.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:(995, 1079, 3)   (the graph is 995x1079 and has 3 color channels)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.imshow(cv2.cvtColor(pictureRaw, cv2.COLOR_BGR2RGB))<span class="comment">#plot the picture</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/25/3YxvV0.png" alt="3YxvV0.png"></p>
<h3 id="1-Grayscale-image"><a href="#1-Grayscale-image" class="headerlink" title="1. Grayscale image:"></a>1. Grayscale image:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pictureRaw2 = cv2.imread(<span class="string">"/picture.jpg"</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">print(pictureRaw2.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:(995, 1079) #The picture only contains black and white so the shape is 2-dimensional</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.imshow(cv2.cvtColor(pictureRaw2, cv2.COLOR_GRAY2RGB))</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/25/3tptgg.png" alt="3tptgg.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig1 = pictureRaw <span class="comment"># This line is a WRONG operation. </span></span><br><span class="line"><span class="comment"># If you directly assign an image to a new variable like above, you will unable to modify them seperately.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You should create a copy and assign it to fig1 variable, like the following line.</span></span><br><span class="line">fig1 = pictureRaw.copy() </span><br><span class="line"></span><br><span class="line"><span class="comment"># Slicing fig1 and assign the sliced part to fig2.</span></span><br><span class="line">fig2 = fig1[ <span class="number">200</span>:<span class="number">900</span>,<span class="number">350</span>:<span class="number">700</span>, :]  </span><br><span class="line"><span class="comment"># Slicing fig2 and assign the sliced part to fig3.</span></span><br><span class="line">fig3 = fig2[<span class="number">50</span>:<span class="number">150</span>, <span class="number">140</span>:<span class="number">230</span>, :] </span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw yellow rectangles in copies of fig1 and fig2 to show the part you sliced.</span></span><br><span class="line">fig1 = cv2.rectangle(fig1.copy(),(<span class="number">350</span>,<span class="number">200</span>),(<span class="number">700</span>,<span class="number">900</span>), color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),thickness = <span class="number">2</span>)</span><br><span class="line">fig2 = cv2.rectangle(fig2.copy(),(<span class="number">140</span>,<span class="number">50</span>),(<span class="number">230</span>,<span class="number">140</span>), color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),thickness = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show the images.</span></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">10</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>) <span class="comment">#subplot:multi-graph in one page</span></span><br><span class="line">plt.imshow(cv2.cvtColor(fig1, cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(fig2, cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(fig3, cv2.COLOR_BGR2RGB))</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/25/3t90Qe.png" alt="3t90Qe.png"></p>
<h3 id="2-Print-the-matrix-of-image"><a href="#2-Print-the-matrix-of-image" class="headerlink" title="2. Print the matrix of image"></a>2. Print the matrix of image</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(fig3.shape)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n Blue channel:"</span>)</span><br><span class="line">print(fig3[:, :, <span class="number">0</span>])</span><br><span class="line">print(<span class="string">"\n Green channel:"</span>)</span><br><span class="line">print(fig3[:, :, <span class="number">1</span>])</span><br><span class="line">print(<span class="string">"\n Red channel:"</span>)</span><br><span class="line">print(fig3[:, :, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:(100, 90, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Blue channel:</span></span><br><span class="line"><span class="comment">#[[ 51  46  49 ...  47  48  45]</span></span><br><span class="line"><span class="comment"># [ 61  55  52 ...  47  51  50]</span></span><br><span class="line"><span class="comment"># [ 64  63  61 ...  47  52  50]</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># [172 171 171 ... 238 238 232]</span></span><br><span class="line"><span class="comment"># [176 175 170 ... 242 237 228]</span></span><br><span class="line"><span class="comment">#[170 175 167 ... 239 238 233]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Green channel:</span></span><br><span class="line"><span class="comment">#[[ 45  40  44 ...  41  42  39]</span></span><br><span class="line"><span class="comment"># [ 55  50  46 ...  43  47  46]</span></span><br><span class="line"><span class="comment"># [ 57  57  55 ...  43  48  46]</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># [170 169 170 ... 230 230 224]</span></span><br><span class="line"><span class="comment"># [174 173 169 ... 231 226 217]</span></span><br><span class="line"><span class="comment"># [168 173 166 ... 225 224 219]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Red channel:</span></span><br><span class="line"><span class="comment">#[[ 62  59  65 ...  46  47  44]</span></span><br><span class="line"><span class="comment"># [ 74  71  69 ...  49  53  52]</span></span><br><span class="line"><span class="comment"># [ 78  80  80 ...  49  54  52]</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># [176 175 174 ... 231 231 225]</span></span><br><span class="line"><span class="comment"># [180 179 173 ... 233 228 219]</span></span><br><span class="line"><span class="comment"># [174 179 170 ... 226 225 220]]</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Binary-image"><a href="#3-Binary-image" class="headerlink" title="3. Binary image"></a>3. Binary image</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import image</span></span><br><span class="line">pictureRaw3 = cv2.imread(<span class="string">"/picture.jpg"</span>)</span><br><span class="line"><span class="comment"># create a grayscale copy</span></span><br><span class="line">picGray0 = cv2.cvtColor(picyureRaw3.copy(), cv2.COLOR_BGR2GRAY) <span class="comment">#turn gray</span></span><br><span class="line"><span class="comment"># set threshold</span></span><br><span class="line">threshold = <span class="number">127</span> <span class="comment">#the middle point to divide black or white</span></span><br></pre></td></tr></table></figure>

<p>traditional way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Common loop</span></span><br><span class="line">picGray1 = cv2.cvtColor(pictureRaw3.copy(), cv2.COLOR_BGR2GRAY)</span><br><span class="line">height = picGray1.shape[<span class="number">0</span>]  </span><br><span class="line">width = picGray1.shape[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">0</span>, height):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">0</span>, width):</span><br><span class="line">        <span class="keyword">if</span> picGray1[r][c] &gt; threshold:</span><br><span class="line">            picGray1[r][c] = <span class="number">255</span> <span class="comment">#if the value&gt;127 it's black</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            picGray1[r][c] = <span class="number">0</span>   <span class="comment">#vice versa</span></span><br></pre></td></tr></table></figure>

<p>faster way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Vectorization: A faster method</span></span><br><span class="line">picGray2 = cv2.cvtColor(pictureRaw3.copy(), cv2.COLOR_BGR2GRAY)</span><br><span class="line">picGray2[picGray2&gt;threshold] = <span class="number">255</span></span><br><span class="line">picGray2[picGray2&lt;=threshold] = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>plot the result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>) </span><br><span class="line">plt.imshow(cv2.cvtColor(garbageRaw, cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(garGray0, cv2.COLOR_GRAY2RGB))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)  <span class="comment">#the traditional way</span></span><br><span class="line">plt.imshow(cv2.cvtColor(garGray1, cv2.COLOR_GRAY2RGB))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)  <span class="comment">#the faster way</span></span><br><span class="line">plt.imshow(cv2.cvtColor(garGray2, cv2.COLOR_GRAY2RGB))</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/25/3tmNx1.png" alt="3tmNx1.png"></p>
<h3 id="4-Edge-detection"><a href="#4-Edge-detection" class="headerlink" title="4. Edge detection"></a>4. Edge detection</h3><p>One implementation of edge detection is through convolution.</p>
<p>Convolution is a mathematical operation. The following is an example of convolution in 2D image.</p>
<p> Convolution A∗BA*B can be described as the following gif image.  </p>
<p><img src="https://s2.ax1x.com/2020/02/25/3tn9JJ.gif" alt="3tn9JJ.gif"></p>
<p>example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw = cv2.imread(<span class="string">"./images/NanjingShizhangJiangdaqiao.jpg"</span>, cv2.IMREAD_COLOR)</span><br><span class="line"></span><br><span class="line">gray = cv2.cvtColor(raw, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Laplace Operator</span></span><br><span class="line">laplace = np.array(</span><br><span class="line">    [[<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>],</span><br><span class="line">     [<span class="number">-1</span>, <span class="number">4</span>, <span class="number">-1</span>],</span><br><span class="line">     [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>]]</span><br><span class="line">)</span><br><span class="line"><span class="comment"># convolution</span></span><br><span class="line">aft1 = cv2.filter2D(gray, <span class="number">-1</span>, laplace)</span><br><span class="line">aft2 = cv2.filter2D(gray, <span class="number">-1</span>, laplace)</span><br><span class="line">aft3 = cv2.filter2D(gray, <span class="number">-1</span>, laplace)</span><br><span class="line"></span><br><span class="line"><span class="comment"># binarize, different thresholds can get different results</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarize</span><span class="params">(img, threshold)</span>:</span></span><br><span class="line">    b = img.copy()</span><br><span class="line">    b[b&gt;threshold] = <span class="number">255</span></span><br><span class="line">    b[b&lt;=threshold] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">aft1 = binarize(aft1, <span class="number">5</span>)</span><br><span class="line">aft2 = binarize(aft2, <span class="number">10</span>)</span><br><span class="line">aft3 = binarize(aft3, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">9</span>))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(gray, cv2.COLOR_GRAY2RGB))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(aft1, cv2.COLOR_GRAY2RGB))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(aft2, cv2.COLOR_GRAY2RGB))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(aft3, cv2.COLOR_GRAY2RGB))</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/25/3tn3OP.png" alt="3tn3OP.png"></p>
]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关海华AI比赛3</title>
    <url>/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B3/</url>
    <content><![CDATA[<h1 id="Neural-Network-based-Iris-Flower-Classification"><a href="#Neural-Network-based-Iris-Flower-Classification" class="headerlink" title="Neural-Network-based Iris Flower Classification"></a>Neural-Network-based Iris Flower Classification</h1><h2 id="0-Dataset-Description"><a href="#0-Dataset-Description" class="headerlink" title="0 Dataset Description"></a>0 Dataset Description</h2><p>Description Source: <a href="https://archive.ics.uci.edu/ml/datasets/Iris/" target="_blank" rel="noopener">https://archive.ics.uci.edu/ml/datasets/Iris/</a>  </p>
<p> <strong>Data Set Information:</strong><br>This is perhaps the best known database to be found in the pattern recognition literature. Fisher’s  paper is a classic in the field and is referenced frequently to this  day. (See Duda &amp; Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant.  One class is linearly separable from the other 2; the latter are NOT  linearly separable from each other.<br>Predicted attribute: class of iris plant.<br>This is an exceedingly simple domain.<br><strong>Attribute Information:</strong><br>column 1: sepal length in cm<br>column 2: sepal width in cm<br>column 3: petal length in cm<br>column 4: petal width in cm<br>column 5: class:<br>– Iris Setosa<br>– Iris Versicolour<br>– Iris Virginica   </p>
<h2 id="1-Observe-the-data"><a href="#1-Observe-the-data" class="headerlink" title="1 Observe the data"></a>1 Observe the data</h2><p>Load dataset from csv file.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"><span class="comment"># Declare list for storing dataset</span></span><br><span class="line">sepal_length = np.array([])</span><br><span class="line">sepal_width = np.array([])</span><br><span class="line">petal_length = np.array([])</span><br><span class="line">petal_width = np.array([])</span><br><span class="line">iris_class = np.array([])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dataset from csv file</span></span><br><span class="line">reader = csv.reader(open(<span class="string">'./irisDataset.csv'</span>,<span class="string">'r'</span>))</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> reader:<span class="comment">#to create the dataframe</span></span><br><span class="line">    sepal_length = np.append(sepal_length, float(row[<span class="number">0</span>])) <span class="comment">#separate different values to different rows</span></span><br><span class="line">    sepal_width = np.append(sepal_width, float(row[<span class="number">1</span>]))</span><br><span class="line">    petal_length = np.append(petal_length, float(row[<span class="number">2</span>]))</span><br><span class="line">    petal_width = np.append(petal_width, float(row[<span class="number">3</span>]))</span><br><span class="line">    iris_class = np.append(iris_class, row[<span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<p> Observe the format of data. (Take 10 examples randomly) </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">h =set()</span><br><span class="line"><span class="keyword">while</span>(len(h)&lt;<span class="number">10</span>):</span><br><span class="line">    h.add(random.randint(<span class="number">0</span>, <span class="number">149</span>))<span class="comment">#add the random number</span></span><br><span class="line">    <span class="comment">#choose 10 random example</span></span><br><span class="line">print(<span class="string">"ID \t SEPAL_LENGTH \t SEPAL_WIDTH \t PETAL_LENGTH \t PETAL_WIDTH \t|| CLASS"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> h:</span><br><span class="line">    print(<span class="string">"%d \t %.1f \t\t %.1f \t\t %.1f \t\t %.1f \t\t|| %s"</span> <span class="comment">#print the result</span></span><br><span class="line">          % (i, sepal_length[i], sepal_width[i], petal_length[i], petal_width[i], iris_class[i]))<span class="comment">#print the 10 example</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ID 	 SEPAL_LENGTH 	 SEPAL_WIDTH 	 PETAL_LENGTH 	 PETAL_WIDTH 	|| CLASS</span><br><span class="line">33 	    5.5 		    4.2 		    1.4 		    0.2 		|| setosa</span><br><span class="line">132     6.4 		    2.8 		    5.6 		    2.2 		|| virginica</span><br><span class="line">135     7.7 		    3.0 		    6.1 		    2.3 		|| virginica</span><br><span class="line">77 	    6.7 		    3.0 		    5.0 		    1.7 		|| versicolor</span><br><span class="line">14 	    5.8 		    4.0 		    1.2 		    0.2 		|| setosa</span><br><span class="line">15 	    5.7 		    4.4 		    1.5 		    0.4 		|| setosa</span><br><span class="line">146     6.3 		    2.5 		    5.0 		    1.9 		|| virginica</span><br><span class="line">54 	    6.5 		    2.8 		    4.6 		    1.5 		|| versicolor</span><br><span class="line">58 	    6.6 		    2.9 		    4.6 		    1.3 		|| versicolor</span><br><span class="line">31 	    5.4 		    3.4 		    1.5 		    0.4 		|| setosa</span><br></pre></td></tr></table></figure>

<p> Plot dataset. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#plot 3 kinds of iris, letting width y-axis, length x-axis, and plot the label(using sepal values)</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>) <span class="comment">#plot two background</span></span><br><span class="line">plt.scatter(sepal_length[iris_class==<span class="string">'setosa'</span>], sepal_width[iris_class==<span class="string">'setosa'</span>])</span><br><span class="line">plt.scatter(sepal_length[iris_class==<span class="string">'versicolor'</span>],sepal_width[iris_class==<span class="string">'versicolor'</span>])</span><br><span class="line">plt.scatter(sepal_length[iris_class==<span class="string">'virginica'</span>], sepal_width[iris_class==<span class="string">'virginica'</span>])</span><br><span class="line">plt.legend((<span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,<span class="string">"virginica"</span>)) </span><br><span class="line">plt.xlabel(<span class="string">'sepal_length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'sepal_width'</span>)</span><br><span class="line"><span class="comment">#plot 3 kinds of iris, letting width y-axis, length x-axis, and plot the label(using petal values)</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.scatter(petal_length[iris_class==<span class="string">'setosa'</span>], petal_width[iris_class==<span class="string">'setosa'</span>])</span><br><span class="line">plt.scatter(petal_length[iris_class==<span class="string">'versicolor'</span>], petal_width[iris_class==<span class="string">'versicolor'</span>])</span><br><span class="line">plt.scatter(petal_length[iris_class==<span class="string">'virginica'</span>], petal_width[iris_class==<span class="string">'virginica'</span>])</span><br><span class="line">plt.legend((<span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,<span class="string">"virginica"</span>))</span><br><span class="line">plt.xlabel(<span class="string">'petal_length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'petal_width'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#sepal values can't separate them as gragh1 shows</span></span><br><span class="line"><span class="comment">#petal values can separate the as gragh2 shows,so we choose the petal values</span></span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/3zsonS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3zsonS.png" alt="3zsonS.png"></a></p>
<h2 id="2-Preprocess-dataset-and-Divide-dataset"><a href="#2-Preprocess-dataset-and-Divide-dataset" class="headerlink" title="2 Preprocess dataset and Divide dataset"></a>2 Preprocess dataset and Divide dataset</h2><p>Through observing the figure above, we can find that it’s easier to classify iris flowers by <code>petal_width</code> and <code>petal_length</code>. So, we can simplify the problem by ignoring <code>sepal_width</code> and <code>sepal_length</code>. (This kind of operation may decrease accuracy)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#put the petal values into array</span></span><br><span class="line">dataset_x = np.array((petal_length, petal_width)).T</span><br><span class="line"></span><br><span class="line"><span class="comment">#change differet kinds of iris into 0,1,2, which is easy to be recognized for computer</span></span><br><span class="line">dataset_y = np.zeros(iris_class.shape, dtype=int)</span><br><span class="line">dataset_y[iris_class == <span class="string">'setosa'</span>] = <span class="number">0</span></span><br><span class="line">dataset_y[iris_class == <span class="string">'versicolor'</span>] = <span class="number">1</span></span><br><span class="line">dataset_y[iris_class == <span class="string">'virginica'</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = len(iris_class)</span><br><span class="line">splitLine = int(<span class="number">0.8</span>*num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate a random list to select data randomly</span></span><br><span class="line">index = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, num)]</span><br><span class="line">random.shuffle(index) <span class="comment">#put them in random order</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># divide into trainset and testset</span></span><br><span class="line">train_x = dataset_x[index[<span class="number">0</span>:splitLine]]</span><br><span class="line">train_y = dataset_y[index[<span class="number">0</span>:splitLine]] </span><br><span class="line">test_x = dataset_x[index[splitLine:num]]</span><br><span class="line">test_y = dataset_y[index[splitLine:num]]</span><br></pre></td></tr></table></figure>

<p> Encode the classes into one-hot encoding.<br>For example,<br>0→[1,0,0]<br>1→[0,1,0]<br>2→[0,0,1] </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># One-Hot Encoding</span></span><br><span class="line">train_y_onehot = keras.utils.to_categorical(train_y, <span class="number">3</span>)</span><br><span class="line">test_y_onehot = keras.utils.to_categorical(test_y, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>Let’s observe the trainset and testset in different marker.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#put the trainset and testset in one graph to compare</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line"><span class="comment">#the "+" means trainset</span></span><br><span class="line"><span class="comment">#different colours mean different kinds of iris</span></span><br><span class="line">plt.scatter(train_x[train_y==<span class="number">0</span>, <span class="number">0</span>], train_x[train_y==<span class="number">0</span>, <span class="number">1</span>], marker=<span class="string">'+'</span>, color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(train_x[train_y==<span class="number">1</span>, <span class="number">0</span>], train_x[train_y==<span class="number">1</span>, <span class="number">1</span>], marker=<span class="string">'+'</span>, color=<span class="string">'green'</span>)</span><br><span class="line">plt.scatter(train_x[train_y==<span class="number">2</span>, <span class="number">0</span>], train_x[train_y==<span class="number">2</span>, <span class="number">1</span>], marker=<span class="string">'+'</span>, color=<span class="string">'blue'</span>)</span><br><span class="line"><span class="comment"># "v" means testset</span></span><br><span class="line">plt.scatter(test_x[test_y==<span class="number">0</span>, <span class="number">0</span>], test_x[test_y==<span class="number">0</span>, <span class="number">1</span>], marker=<span class="string">'v'</span>, color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(test_x[test_y==<span class="number">1</span>, <span class="number">0</span>], test_x[test_y==<span class="number">1</span>, <span class="number">1</span>], marker=<span class="string">'v'</span>, color=<span class="string">'green'</span>)</span><br><span class="line">plt.scatter(test_x[test_y==<span class="number">2</span>, <span class="number">0</span>], test_x[test_y==<span class="number">2</span>, <span class="number">1</span>], marker=<span class="string">'v'</span>, color=<span class="string">'blue'</span>)</span><br><span class="line">plt.legend((<span class="string">"train_setosa"</span>,<span class="string">"train_versicolor"</span>,<span class="string">"train_virginica"</span>,<span class="string">"test_setosa"</span>,<span class="string">"test_versicolor"</span>,<span class="string">"test_virginica"</span>)) <span class="comment">#plot the label</span></span><br><span class="line">plt.xlabel(<span class="string">'petal_length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'petal_width'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/03/08/3zc16P.png" alt="3zc16P.png"></p>
<h2 id="3-Describe-your-neural-network"><a href="#3-Describe-your-neural-network" class="headerlink" title="3 Describe your neural network"></a>3 Describe your neural network</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># describe the model</span></span><br><span class="line">model = keras.Sequential([</span><br><span class="line">    layers.Dense(units=<span class="number">64</span>, activation=<span class="string">'relu'</span>, input_shape=(<span class="number">2</span>,)),</span><br><span class="line">    layers.Dense(units=<span class="number">64</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.Dense(units=<span class="number">3</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Model: &quot;sequential_1&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">dense_3 (Dense)              (None, 64)                192       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_4 (Dense)              (None, 64)                4160      </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_5 (Dense)              (None, 3)                 195       </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 4,547</span><br><span class="line">Trainable params: 4,547</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure>

<p> We can use <strong>Mean Square Error (MSE)</strong> as <code>loss</code> function, and use <strong>Stochastic Gradient Descent (SGD)</strong> as the process we train the model (i.e. “<code>optimizer</code>“).<br>(PS: MSE is not so suitable for classification) </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.compile(loss=<span class="string">'mse'</span>, optimizer=<span class="string">'sgd'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="4-Training"><a href="#4-Training" class="headerlink" title="4 Training"></a>4 Training</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.fit(train_x, train_y_onehot, batch_size=<span class="number">4</span>, epochs=<span class="number">100</span>, verbose=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#fit( x, y, batch_size=32, epochs=10, verbose=1, callbacks=None,validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0)</span></span><br></pre></td></tr></table></figure>

<h2 id="5-Evaluation-of-the-trained-model"><a href="#5-Evaluation-of-the-trained-model" class="headerlink" title="5 Evaluation of the trained model"></a>5 Evaluation of the trained model</h2><p>We can use <code>.evaluate</code> to compute <strong>loss</strong> on testset.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cost = model.evaluate(test_x, test_y_onehot)</span><br><span class="line">print(<span class="string">'test cost:'</span>, cost) <span class="comment">#find the cost(difference to the real value)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = model.predict(test_x)<span class="comment">#predict the next five value</span></span><br><span class="line">print(scores)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = np.array([])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> scores:</span><br><span class="line">    results = np.append(results, np.argmax(i))</span><br><span class="line">print(results)</span><br><span class="line"><span class="comment">#out:[0. 2. 0. 2. 1. 2. 1. 1. 2. 2. 2. 2. 0. 0. 1. 2. 2. 0. 2. 0. 2. 2. 1. 1. 0. 2. 2. 1. 1. 1.]</span></span><br></pre></td></tr></table></figure>

<p> Visualize our model of prediction. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># draw ground truth</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">plt.scatter(test_x[test_y==<span class="number">0</span>, <span class="number">0</span>], test_x[test_y==<span class="number">0</span>, <span class="number">1</span>], marker=<span class="string">'v'</span>, color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(test_x[test_y==<span class="number">1</span>, <span class="number">0</span>], test_x[test_y==<span class="number">1</span>, <span class="number">1</span>], marker=<span class="string">'v'</span>, color=<span class="string">'green'</span>)</span><br><span class="line">plt.scatter(test_x[test_y==<span class="number">2</span>, <span class="number">0</span>], test_x[test_y==<span class="number">2</span>, <span class="number">1</span>], marker=<span class="string">'v'</span>, color=<span class="string">'blue'</span>)</span><br><span class="line">plt.legend((<span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,<span class="string">"virginica"</span>))</span><br><span class="line">plt.xlabel(<span class="string">'petal_length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'petal_width'</span>)</span><br><span class="line">plt.title(<span class="string">'Ground Truth of Testset'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># draw prediction</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">plt.scatter(test_x[results==<span class="number">0</span>, <span class="number">0</span>], test_x[results==<span class="number">0</span>, <span class="number">1</span>], color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(test_x[results==<span class="number">1</span>, <span class="number">0</span>], test_x[results==<span class="number">1</span>, <span class="number">1</span>], color=<span class="string">'green'</span>)</span><br><span class="line">plt.scatter(test_x[results==<span class="number">2</span>, <span class="number">0</span>], test_x[results==<span class="number">2</span>, <span class="number">1</span>], color=<span class="string">'blue'</span>)</span><br><span class="line">plt.legend((<span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,<span class="string">"virginica"</span>))</span><br><span class="line">plt.xlabel(<span class="string">'petal_length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'petal_width'</span>)</span><br><span class="line">plt.title(<span class="string">'Prediction of Testset'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># draw classiication areas</span></span><br><span class="line">x = np.arange(min(test_x[:,<span class="number">0</span>]), max(test_x[:,<span class="number">0</span>]), <span class="number">0.05</span>)</span><br><span class="line">y = np.arange(min(test_x[:,<span class="number">1</span>]), max(test_x[:,<span class="number">1</span>]), <span class="number">0.05</span>)</span><br><span class="line">X,Y = np.meshgrid(x,y)</span><br><span class="line">grid = np.array((X.flatten(), Y.flatten())).T</span><br><span class="line">scores_1 = model.predict(grid)</span><br><span class="line">decisions = np.array([])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> scores_1:</span><br><span class="line">    decisions = np.append(decisions, np.argmax(i))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">plt.scatter(grid[decisions==<span class="number">0</span>, <span class="number">0</span>], grid[decisions==<span class="number">0</span>, <span class="number">1</span>], color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(grid[decisions==<span class="number">1</span>, <span class="number">0</span>], grid[decisions==<span class="number">1</span>, <span class="number">1</span>], color=<span class="string">'green'</span>)</span><br><span class="line">plt.scatter(grid[decisions==<span class="number">2</span>, <span class="number">0</span>], grid[decisions==<span class="number">2</span>, <span class="number">1</span>], color=<span class="string">'blue'</span>)</span><br><span class="line">plt.legend((<span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,<span class="string">"virginica"</span>))</span><br><span class="line">plt.xlabel(<span class="string">'petal_length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'petal_width'</span>)</span><br><span class="line">plt.title(<span class="string">'Classification Areas'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/03/08/3zgTvq.png" alt="3zgTvq.png"></p>
]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>《算法图解》读书笔记2</title>
    <url>/2020/07/13/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h1 id="《算法图解》Grokking-Algorithms-（2）"><a href="#《算法图解》Grokking-Algorithms-（2）" class="headerlink" title="《算法图解》Grokking Algorithms （2）"></a>《算法图解》Grokking Algorithms （2）</h1><h2 id="第四章-快速排序"><a href="#第四章-快速排序" class="headerlink" title="第四章 快速排序"></a>第四章 快速排序</h2><h3 id="divide-and-conquer-D-amp-C-算法"><a href="#divide-and-conquer-D-amp-C-算法" class="headerlink" title="divide and conquer(D&amp;C)算法"></a>divide and conquer(D&amp;C)算法</h3><p>递归式问题解决方法</p>
<p>理解：</p>
<p>用D&amp;C解决：1）找出基线条件；2）不断分解问题，直到符合</p>
<blockquote>
<p>农场主分地，1680m*640m，要求均匀分成正方形，且尽可能大</p>
<p>即一边的长度是另一边的整数倍</p>
<p>在1680<em>640中，1680=640\</em>2+400</p>
<p>即可用640<em>400计算—&gt;问题缩小了 （适用于小块地最大方块也适用于整块第的最大方块—*</em>欧几里得算法**）</p>
<p>下面为：640=400+240—&gt;240*400</p>
<p>​                400=240+160—&gt;160*240</p>
<p>​                240=160+80—&gt;80*160</p>
<p>​                160=80*2—&gt;找到了</p>
</blockquote>
<p>代码示例：</p>
<p>简单的数列求和：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(arr)</span>:</span></span><br><span class="line">    total=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line">        total+=x <span class="comment">#total+=x 为 total=total+x</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>

<p>递归法：</p>
<ol>
<li><p>找出基线条件：数组不包含元素或只包含一个元素，计算总和很简单，如数组没有元素，和为0，这就是基线条件</p>
</li>
<li><p>每次递归都要离空数组近一步（缩小问题规模）：</p>
<p>sum（2,4,6）=12 —&gt; 2+sum（4,6）=2+10=12</p>
</li>
</ol>
<p><img src="https://s1.ax1x.com/2020/07/13/UJb6lF.jpg" alt="UJb6lF.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#连续数字求和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(max)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> max &lt;= <span class="number">100</span> <span class="keyword">and</span> max &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> max +sum(int(max) - <span class="number">1</span>) <span class="comment">#求此时的数与下一个数，max==0为基线条件</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">print(sum(<span class="number">100</span>))</span><br><span class="line"><span class="comment">#out:5050</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列表求和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_sum</span><span class="params">(num_List)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(num_List) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> num_List[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num_List[<span class="number">0</span>] + list_sum(num_List[<span class="number">1</span>:]) <span class="comment">#使用递归直到len(num_list)==1（基线条件）</span></span><br><span class="line">        </span><br><span class="line">print(list_sum([<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]))</span><br><span class="line"><span class="comment">#out:24</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#找最大值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(lis)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(lis)==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> lis[<span class="number">0</span>] <span class="keyword">if</span> lis[<span class="number">0</span>]&gt;lis[<span class="number">1</span>] <span class="keyword">else</span> lis[<span class="number">1</span>] <span class="comment">#比较一二位大小</span></span><br><span class="line">    sub_max=max(lis[<span class="number">1</span>:])  <span class="comment">#使用递归直到lis只剩两位（基线条件为len(lis)==2）</span></span><br><span class="line">    <span class="keyword">return</span> lis[<span class="number">0</span>] <span class="keyword">if</span> lis[<span class="number">0</span>]&gt;sub_max <span class="keyword">else</span> sub_max <span class="comment">#比较剩下的两个数大小</span></span><br><span class="line">max([<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>])</span><br><span class="line"><span class="comment">#out:9</span></span><br></pre></td></tr></table></figure>



<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>c语言标准库中的函数gsort就是快速递归</p>
<p>将一个无序的列表排序：将第一个书局当做基准值，将小于它的放前面，大于它的放后面，如：</p>
<p>33,15,10—&gt;（15,10）（30）（）</p>
<p>这被称为分区（partitioning）</p>
<p>现在有三个组，再分别将小于和大于基准值的子数组用相同的方法排序</p>
<p><img src="https://s1.ax1x.com/2020/07/13/UYGMFg.jpg" alt="UYGMFg.jpg"></p>
<p>代码示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(array)&lt;<span class="number">2</span>: <span class="comment">#如果只有一个值，返回</span></span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot=array[<span class="number">0</span>] <span class="comment">#设置基准值</span></span><br><span class="line">        less=[i <span class="keyword">for</span> i <span class="keyword">in</span> array[<span class="number">1</span>:] <span class="keyword">if</span> i &lt;=pivot] <span class="comment">#取小于基准值的值</span></span><br><span class="line">        </span><br><span class="line">        greater=[i <span class="keyword">for</span> i <span class="keyword">in</span> array[<span class="number">1</span>:] <span class="keyword">if</span> i &gt;pivot] <span class="comment">#取大于基准值的值</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> quicksort(less)+[pivot]+quicksort(greater)</span><br><span class="line">    </span><br><span class="line">print(quicksort([<span class="number">10</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line"><span class="comment">#out:[2, 3, 5, 10]</span></span><br></pre></td></tr></table></figure>



<h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><p>快速排序速度取决于基准值，速度可以等于合并排序（merge sort），时间为O（nlogn），但糟糕的情况可能跟选择排序（O（n^2））相同。</p>
<h4 id="比较合并排序与快速排序"><a href="#比较合并排序与快速排序" class="headerlink" title="比较合并排序与快速排序"></a>比较合并排序与快速排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_items</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">        print(item)   <span class="comment">#10毫秒*n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_items</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        print(item)   <span class="comment">#1秒*n</span></span><br></pre></td></tr></table></figure>

<p>两者的大O相同，虽然两者运行时间不同</p>
<p>其中的10毫秒和1秒为c(常数，固定时间)</p>
<h4 id="平均情况和最糟情况"><a href="#平均情况和最糟情况" class="headerlink" title="平均情况和最糟情况"></a>平均情况和最糟情况</h4><p><img src="https://s1.ax1x.com/2020/07/13/UYrSmQ.jpg" alt="UYrSmQ.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/07/13/UYrFf0.jpg" alt="UYrFf0.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/07/13/UYrApV.jpg" alt="UYrApV.jpg"></p>
<p><a href="https://imgchr.com/i/UYrElT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/13/UYrElT.jpg" alt="UYrElT.jpg"></a></p>
<h2 id="第五章-散列表"><a href="#第五章-散列表" class="headerlink" title="第五章 散列表"></a>第五章 散列表</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>在商店的价目表查询商品价格：</p>
<p>无序价目表：简单法（第一章）O=O(n)</p>
<p>按字母顺序排：二分法（第一章） O=O(log2n)</p>
<p>但是店员却能背下价目表，在提及商品时瞬间找到价格：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYt2id.jpg" alt="aYt2id.jpg"></p>
<p>实现这一点需要散数列</p>
<p>散数列：将输入映射到数字</p>
<p>满足要求：必须一致：当输入一样时输出也必须一样</p>
<p>​                    不同的输入映射到不同的数字：输入不同时输出也不同</p>
<p>==&gt;one to one 函数</p>
<p><strong>步骤:</strong></p>
<p>创建空数组</p>
<p>填写数组：将apple设置为3，则3的元素填写苹果的价格（以此类推）</p>
<p><strong>有用原因：</strong></p>
<p>1.相同输入映射相同索引</p>
<p>2.不同输入映射不同索引</p>
<p>3.散数列知道数组有多大，只映射有效值</p>
<p>可以用字典实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book=dict()</span><br><span class="line">book[<span class="string">"apple"</span>]=<span class="number">0.6</span></span><br><span class="line">book[<span class="string">"milk"</span>]=<span class="number">1.49</span></span><br><span class="line">book[<span class="string">"avocado"</span>]=<span class="number">1.49</span></span><br><span class="line">print(book)</span><br><span class="line"><span class="comment">#out:&#123;'avocado':1.49,'apple':0.67,'milk':1.49&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a><strong>实际应用</strong></h3><p>电话簿查询</p>
<p>网址查询（转为IP地址）：Google.com-&gt;74.125.239.133（DNS resolution）</p>
<h4 id="防止重复"><a href="#防止重复" class="headerlink" title="防止重复"></a>防止重复</h4><p>在投票时，判断这个人是否已经投过票</p>
<p>设置一个字典，将投过票的人放入字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">voted=&#123;&#125;</span><br><span class="line"><span class="comment">#加入投票者姓名</span></span><br><span class="line">value=voted.get(<span class="string">"tom"</span>)</span><br></pre></td></tr></table></figure>

<p>如果tom投过票就会出现在这个字典中。返回值为true，否则为false</p>
<p>如果为false（不在列表里）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">voted=&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_voted</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> voted.get(name): <span class="comment">#有名字，即为true，所以此if会执行</span></span><br><span class="line">        print(<span class="string">"had voted"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        voted[name]=<span class="literal">True</span> <span class="comment">#将投票者加入这个dict</span></span><br><span class="line">        print(<span class="string">"let them vote"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="将散列表用作缓存"><a href="#将散列表用作缓存" class="headerlink" title="将散列表用作缓存"></a>将散列表用作缓存</h4><p>网站的缓存</p>
<p>访问网页：（拿百度举例）</p>
<ol>
<li>向百度服务器发出请求</li>
<li>服务器处理，生成网页发给你</li>
<li>你获得网页</li>
</ol>
<p>推荐功能：</p>
<p>获取你最近的足迹，推荐你可能感兴趣的内容，即在第二步进行一些运算</p>
<p>但这个过程可能需要几秒，并且它的用户千千万，所花费时间较长。</p>
<p>于是你觉得加载慢，于是你会觉得百度慢、百度这个软件不好</p>
<p>解决：</p>
<p>比如家里一个孩子很喜欢星球，总问你火星离地球多远？月球呢？… …</p>
<p>每次你又要上网搜，在说出答案，这需要花时间，就跟之前网站服务器在第二步运算的时间一样</p>
<p>但问多了你就能记住，月球离地球238,900英里这个答案</p>
<p>下次他再问你你就不需要查</p>
<p>好处：</p>
<p>时间短</p>
<p>网页服务器工作量少</p>
<p>这些缓存就存在散列表中（如主页，about等）（历史记录或者网站缓存里）</p>
<p>实现代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cache=&#123;&#125; <span class="comment">#h缓存的散列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> cache.get(url):</span><br><span class="line">        <span class="keyword">return</span> cache[url] <span class="comment">#如果有缓存，返回缓存数据，瞬间完成</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data=get_data_from_serve(url)</span><br><span class="line">        cache[url]=data <span class="comment">#将数据保存到缓存里</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<p>这样也可以解释为什么我们第一次访问一个网站的时候要花几秒，但我们访问常用的较大的网站，如百度主页，就会瞬间完成</p>
<h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><p>散列表要做到不同输入映射到数组的不同位置几乎是无法完成的</p>
<p>比如：</p>
<p>将价目表按字母顺序放进散列表：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aY5x6x.jpg" alt="aY5x6x.jpg"></p>
<p>apple放进第一个，banana放进第二个，但遇到avocado的时候，发现它的首字母也是a</p>
<p>这个时候，覆盖apple，下次查询apple的价格时查到的是avocado（因为这个是数组而不是链表，无法直接在中间加值）</p>
<p>解决方法：在a的位置储存一个链表，将a开头的都放进链表里，但这将使速度减慢</p>
<p>但是，假设这个商店只销售a开头的商品，数组的第一位将特别长，但后面25位将被浪费</p>
<p>需要合理安排散列函数，均匀分配</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>平均情况：均匀分配列表，获得数组的查找效率和链表的插入删除效率</p>
<p>最糟情况：出现严重冲突，获得数组和链表的缺点</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYo5ZT.jpg" alt="aYo5ZT.jpg"></p>
<p>获得平均情况：较低的填装因子，良好的散列函数</p>
<h4 id="填装因子"><a href="#填装因子" class="headerlink" title="填装因子"></a>填装因子</h4><p>填装因子=列表包含元素量÷位置总数</p>
<p>如果元素量大于总位数（即需要链表），填装因子大于1，就需要增加数列长度（创建一个新的数列，用hash函数将旧数列的元素装到新数列里），一般填装因子超过0.7就需要调整数列。</p>
<h4 id="良好的散列函数"><a href="#良好的散列函数" class="headerlink" title="良好的散列函数"></a>良好的散列函数</h4><p>即均匀排布</p>
<p><a href="https://imgchr.com/i/aYHUz9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/02/aYHUz9.jpg" alt="aYHUz9.jpg"></a></p>
<h2 id="第六章-广度优先搜索"><a href="#第六章-广度优先搜索" class="headerlink" title="第六章 广度优先搜索"></a>第六章 广度优先搜索</h2><p>即找出两样东西之间的最短距离（不一定是指长度上的距离）</p>
<h3 id="图简介"><a href="#图简介" class="headerlink" title="图简介"></a>图简介</h3><p>从双子峰做公交去金门大桥：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYqCHP.jpg" alt="aYqCHP.jpg"><br><img src="https://s1.ax1x.com/2020/08/02/aYqE9g.jpg" alt="aYqE9g.jpg"></p>
<p>各种地图软件就是这么实现的</p>
<h3 id="图是什么"><a href="#图是什么" class="headerlink" title="图是什么"></a>图是什么</h3><p><img src="https://s1.ax1x.com/2020/08/02/aYqB4O.jpg" alt="aYqB4O.jpg"></p>
<p>即关系网</p>
<h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><p>可解决问题：</p>
<ol>
<li>从A出发有前往B的路径吗？</li>
<li>从A出发前往B哪条路最短？</li>
</ol>
<p>从双子峰去金门大桥的问题即第二个问题</p>
<p>第一个问题：</p>
<p>你有一个农场，你需要一个销售商将商品售卖到市场上</p>
<p>你需要在你的朋友中找有没有销售商</p>
<p>创建朋友名单，再依次检查是否有销售商</p>
<p>但如果你的朋友中没有销售商，你需要在朋友的朋友中找销售商检查每个人时，要将他的朋友加入名单</p>
<p>搜遍你的人际圈直到找到销售商就是广度优先搜索</p>
<h4 id="查找最短路径"><a href="#查找最短路径" class="headerlink" title="查找最短路径"></a>查找最短路径</h4><p>第二个问题：谁是关系最近的销售商</p>
<p>第一层关系肯定大于第二层，第二层肯定大于第三层… …</p>
<p>广度优先搜索：先检查第一层关系，全部检查完再检查第二层关系</p>
<p>所以，这不仅是找到路径，还是找到最短路径</p>
<p>这样查找时必须按顺序排名单</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYOLNV.jpg" alt="aYOLNV.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/08/02/aYXlUP.jpg" alt="aYXlUP.jpg"></p>
<h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>入列和出列</p>
<p><img src="https://s1.ax1x.com/2020/08/02/atZ8w6.jpg" alt="atZ8w6.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/08/02/atetH0.jpg" alt="atetH0.jpg"></p>
<h3 id="实现图"><a href="#实现图" class="headerlink" title="实现图"></a>实现图</h3><p><img src="https://s1.ax1x.com/2020/08/02/atmsJS.jpg" alt="atmsJS.jpg"></p>
<p>此关系可表示为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">graph=&#123;&#125;</span><br><span class="line">graph[<span class="string">"you"</span>]=[<span class="string">"alice"</span>,<span class="string">"bob"</span>,<span class="string">"claire"</span>]</span><br><span class="line">graph[<span class="string">"bob"</span>]=[<span class="string">"anuj"</span>,<span class="string">"peggy"</span>]</span><br><span class="line">graph[<span class="string">"alice"</span>]=[<span class="string">"peggy"</span>]</span><br><span class="line">graph[<span class="string">"claire"</span>]=[<span class="string">"thom"</span>,<span class="string">"jonny"</span>]</span><br><span class="line">graph[<span class="string">"anuj"</span>]=[]</span><br><span class="line">graph[<span class="string">"peggy"</span>]=[]</span><br><span class="line">graph[<span class="string">"thom"</span>]=[]</span><br><span class="line">graph[<span class="string">"jonny"</span>]=[]</span><br></pre></td></tr></table></figure>

<p>其中代码顺序变化是无所谓的，因为散列表是无序的</p>
<p>这幅图中出现了有向图与无向图：</p>
<p><img src="https://s1.ax1x.com/2020/08/02/atux2D.jpg" alt="atux2D.jpg"></p>
<p>这两个是等价的</p>
<h3 id="实现算法"><a href="#实现算法" class="headerlink" title="实现算法"></a>实现算法</h3><p><img src="https://s1.ax1x.com/2020/08/02/atKKqs.jpg" alt="atKKqs.jpg"></p>
<p>代码：利用deque函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">search_queue = deque()</span><br><span class="line">search_queue+=graph[<span class="string">"you"</span>]<span class="comment">#将你的邻居都加入到这个搜索列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> search_queue:</span><br><span class="line">    person = search_queue.popleft() <span class="comment">#从中取出一个人</span></span><br><span class="line">    <span class="keyword">if</span> person_is_seller(person): <span class="comment">#检查是否是销售商</span></span><br><span class="line">        print(person+<span class="string">" is a seller!"</span>) <span class="comment">#是销售商</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        search_queue+=graph[person] <span class="comment">#不是销售商，把他的朋友都加入列表</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span> <span class="comment">#没有销售商</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person_is_seller</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> name[<span class="number">-1</span>] ==<span class="string">'s'</span> <span class="comment">#这个人是销售商</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/08/02/atlldA.jpg" alt="atlldA.jpg"></p>
<p>防止死循环出现：</p>
<p>当检查 you这个列表，找到peggy，peggy不是销售商，列出peggy的朋友，peggy的朋友是你，又检查you这个列表… …</p>
<p>所以我们需要加上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(name)</span>:</span></span><br><span class="line">    search_queue=deque()</span><br><span class="line">    search_queue+=graph[name]</span><br><span class="line">    searched=[] <span class="comment">#记录检查过的人</span></span><br><span class="line">    <span class="keyword">while</span> search_queue:</span><br><span class="line">    	person = search_queue.popleft() <span class="comment">#从中取出一个人</span></span><br><span class="line">        <span class="keyword">if</span> person <span class="keyword">not</span> <span class="keyword">in</span> searched:</span><br><span class="line">    		<span class="keyword">if</span> person_is_seller(person): <span class="comment">#检查是否是销售商</span></span><br><span class="line">        		print(person+<span class="string">" is a seller!"</span>) <span class="comment">#是销售商</span></span><br><span class="line">        		<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    		<span class="keyword">else</span>:</span><br><span class="line">        		search_queue+=graph[person] <span class="comment">#不是销售商，把他的朋友都加入列表</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span> <span class="comment">#没有销售商</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person_is_seller</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> name[<span class="number">-1</span>] ==<span class="string">'s'</span> <span class="comment">#这个人是销售商</span></span><br><span class="line"></span><br><span class="line">search(<span class="string">"you"</span>)</span><br></pre></td></tr></table></figure>

<p>运行时间</p>
<p>O=O(人数+边数) （可写为O(V+E))</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>-reading seminar</tag>
      </tags>
  </entry>
  <entry>
    <title>有关海华AI比赛2</title>
    <url>/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B2/</url>
    <content><![CDATA[<h1 id="NN-based-Regression"><a href="#NN-based-Regression" class="headerlink" title="NN-based Regression"></a>NN-based Regression</h1><h2 id="1-Observe-the-data-from-statistical-department"><a href="#1-Observe-the-data-from-statistical-department" class="headerlink" title="1 Observe the data from statistical department"></a>1 Observe the data from statistical department</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#load the dataimport csvimport numpy as np# Declare lists for storing datasetoperationCost = np.array([])profit = np.array([])# Load dataset from csv filereader = csv.reader(open('./dataForCEO-cost&amp;profit.csv','r'))for row in reader: #put two dataset into to row, the type is float    operationCost = np.append(operationCost, float(row[0]))#row 1    profit = np.append(profit, float(row[1]))#row 2</span></span><br></pre></td></tr></table></figure>

<p>plot the trainset</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">%matplotlib inlineimport matplotlib.pyplot <span class="keyword">as</span> pltdef plotData(x, y, color=<span class="literal">None</span>): <span class="comment">#set rhe function    plt.scatter(x.tolist(), y.tolist(), marker='x', color=color)#tolist:turn from dataframe to list    plt.xlabel('Operation Cost in $')  #the label on the graph    plt.ylabel('Profit in $')    #plot itplt.figure(figsize=(6,4)) #plot the backgroundplotData(operationCost, profit) plt.show() #show:plot the data</span></span><br></pre></td></tr></table></figure>

<p><a href="https://s2.ax1x.com/2020/03/08/3z8Ap9.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3z8Ap9.png" alt="3z8Ap9.png"></a></p>
<h2 id="2-Divide-dataset-and-preprocess-dataset"><a href="#2-Divide-dataset-and-preprocess-dataset" class="headerlink" title="2 Divide dataset and preprocess dataset"></a>2 Divide dataset and preprocess dataset</h2><h3 id="2-1-Divide-dataset"><a href="#2-1-Divide-dataset" class="headerlink" title="2.1 Divide dataset"></a>2.1 Divide dataset</h3><p>First, you should divide the dataset into <strong>a trainset and a testset</strong>. As an example, we can define 80%80% of the raw dataset is trainset and the other 20%20% is testset.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dataset_x = operationCost dataset_y = profit num = len(dataset_x)<span class="comment">#find the length of the dataset_xsplitLine = int(0.8*num)# generate a random list to select data randomlyindex = [i for i in range(0, num)]import randomrandom.shuffle(index)# divide into trainset and testsettrain_x = dataset_x[index[0:splitLine]] #get from index from 0 to splitlinetrain_y = dataset_y[index[0:splitLine]] test_x = dataset_x[index[splitLine:num]]test_y = dataset_y[index[splitLine:num]]</span></span><br></pre></td></tr></table></figure>

<p> observe the trainset and testset in different color</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>))plotData(train_x, train_y) <span class="comment">#plotData(x-axis,y-axis)plotData(test_x, test_y)plt.legend(["Trainset","Testset"])plt.show()</span></span><br></pre></td></tr></table></figure>

<p><a href="https://s2.ax1x.com/2020/03/08/3zGOrq.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3zGOrq.png" alt="3zGOrq.png"></a></p>
<h2 id="2-2-Preprocess-dataset"><a href="#2-2-Preprocess-dataset" class="headerlink" title="2.2 Preprocess dataset"></a>2.2 Preprocess dataset</h2><p>Before training, we need to <strong>preprocess</strong> our trainset.<br>Because the values in dataset are too big, computation of loss may be difficult. So, one method of preprocessing is <strong>normalization</strong>.<br>In this case, we can do normalization by </p>
<p>Normalized Value=RawValue/NormalizeFactor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">normFactor = np.mean(train_y) <span class="comment"># for exampledef normalize(val):    return val / normFactor #the functionnormedTrain_x = normalize(train_x)normedTrain_y = normalize(train_y)normedTest_x = normalize(test_x)normedTest_y = normalize(test_y)plt.figure(figsize=(6,4))plt.scatter(normedTrain_x, normedTrain_y, marker='x')plt.scatter(normedTest_x, normedTest_y, marker='x')plt.legend(["Normalized Trainset","Normalized Testset"])plt.show()</span></span><br></pre></td></tr></table></figure>

<p><a href="https://s2.ax1x.com/2020/03/08/3zGOrq.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3zGOrq.png" alt="3zGOrq.png"></a></p>
<h2 id="3-Describe-your-neural-network"><a href="#3-Describe-your-neural-network" class="headerlink" title="3 Describe your neural network"></a>3 Describe your neural network</h2><p>import tensorflow as tf<br>from tensorflow import keras<br>from tensorflow.keras import layers</p>
<h3 id="describe-the-model"><a href="#describe-the-model" class="headerlink" title="describe the model"></a>describe the model</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tffrom tensorflow <span class="keyword">import</span> kerasfrom tensorflow.keras <span class="keyword">import</span> layers<span class="comment"># describe the modelmodel = keras.Sequential([    layers.Dense(16, activation='relu', input_shape=(1,)), #create layers    layers.Dense(16, activation='relu'),    layers.Dense(1)])model.summary()</span></span><br><span class="line"></span><br><span class="line">Model: <span class="string">"sequential_1"</span>_________________________________________________________________Layer (type)                 Output Shape              Param <span class="comment">#   =================================================================dense_3 (Dense)              (None, 16)                32        _________________________________________________________________dense_4 (Dense)              (None, 16)                272       _________________________________________________________________dense_5 (Dense)              (None, 1)                 17        =================================================================Total params: 321Trainable params: 321Non-trainable params: 0_________________________________________________________________</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#We can use Mean Square Error (MSE) as loss function, and use Stochastic Gradient Descent (SGD) as the process we train the model (i.e. "optimizer").model.compile(loss='mse', optimizer='sgd')#compile(source, filename, mode[, flags[, dont_inherit]])</span></span><br></pre></td></tr></table></figure>

<h2 id="4-Training"><a href="#4-Training" class="headerlink" title="4 Training"></a>4 Training</h2><p>We declare a variable to record the number of iteration.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">iters = <span class="number">0</span><span class="comment"># actual trainingfor i in range(1000):    iters = iters + 1#count the times    cost = model.train_on_batch(normedTrain_x, normedTrain_y)    if iters % 100 == 0: #show every 100 times        print("After %d iteration(s), train cost = %f "%(iters, cost))#show how many times# plot resultplt.figure(figsize=(6,4))plt.scatter(normedTrain_x, normedTrain_y, marker='x')temp = np.arange(min(normedTrain_x), max(normedTrain_x), 0.01)plt.plot(temp, model.predict(temp),color = 'cyan')plt.legend(["Model Prediction Now", "Normalized Trainset"])#the label on the topplt.show()</span></span><br></pre></td></tr></table></figure>

<p><a href="https://s2.ax1x.com/2020/03/08/3zBQSK.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3zBQSK.png" alt="3zBQSK.png"></a></p>
<h2 id="5-Evaluation-of-the-trained-model"><a href="#5-Evaluation-of-the-trained-model" class="headerlink" title="5 Evaluation of the trained model"></a>5 Evaluation of the trained model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">cost = model.evaluate(normalize(test_x), normalize(test_y))print(<span class="string">'test cost:'</span>, cost)W, b = model.layers[<span class="number">0</span>].get_weights()<span class="comment">#show the weightsprint('Weights=', W, '\nbiases=', b)W, b = model.layers[1].get_weights()print('Weights=', W, '\nbiases=', b)W, b = model.layers[2].get_weights()print('Weights=', W, '\nbiases=', b)</span></span><br></pre></td></tr></table></figure>

<h2 id="6-Post-processing-and-final-prediction"><a href="#6-Post-processing-and-final-prediction" class="headerlink" title="6 Post-processing and final prediction"></a>6 Post-processing and final prediction</h2><p>Before predicting, we need to <strong>post-process</strong> the output of the trained model.<br>In above, we use normalization to preprocess. So, we use <strong>denormalization</strong> to post-process the output of the trained model and get the final predict results.  </p>
<p>First, we define a function to denormalize.</p>
<p>Prediction=(Normalized Value)×(Normalize Factor)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denormalize</span><span class="params">(val)</span>:</span>    <span class="keyword">return</span> val * normFactortemp = np.arange(min(normedTrain_x), max(normedTrain_x), <span class="number">0.01</span>)pred_y = denormalize(model.predict(temp))pred_xAxis = denormalize(temp)<span class="comment">#plot the graphplt.figure(figsize=(6,4))plotData(train_x, train_y)plotData(test_x, test_y)plt.plot(pred_xAxis, pred_y, color='cyan')plt.legend(["Prediction","Trainset","Testset"])plt.show()</span></span><br></pre></td></tr></table></figure>

<p><a href="https://s2.ax1x.com/2020/03/08/3zDwNR.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3zDwNR.png" alt="3zDwNR.png"></a></p>
]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关海华AI比赛4</title>
    <url>/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B4/</url>
    <content><![CDATA[<h1 id="CNN-based-Handwritten-Digit-Recognition"><a href="#CNN-based-Handwritten-Digit-Recognition" class="headerlink" title="CNN-based Handwritten Digit Recognition"></a>CNN-based Handwritten Digit Recognition</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function, unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="comment"># TensorFlow and tf.keras</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">print(tf.__version__)</span><br></pre></td></tr></table></figure>

<h2 id="Import-MNIST-dataset"><a href="#Import-MNIST-dataset" class="headerlink" title="Import MNIST dataset"></a>Import MNIST dataset</h2><p> This guide uses the <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">MNIST</a> dataset which contains 70,000 grayscale images in 10 categories. MNIST  stands for Mixed National Institute of Standards and Technology  database.<br>The MNIST dataset is often used as the “Hello, World” of  machine learning programs for computer vision. It contains images of  handwritten digits (0, 1, 2, etc.).<br>Here, 60,000 images are used to  train the network and 10,000 images to evaluate how accurately the  network learned to classify images. You can access MNIST directly from  TensorFlow. Import and load MNIST data directly from TensorFlow: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mnist = keras.datasets.mnist</span><br><span class="line"></span><br><span class="line">(train_images, train_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># grayscale image has only 1 channal</span></span><br><span class="line"><span class="keyword">if</span> K.image_data_format() == <span class="string">'channels_first'</span>:</span><br><span class="line">    train_images = train_images.reshape(train_images.shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">    test_images = test_images.reshape(test_images.shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">    input_shape = (<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    train_images = train_images.reshape(train_images.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    test_images = test_images.reshape(test_images.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    input_shape = (<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Explore-the-data"><a href="#Explore-the-data" class="headerlink" title="Explore the data"></a>Explore the data</h2><p> Let’s explore the format of the dataset before training the model. The  following shows there are 60,000 images in the training set, with each  image represented as 28 x 28 pixels: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_images.shape</span><br><span class="line"><span class="comment">#out:(60000, 28, 28, 1) #the shape of the trainset</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Likewise, there are 60,000 labels in the training set:</span></span><br><span class="line">len(train_labels)</span><br><span class="line"><span class="comment">#out:60000</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Each label is an integer between 0 and 9:</span></span><br><span class="line">train_labels</span><br><span class="line"><span class="comment">#out:array([5, 0, 4, ..., 5, 6, 8], dtype=uint8)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Each label is an integer between 0 and 9:</span></span><br><span class="line">test_images.shape</span><br><span class="line"><span class="comment">#out:(10000, 28, 28, 1)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#And the test set contains 10,000 images labels:</span></span><br><span class="line">len(test_labels)</span><br><span class="line"><span class="comment">#out:10000</span></span><br></pre></td></tr></table></figure>

<h2 id="Preprocess-the-data"><a href="#Preprocess-the-data" class="headerlink" title="Preprocess the data"></a>Preprocess the data</h2><p>The data must be preprocessed before training the network. If you  inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.imshow(train_images[<span class="number">0</span>,:,:,<span class="number">0</span>])<span class="comment">#choose the first one in the set</span></span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.grid(<span class="literal">False</span>)<span class="comment">#no grid line #plt.grid(linestyle=":", color="r")</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p> <img src="https://s1.ax1x.com/2020/03/12/8VH5Eq.png" alt="8VH5Eq.png"></p>
<p>Scale these values to a range of 0 to 1 before feeding them to the  neural network model. To do so, divide the values by 255. It’s important that the <em>training set</em> and the <em>testing set</em> be preprocessed in the same way.<br>In addition, encode labels using one-hot encoding. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_images_normed = train_images / <span class="number">255.0</span> <span class="comment">#make the value between 1 and 0</span></span><br><span class="line"></span><br><span class="line">test_images_normed = test_images / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">train_labels_onehot = keras.utils.to_categorical(train_labels, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">test_labels_onehot = keras.utils.to_categorical(test_labels, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p> To verify that the data is in the correct format and that you’re ready  to build and train the network, let’s display the first 25 images from  the <em>training set</em> and display the class name below each image. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>): <span class="comment">#choose 25 sample and put them in 5x5 graph</span></span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">5</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    plt.grid(<span class="literal">False</span>)</span><br><span class="line">    plt.imshow(train_images[i,:,:,<span class="number">0</span>], cmap=plt.cm.binary)</span><br><span class="line">    plt.xlabel(train_labels[i])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/12/8VbS56.png" alt="8VbS56.png"></p>
<h2 id="Build-the-model"><a href="#Build-the-model" class="headerlink" title="Build the model"></a>Build the model</h2><p>Building the neural network requires configuring the layers of the model, then compiling the model.<br>This example is <a href="http://yann.lecun.com/exdb/lenet/" target="_blank" rel="noopener">LeNet-5</a>, you can modify the model as you like.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = keras.Sequential([</span><br><span class="line">    keras.layers.Conv2D(<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">                 activation=<span class="string">'relu'</span>,</span><br><span class="line">                 input_shape=input_shape),</span><br><span class="line">    keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    keras.layers.Conv2D(<span class="number">16</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    keras.layers.Flatten(),</span><br><span class="line">    keras.layers.Dense(<span class="number">120</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">84</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p> Observe the summary. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/12/8Vb8qs.png" alt="8Vb8qs.png"></p>
<p> Define the process you train the model. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.compile(loss=keras.losses.categorical_crossentropy,</span><br><span class="line">              optimizer=keras.optimizers.Adam(),</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br></pre></td></tr></table></figure>

<h2 id="Train-the-model"><a href="#Train-the-model" class="headerlink" title="Train the model"></a>Train the model</h2><h3 id="Feed-the-model"><a href="#Feed-the-model" class="headerlink" title="Feed the model"></a>Feed the model</h3><p>To start training,  call the <code>model.fit</code> method—so called because it “fits” the model to the training data:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.fit(train_images_normed, train_labels_onehot, batch_size=<span class="number">100</span>, epochs=<span class="number">6</span>)</span><br><span class="line"><span class="comment"># It may need more than one minute</span></span><br></pre></td></tr></table></figure>

<p>As the model trains, the loss and accuracy metrics are displayed. </p>
<h3 id="Evaluate-accuracy"><a href="#Evaluate-accuracy" class="headerlink" title="Evaluate accuracy"></a>Evaluate accuracy</h3><p>Next, compare how the model performs on the test dataset:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_loss, test_acc = model.evaluate(test_images_normed, test_labels_onehot, verbose=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\nTest accuracy:'</span>, test_acc)Make predictions</span><br></pre></td></tr></table></figure>

<h3 id="Make-predictions"><a href="#Make-predictions" class="headerlink" title="Make predictions"></a>Make predictions</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predictions = model.predict(test_images_normed)</span><br></pre></td></tr></table></figure>

<p> Here, the model has predicted the label for each image in the testing set. Let’s take a look at the first prediction: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predictions[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p> A prediction is an array of 10 numbers. They represent the model’s  “confidence” that the image corresponds to each of the 10 different  articles of clothing. You can see which label has the highest confidence value: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.argmax(predictions[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#out:7</span></span><br></pre></td></tr></table></figure>

<p> So, the model is most confident that this image is 7. Examining the test label shows that this classification is correct: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_labels[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#out:7</span></span><br></pre></td></tr></table></figure>

<p> Graph this to look at the full set of 10 class predictions. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_image</span><span class="params">(i, predictions_array, true_label, img)</span>:</span></span><br><span class="line">    predictions_array, true_label, img = predictions_array, true_label[i], img[i,:,:,<span class="number">0</span>]</span><br><span class="line">    plt.grid(<span class="literal">False</span>)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line"></span><br><span class="line">    plt.imshow(img, cmap=plt.cm.binary)</span><br><span class="line"></span><br><span class="line">    predicted_label = np.argmax(predictions_array)</span><br><span class="line">    <span class="keyword">if</span> predicted_label == true_label:</span><br><span class="line">        color = <span class="string">'blue'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        color = <span class="string">'red'</span></span><br><span class="line"></span><br><span class="line">    plt.xlabel(<span class="string">"Pred:&#123;&#125; &#123;:2.0f&#125;% (GT:&#123;&#125;)"</span>.format(predicted_label,</span><br><span class="line">                                <span class="number">100</span>*np.max(predictions_array),</span><br><span class="line">                                true_label),</span><br><span class="line">                                color=color)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_value_array</span><span class="params">(i, predictions_array, true_label)</span>:</span></span><br><span class="line">    predictions_array, true_label = predictions_array, true_label[i]</span><br><span class="line">    plt.grid(<span class="literal">False</span>)</span><br><span class="line">    plt.xticks(range(<span class="number">10</span>))</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    thisplot = plt.bar(range(<span class="number">10</span>), predictions_array, color=<span class="string">"#777777"</span>)</span><br><span class="line">    plt.ylim([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    predicted_label = np.argmax(predictions_array)</span><br><span class="line"></span><br><span class="line">    thisplot[predicted_label].set_color(<span class="string">'red'</span>)</span><br><span class="line">    thisplot[true_label].set_color(<span class="string">'blue'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Verify-predictions"><a href="#Verify-predictions" class="headerlink" title="Verify predictions"></a>Verify predictions</h3><p>With the model trained, you can use it to make predictions about some images.</p>
<p>Let’s look at the 0th image, predictions, and prediction array. Correct  prediction labels are blue and incorrect prediction labels are red. The  number gives the percentage (out of 100) for the predicted label.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">3</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plot_image(i, predictions[i], test_labels, test_images)<span class="comment">#show the original one</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plot_value_array(i, predictions[i],  test_labels)<span class="comment">#show the predicted one</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/12/8VbRJK.png" alt="8VbRJK.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">12</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">3</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plot_image(i, predictions[i], test_labels, test_images)</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plot_value_array(i, predictions[i],  test_labels)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p> <img src="https://s1.ax1x.com/2020/03/12/8VbWRO.png" alt="8VbWRO.png"></p>
<p>Let’s plot several images with their predictions. Note that the model can be wrong even when very confident. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Plot random 25 test images, their predicted labels, and the true labels.</span></span><br><span class="line"><span class="comment"># Color correct predictions in blue and incorrect predictions in red.</span></span><br><span class="line">h = set()</span><br><span class="line"><span class="keyword">while</span>(len(h)&lt;<span class="number">25</span>):</span><br><span class="line">    h.add(random.randint(<span class="number">0</span>, <span class="number">9999</span>))</span><br><span class="line">    </span><br><span class="line">num_rows = <span class="number">5</span></span><br><span class="line">num_cols = <span class="number">3</span></span><br><span class="line">num_images = num_rows*num_cols</span><br><span class="line">plt.figure(figsize=(<span class="number">2</span>*<span class="number">2</span>*num_cols, <span class="number">2</span>*num_rows))</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> h:</span><br><span class="line">    plt.subplot(num_rows, <span class="number">2</span>*num_cols, <span class="number">2</span>*i+<span class="number">1</span>)</span><br><span class="line">    plot_image(p, predictions[p], test_labels, test_images)</span><br><span class="line">    plt.title(<span class="string">"Index:&#123;&#125;"</span>.format(p))</span><br><span class="line">    plt.subplot(num_rows, <span class="number">2</span>*num_cols, <span class="number">2</span>*i+<span class="number">2</span>)</span><br><span class="line">    plot_value_array(p, predictions[p], test_labels)</span><br><span class="line">    plt.title(<span class="string">"Scores"</span>)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/12/8Vq9wn.png" alt="8Vq9wn.png"></p>
]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关海华AI比赛5</title>
    <url>/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B5/</url>
    <content><![CDATA[<h1 id="05-1-Read-annotations-from-JSON-file"><a href="#05-1-Read-annotations-from-JSON-file" class="headerlink" title="05.1.Read annotations from JSON file"></a>05.1.Read annotations from JSON file</h1><h2 id="Import-packages"><a href="#Import-packages" class="headerlink" title="Import packages"></a>Import packages</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*- </span></span><br><span class="line"><span class="comment"># import packages</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>

<h2 id="Open-JSON-file"><a href="#Open-JSON-file" class="headerlink" title="Open JSON file"></a>Open JSON file</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'./dataset/resizedFullGarbageDataset/train.json'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    train_labels = json.load(f) <span class="comment">#read the file</span></span><br></pre></td></tr></table></figure>

<h2 id="Observe-the-data-format"><a href="#Observe-the-data-format" class="headerlink" title="Observe the data format"></a>Observe the data format</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_labels <span class="comment">#observe the types of the data</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">out:&#123;&#39;info&#39;: None,</span><br><span class="line">     &#39;lincenses&#39;: None,</span><br><span class="line">     &#39;images&#39;: [&#123;&#39;file_name&#39;: &#39;images_withoutrect&#x2F;11003.png&#39;,</span><br><span class="line">     &#39;height&#39;: 1080,</span><br><span class="line">     &#39;width&#39;: 1920,</span><br><span class="line">     &#39;image_id&#39;: 11003&#125;,</span><br><span class="line">     &#123;&#39;file_name&#39;: &#39;images_withoutrect&#x2F;11004.png&#39;,</span><br><span class="line">      &#39;height&#39;: 1080,</span><br><span class="line">      &#39;width&#39;: 1920,</span><br><span class="line">      &#39;image_id&#39;: 11004&#125;,</span><br><span class="line">      ......</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">type(train_labels) <span class="comment">#find the tye of the labels</span></span><br><span class="line"><span class="comment">#out:dict</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_labels.keys()</span><br><span class="line"><span class="comment">#out:dict_keys(['info', 'lincenses', 'images', 'type', 'annotations', 'categories'])</span></span><br></pre></td></tr></table></figure>

<h2 id="Read-categories"><a href="#Read-categories" class="headerlink" title="Read categories"></a>Read categories</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_labels[<span class="string">'categories'</span>] <span class="comment">#print the categories</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">out:[&#123;&#39;id&#39;: 1, &#39;name&#39;: &#39;瓜子壳&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: 2, &#39;name&#39;: &#39;核桃&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: 3, &#39;name&#39;: &#39;花生壳&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: 4, &#39;name&#39;: &#39;毛豆壳&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: 5, &#39;name&#39;: &#39;西瓜子&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: 6, &#39;name&#39;: &#39;枣核&#39;&#125;,</span><br><span class="line">     ......</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">type(train_labels[<span class="string">'categories'</span>])</span><br><span class="line"><span class="comment">#out:list</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_labels[<span class="string">'categories'</span>][<span class="number">0</span>]<span class="comment">#choose the first one</span></span><br><span class="line"><span class="comment">#out:&#123;'id': 1, 'name': '瓜子壳'&#125;</span></span><br></pre></td></tr></table></figure>

<p> Convert to list in order to use easier. <strong>(Attention: <code>id</code> begins at 1, while the index of list begins at 0)</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = []</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> train_labels[<span class="string">'categories'</span>]:</span><br><span class="line">    names.append(label[<span class="string">'name'</span>])</span><br><span class="line">print(names) <span class="comment">#put the categories into a list and show it</span></span><br></pre></td></tr></table></figure>

<p>#out:[‘瓜子壳’, ‘核桃’, ‘花生壳’, ‘毛豆壳’, ‘西瓜子’, ‘枣核’, ‘话梅核’, ‘苹果皮’, ‘柿子皮’, ‘西瓜皮’, ‘香蕉皮’, ‘柚子皮’, ‘荔枝壳’, ‘芒果皮’, ‘苹果核’, ‘干果’, ‘桔子皮’, ‘饼干’, ‘面包’, ‘糖果’, ‘宠物饲料’, ‘风干食品’, ‘蜜饯’, ‘肉干’, ‘冲泡饮料粉’, ‘奶酪’, ‘罐头’, ‘糕饼’, ‘薯片’, ‘树叶’, ‘杂草’, ‘绿植’, ‘鲜花’, ‘豆类’, ‘动物内脏’, ‘绿豆饭’, ‘谷类及加工物’, ‘贝类去硬壳’, ‘虾’, ‘面食’, ‘肉类’, ‘五谷杂粮’, ‘排骨-小肋排’, ‘鸡’, ‘鸡骨头’, ‘螺蛳’, ‘鸭’, ‘鱼’, ‘菜根’, ‘菜叶’, ‘菌菇类’, ‘鱼鳞’, ‘调料’, ‘茶叶渣’, ‘咖啡渣’, ‘粽子’, ‘动物蹄’, ‘小龙虾’, ‘蟹壳’, ‘酱料’, ‘鱼骨头’, ‘蛋壳’, ‘中药材’, ‘中药渣’, ‘镜子’, ‘玻璃制品’, ‘窗玻璃’, ‘碎玻璃片’, ‘化妆品玻璃瓶’, ‘食品及日用品玻璃瓶罐’, ‘保温杯’, ‘玻璃杯’, ‘图书期刊’, ‘报纸’, ‘食品外包装盒’, ‘鞋盒’, ‘利乐包’, ‘广告单’, ‘打印纸’, ‘购物纸袋’, ‘日历’, ‘快递纸袋’, ‘信封’, ‘烟盒’, ‘易拉罐’, ‘金属制品’, ‘吸铁石’, ‘铝制品’, ‘金属瓶罐’, ‘金属工具’, ‘罐头盒’, ‘勺子’, ‘菜刀’, ‘叉子’, ‘锅’, ‘金属筷子’, ‘数据线’, ‘塑料玩具’, ‘矿泉水瓶’, ‘塑料泡沫’, ‘塑料包装’, ‘硬塑料’, ‘一次性塑料餐盒餐具’, ‘电线’, ‘塑料衣架’, ‘密胺餐具’, ‘亚克力板’, ‘PVC管’, ‘插座’, ‘化妆品塑料瓶’, ‘篮球’, ‘足球’, ‘KT板’, ‘食品塑料盒’, ‘食用油桶’, ‘塑料杯’, ‘塑料盆’, ‘一次性餐盒’, ‘废弃衣服’, ‘鞋’, ‘碎布’, ‘书包’, ‘床上用品’, ‘棉被’, ‘丝绸手绢’, ‘枕头’, ‘毛绒玩具’, ‘皮带’, ‘电路板’, ‘充电宝’, ‘木制品’, ‘优盘’, ‘灯管灯泡’, ‘节能灯’, ‘二极管’, ‘纽扣电池’, ‘手机电池’, ‘镍镉电池’, ‘锂电池’, ‘蓄电池’, ‘胶卷’, ‘照片’, ‘指甲油瓶’, ‘X光片’, ‘农药瓶’, ‘杀虫剂及罐’, ‘蜡烛’, ‘墨盒’, ‘染发剂壳’, ‘消毒液瓶’, ‘油漆桶’, ‘药品包装’, ‘药瓶’, ‘废弃针管’, ‘输液管’, ‘口服液瓶’, ‘眼药水瓶’, ‘水银温度计’, ‘水银血压计’, ‘胶囊’, ‘药片’, ‘固体杀虫剂’, ‘甘蔗皮’, ‘坚果壳’, ‘橡皮泥’, ‘毛发’, ‘棉签’, ‘创可贴’, ‘口红’, ‘笔’, ‘纸巾’, ‘胶带’, ‘湿巾’, ‘水彩笔’, ‘打火机’, ‘防碎气泡膜’, ‘榴莲壳’, ‘睫毛膏’, ‘眼影’, ‘仓鼠浴沙’, ‘大骨棒’, ‘旧毛巾’, ‘竹制品’, ‘粉笔’, ‘一次性口罩’, ‘一次性手套’, ‘粉底液’, ‘灰土’, ‘尼龙制品’, ‘尿片’, ‘雨伞’, ‘带胶制品’, ‘牙膏皮’, ‘狗尿布’, ‘椰子壳’, ‘粉扑’, ‘破碗碟’, ‘陶瓷’, ‘卫生纸’, ‘烟头’, ‘假睫毛’, ‘猫砂’, ‘牙刷’, ‘玉米棒’]</p>
<h2 id="Read-annotations"><a href="#Read-annotations" class="headerlink" title="Read annotations"></a>Read annotations</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_labels[<span class="string">'annotations'</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">out:[&#123;&#39;area&#39;: 81909.20209190401,</span><br><span class="line">      &#39;iscrowd&#39;: 0,</span><br><span class="line">      &#39;image_id&#39;: 11003,</span><br><span class="line">      &#39;bbox&#39;: [636.08832, 305.77176, 298.5888, 274.32108000000005],</span><br><span class="line">      &#39;category_id&#39;: 2&#125;,</span><br><span class="line">     &#123;&#39;area&#39;: 105273.393928704,</span><br><span class="line">      &#39;iscrowd&#39;: 0,</span><br><span class="line">      &#39;image_id&#39;: 11004,</span><br><span class="line">      &#39;bbox&#39;: [804.4512, 420.56064, 306.46848, 343.5048],</span><br><span class="line">      &#39;category_id&#39;: 2&#125;,</span><br><span class="line">      ......</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">type(train_labels[<span class="string">'annotations'</span>])</span><br><span class="line"><span class="comment">#out:list</span></span><br></pre></td></tr></table></figure>

<p> As an example, let’s load an image and its annotation. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = random.randint(<span class="number">1</span>, len(train_labels[<span class="string">'annotations'</span>])) <span class="comment"># select the random n-th image as example</span></span><br><span class="line"></span><br><span class="line">image_id = train_labels[<span class="string">'annotations'</span>][n][<span class="string">'image_id'</span>]</span><br><span class="line">category_id = train_labels[<span class="string">'annotations'</span>][n][<span class="string">'category_id'</span>]</span><br><span class="line">category_name = names[category_id - <span class="number">1</span>]  <span class="comment"># ←look here</span></span><br><span class="line"></span><br><span class="line">image = cv2.imread(<span class="string">'./dataset/resizedFullGarbageDataset/train_resized/'</span> + str(image_id) + <span class="string">'.jpg'</span>) <span class="comment">#load the pictures</span></span><br><span class="line"></span><br><span class="line">plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)) <span class="comment">#use cv2 to show the picture</span></span><br><span class="line">print(<span class="string">"Index:%d\nFilename:%d.jpg\nCategory:%d-%s"</span>%(n, image_id, category_id, category_name)) <span class="comment">#\n means changing to another row</span></span><br><span class="line"><span class="comment">#out:Index:47056</span></span><br><span class="line"><span class="comment">#    Filename:265768.jpg</span></span><br><span class="line"><span class="comment">#    Category:122-书包</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/22/8If1PA.png" alt="8If1PA.png"></p>
<p>Observe the distribution of classes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image_ids = []</span><br><span class="line">category_ids = []</span><br><span class="line">category_names = []</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> train_labels[<span class="string">'annotations'</span>]:</span><br><span class="line">    image_ids.append(label[<span class="string">'image_id'</span>]) <span class="comment">#add pictures to the list</span></span><br><span class="line">    category_ids.append(label[<span class="string">'category_id'</span>]) <span class="comment">#add category</span></span><br><span class="line">    category_names.append(names[label[<span class="string">'category_id'</span>] - <span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.hist(category_ids, bins=len(names), density=<span class="number">0</span>)</span><br><span class="line">plt.xlim(<span class="number">1</span>, <span class="number">204</span>)</span><br><span class="line">plt.xlabel(<span class="string">"category_id"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"number"</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/22/8IfBPs.png" alt="8IfBPs.png"></p>
<h2 id="Convert-annotations-into-CSV-format"><a href="#Convert-annotations-into-CSV-format" class="headerlink" title="Convert annotations into CSV format"></a>Convert annotations into CSV format</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'./dataset/resizedFullGarbageDataset/train.csv'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"id,label,name,filename\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(image_ids)):</span><br><span class="line">        f.write(<span class="string">"%s,%s,%s,%s.jpg\n"</span>%(str(image_ids[i]), str(category_ids[i]), names[category_ids[i]<span class="number">-1</span>], str(image_ids[i])))</span><br></pre></td></tr></table></figure>





<h1 id="05-2-Train-a-garbage-classifier"><a href="#05-2-Train-a-garbage-classifier" class="headerlink" title="05.2.Train a garbage classifier"></a>05.2.Train a garbage classifier</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function, unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="comment"># TensorFlow and tf.keras</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.callbacks <span class="keyword">import</span> LearningRateScheduler</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># ← a new package is needed to be install, use &gt; conda install pandas</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">print(tf.__version__)</span><br></pre></td></tr></table></figure>

<h2 id="Import-dataset-and-preprocessing"><a href="#Import-dataset-and-preprocessing" class="headerlink" title="Import dataset and preprocessing"></a>Import dataset and preprocessing</h2><p>Because our dataset is a bit large, RAM may not be enough to directly load all images. We can use <code>flow_from_dataframe</code> to load our dataset. (click <a href="https://keras.io/preprocessing/image/" target="_blank" rel="noopener">here</a> to read more about this function)<br>First, load labels from our <code>.csv</code> file. We use <code>pandas.read_csv</code>, it loads csv file to <code>DataFrame</code> format.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df=pd.read_csv(<span class="string">"./dataset/resizedFullGarbageDataset/train.csv"</span>, encoding=<span class="string">'gbk'</span>, dtype=str)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th>id</th>
<th>label</th>
<th>name</th>
<th>filename</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>11003</td>
<td>2</td>
<td>核桃</td>
<td>11003.jpg</td>
</tr>
<tr>
<td>1</td>
<td>11004</td>
<td>2</td>
<td>核桃</td>
<td>11004.jpg</td>
</tr>
<tr>
<td>2</td>
<td>11005</td>
<td>2</td>
<td>核桃</td>
<td>11005.jpg</td>
</tr>
<tr>
<td>3</td>
<td>11006</td>
<td>2</td>
<td>核桃</td>
<td>11006.jpg</td>
</tr>
<tr>
<td>…</td>
<td>……</td>
<td>……</td>
<td>……</td>
<td>……</td>
</tr>
</tbody></table>
<p> Then, use <code>keras.preprocessing.image.ImageDataGenerator</code> to load trainset.<br>‘catagories’ in the JSON file says, the dataset contains 202 classes, but actually it has only 198 classes. To avoid confusing <code>df[&#39;label&#39;]</code> with index of classifier output, we use <code>df[&#39;name&#39;]</code> as input.<br>75% of images are set as trainset, while 25% of images are set as testset. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">sizeX, sizeY = <span class="number">112</span>, <span class="number">112</span></span><br><span class="line"></span><br><span class="line">datagen=ImageDataGenerator(rescale=<span class="number">1.</span>/<span class="number">255</span>, validation_split=<span class="number">0.25</span>)</span><br><span class="line"><span class="comment">#trainset:</span></span><br><span class="line">trainset = datagen.flow_from_dataframe(dataframe=df, directory=<span class="string">'./dataset/resizedFullGarbageDataset/train_resized'</span>, <span class="comment">#the position of file</span></span><br><span class="line">                                       x_col=<span class="string">'filename'</span>, y_col=<span class="string">'name'</span>, class_mode=<span class="string">'categorical'</span>, target_size=(sizeX,sizeY),</span><br><span class="line">                                       batch_size=batch_size, shuffle=<span class="literal">True</span>, seed=<span class="number">0Xabc123</span>, subset=<span class="string">'training'</span>)</span><br><span class="line"><span class="comment">#testset:</span></span><br><span class="line">testset = datagen.flow_from_dataframe(dataframe=df, directory=<span class="string">'./dataset/resizedFullGarbageDataset/train_resized'</span>,</span><br><span class="line">                                      x_col=<span class="string">'filename'</span>, y_col=<span class="string">'name'</span>, class_mode=<span class="string">'categorical'</span>, target_size=(sizeX,sizeY),</span><br><span class="line">                                      batch_size=batch_size, shuffle=<span class="literal">True</span>, seed=<span class="number">0Xabc123</span>, subset=<span class="string">'validation'</span>)</span><br></pre></td></tr></table></figure>

<p> Correspondingly, we can use <code>.class_indices</code> to see the relationship between <code>name</code> and <code>index</code> before one-hot encoding. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = trainset.class_indices</span><br><span class="line">names</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;KT板&#39;: 0,</span><br><span class="line"> &#39;PVC管&#39;: 1,</span><br><span class="line"> &#39;X光片&#39;: 2,</span><br><span class="line"> &#39;一次性口罩&#39;: 3,</span><br><span class="line"> &#39;一次性塑料餐盒餐具&#39;: 4,</span><br><span class="line"> &#39;一次性手套&#39;: 5,</span><br><span class="line"> ......</span><br></pre></td></tr></table></figure>

<p> We can define a function to get <code>name</code> through <code>index</code>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getname</span><span class="params">(index)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(names)[index]</span><br></pre></td></tr></table></figure>

<p> <code>trainset[i]</code> has two parts. <code>trainset[i][0]</code> is the i-th batch of image, while <code>trainset[i][1]</code> is one-hot encodings which represents classes. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">6</span>))</span><br><span class="line">n = random.randint(<span class="number">0</span>,<span class="number">1874</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">4</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(trainset[n][<span class="number">0</span>][i]) <span class="comment">#plot the pictures</span></span><br><span class="line">    index = np.argmax(trainset[n][<span class="number">1</span>][i])</span><br><span class="line">    plt.xlabel(str(index) + <span class="string">':'</span> + getname(index)) <span class="comment">#show the category</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/23/87h9DP.png" alt="87h9DP.png"></p>
<h2 id="Describe-our-model"><a href="#Describe-our-model" class="headerlink" title="Describe our model"></a>Describe our model</h2><p>As an example, we describe the following model.<br><em>(This example may not have good performance.)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_shape = (sizeX, sizeY, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">model = keras.Sequential([</span><br><span class="line">    keras.layers.Conv2D(<span class="number">16</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">                 activation=<span class="string">'relu'</span>,</span><br><span class="line">                 input_shape=input_shape),</span><br><span class="line">    keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    keras.layers.Conv2D(<span class="number">32</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    keras.layers.Flatten(),</span><br><span class="line">    keras.layers.Dense(<span class="number">120</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">84</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">198</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model.compile(loss=keras.losses.categorical_crossentropy,</span><br><span class="line">              optimizer=keras.optimizers.Adam(),</span><br><span class="line">              metrics=[<span class="string">"accuracy"</span>])</span><br></pre></td></tr></table></figure>

<h2 id="Start-learning"><a href="#Start-learning" class="headerlink" title="Start learning"></a>Start learning</h2><p> Because the dataset is large, <em>it may take a <strong>very long</strong> time.</em> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STEP_SIZE_TRAIN=trainset.n//trainset.batch_size</span><br><span class="line">STEP_SIZE_VALID=testset.n//testset.batch_size</span><br><span class="line">print(STEP_SIZE_TRAIN, STEP_SIZE_VALID)</span><br><span class="line"></span><br><span class="line">model.fit_generator(generator=trainset,</span><br><span class="line">                    steps_per_epoch=STEP_SIZE_TRAIN,</span><br><span class="line">                    validation_data=testset,</span><br><span class="line">                    validation_steps=STEP_SIZE_VALID,</span><br><span class="line">                    epochs=<span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="Evaluate-the-model"><a href="#Evaluate-the-model" class="headerlink" title="Evaluate the model"></a>Evaluate the model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.evaluate_generator(testset,verbose=<span class="number">1</span>) <span class="comment">#predict</span></span><br></pre></td></tr></table></figure>

<h2 id="Save-the-trained-model"><a href="#Save-the-trained-model" class="headerlink" title="Save the trained model"></a>Save the trained model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">modelname = <span class="string">'garbageExample0'</span></span><br><span class="line">model.save(<span class="string">'./TrainedModels/'</span> + modelname + <span class="string">'.h5'</span>)<span class="comment">#create the file and save it</span></span><br></pre></td></tr></table></figure>





<h1 id="05-3-Make-prediction-on-validationset"><a href="#05-3-Make-prediction-on-validationset" class="headerlink" title="05.3.Make prediction on validationset"></a>05.3.Make prediction on validationset</h1><p>from <strong>future</strong> import absolute_import, division, print_function, unicode_literals</p>
<h1 id="TensorFlow-and-tf-keras"><a href="#TensorFlow-and-tf-keras" class="headerlink" title="TensorFlow and tf.keras"></a>TensorFlow and tf.keras</h1><p>import tensorflow as tf<br>from tensorflow import keras<br>from tensorflow.keras import backend as K<br>from tensorflow.keras.preprocessing.image import ImageDataGenerator<br>from tensorflow.keras.callbacks import LearningRateScheduler<br>from tensorflow.keras.preprocessing import image</p>
<h1 id="Helper-libraries"><a href="#Helper-libraries" class="headerlink" title="Helper libraries"></a>Helper libraries</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.rcParams[&#39;font.sans-serif&#39;] &#x3D; [&#39;SimHei&#39;]  # 用来正常显示中文标签</span><br><span class="line">plt.rcParams[&#39;axes.unicode_minus&#39;] &#x3D; False  # 用来正常显示负号</span><br><span class="line">import random</span><br><span class="line">import pandas as pd # ← a new package is needed to be install, use &gt; conda install pandas</span><br><span class="line">import cv2</span><br><span class="line">import os</span><br><span class="line">import json</span><br></pre></td></tr></table></figure>

<h2 id="Load-trained-model"><a href="#Load-trained-model" class="headerlink" title="Load trained model"></a>Load trained model</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">modelname &#x3D; &#39;garbageExample0&#39;</span><br><span class="line">model &#x3D; keras.models.load_model(&#39;.&#x2F;trainedModels&#x2F;&#39; + modelname + &#39;.h5&#39;)</span><br></pre></td></tr></table></figure>

<h2 id="Import-validationset"><a href="#Import-validationset" class="headerlink" title="Import validationset"></a>Import validationset</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">valiset_path = <span class="string">'./dataset/resizedFullGarbageDataset/val_resized'</span></span><br><span class="line">valiset_filenames = os.listdir(valiset_path)</span><br><span class="line">len(valiset_filenames)</span><br><span class="line"><span class="comment">#out:10000</span></span><br></pre></td></tr></table></figure>

<h2 id="Define-getname-function"><a href="#Define-getname-function" class="headerlink" title="Define getname() function"></a>Define <code>getname()</code> function</h2><p>The names is in the order generated by <code>flow_from_dataframe</code> before training.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = &#123;<span class="string">'KT板'</span>: <span class="number">0</span>, <span class="string">'PVC管'</span>: <span class="number">1</span>, <span class="string">'X光片'</span>: <span class="number">2</span>, <span class="string">'一次性口罩'</span>: <span class="number">3</span>, <span class="string">'一次性塑料餐盒餐具'</span>: <span class="number">4</span>, <span class="string">'一次性手套'</span>: <span class="number">5</span>,</span><br><span class="line">         <span class="string">'一次性餐盒'</span>: <span class="number">6</span>, <span class="string">'丝绸手绢'</span>: <span class="number">7</span>, <span class="string">'中药材'</span>: <span class="number">8</span>, <span class="string">'中药渣'</span>: <span class="number">9</span>, <span class="string">'书包'</span>: <span class="number">10</span>,</span><br><span class="line">         <span class="string">'二极管'</span>: <span class="number">11</span>, <span class="string">'五谷杂粮'</span>: <span class="number">12</span>, <span class="string">'亚克力板'</span>: <span class="number">13</span>, <span class="string">'仓鼠浴沙'</span>: <span class="number">14</span>, <span class="string">'优盘'</span>: <span class="number">15</span>,</span><br><span class="line">          <span class="string">'保温杯'</span>: <span class="number">16</span>, <span class="string">'信封'</span>: <span class="number">17</span>, <span class="string">'假睫毛'</span>: <span class="number">18</span>, <span class="string">'充电宝'</span>: <span class="number">19</span>, <span class="string">'农药瓶'</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="string">'冲泡饮料粉'</span>: <span class="number">21</span>, <span class="string">'创可贴'</span>: <span class="number">22</span>, <span class="string">'利乐包'</span>: <span class="number">23</span>, <span class="string">'动物内脏'</span>: <span class="number">24</span>, <span class="string">'动物蹄'</span>: <span class="number">25</span>,</span><br><span class="line">          <span class="string">'勺子'</span>: <span class="number">26</span>, <span class="string">'化妆品塑料瓶'</span>: <span class="number">27</span>, <span class="string">'化妆品玻璃瓶'</span>: <span class="number">28</span>, <span class="string">'卫生纸'</span>: <span class="number">29</span>, <span class="string">'叉子'</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="string">'口服液瓶'</span>: <span class="number">31</span>, <span class="string">'口红'</span>: <span class="number">32</span>, <span class="string">'吸铁石'</span>: <span class="number">33</span>, <span class="string">'咖啡渣'</span>: <span class="number">34</span>, <span class="string">'固体杀虫剂'</span>: <span class="number">35</span>,</span><br><span class="line">          <span class="string">'图书期刊'</span>: <span class="number">36</span>, <span class="string">'坚果壳'</span>: <span class="number">37</span>, <span class="string">'塑料包装'</span>: <span class="number">38</span>, <span class="string">'塑料杯'</span>: <span class="number">39</span>, <span class="string">'塑料泡沫'</span>: <span class="number">40</span>,</span><br><span class="line">          <span class="string">'塑料玩具'</span>: <span class="number">41</span>, <span class="string">'塑料盆'</span>: <span class="number">42</span>, <span class="string">'塑料衣架'</span>: <span class="number">43</span>, <span class="string">'墨盒'</span>: <span class="number">44</span>, <span class="string">'大骨棒'</span>: <span class="number">45</span>,</span><br><span class="line">         <span class="string">'奶酪'</span>: <span class="number">46</span>, <span class="string">'宠物饲料'</span>: <span class="number">47</span>, <span class="string">'密胺餐具'</span>: <span class="number">48</span>, <span class="string">'小龙虾'</span>: <span class="number">49</span>, <span class="string">'尼龙制品'</span>: <span class="number">50</span>,</span><br><span class="line">         <span class="string">'尿片'</span>: <span class="number">51</span>, <span class="string">'带胶制品'</span>: <span class="number">52</span>, <span class="string">'干果'</span>: <span class="number">53</span>, <span class="string">'广告单'</span>: <span class="number">54</span>, <span class="string">'床上用品'</span>: <span class="number">55</span>,</span><br><span class="line">         <span class="string">'废弃衣服'</span>: <span class="number">56</span>, <span class="string">'废弃针管'</span>: <span class="number">57</span>, <span class="string">'快递纸袋'</span>: <span class="number">58</span>, <span class="string">'手机电池'</span>: <span class="number">59</span>, <span class="string">'打印纸'</span>: <span class="number">60</span>,</span><br><span class="line">         <span class="string">'报纸'</span>: <span class="number">61</span>, <span class="string">'指甲油瓶'</span>: <span class="number">62</span>, <span class="string">'排骨-小肋排'</span>: <span class="number">63</span>, <span class="string">'插座'</span>: <span class="number">64</span>, <span class="string">'数据线'</span>: <span class="number">65</span>,</span><br><span class="line">         <span class="string">'日历'</span>: <span class="number">66</span>, <span class="string">'旧毛巾'</span>: <span class="number">67</span>, <span class="string">'易拉罐'</span>: <span class="number">68</span>, <span class="string">'木制品'</span>: <span class="number">69</span>, <span class="string">'杀虫剂及罐'</span>: <span class="number">70</span>,</span><br><span class="line">         <span class="string">'杂草'</span>: <span class="number">71</span>, <span class="string">'枕头'</span>: <span class="number">72</span>, <span class="string">'枣核'</span>: <span class="number">73</span>, <span class="string">'染发剂壳'</span>: <span class="number">74</span>, <span class="string">'柚子皮'</span>: <span class="number">75</span>,</span><br><span class="line">         <span class="string">'柿子皮'</span>: <span class="number">76</span>, <span class="string">'树叶'</span>: <span class="number">77</span>, <span class="string">'核桃'</span>: <span class="number">78</span>, <span class="string">'桔子皮'</span>: <span class="number">79</span>, <span class="string">'棉签'</span>: <span class="number">80</span>,</span><br><span class="line">         <span class="string">'棉被'</span>: <span class="number">81</span>, <span class="string">'椰子壳'</span>: <span class="number">82</span>, <span class="string">'榴莲壳'</span>: <span class="number">83</span>, <span class="string">'橡皮泥'</span>: <span class="number">84</span>, <span class="string">'毛发'</span>: <span class="number">85</span>,</span><br><span class="line">         <span class="string">'毛绒玩具'</span>: <span class="number">86</span>, <span class="string">'毛豆壳'</span>: <span class="number">87</span>, <span class="string">'水银温度计'</span>: <span class="number">88</span>, <span class="string">'水银血压计'</span>: <span class="number">89</span>, <span class="string">'油漆桶'</span>: <span class="number">90</span>,</span><br><span class="line">         <span class="string">'消毒液瓶'</span>: <span class="number">91</span>, <span class="string">'湿巾'</span>: <span class="number">92</span>, <span class="string">'灯管灯泡'</span>: <span class="number">93</span>, <span class="string">'灰土'</span>: <span class="number">94</span>, <span class="string">'烟头'</span>: <span class="number">95</span>,</span><br><span class="line">         <span class="string">'烟盒'</span>: <span class="number">96</span>, <span class="string">'照片'</span>: <span class="number">97</span>, <span class="string">'牙刷'</span>: <span class="number">98</span>, <span class="string">'牙膏皮'</span>: <span class="number">99</span>, <span class="string">'狗尿布'</span>: <span class="number">100</span>,</span><br><span class="line">         <span class="string">'猫砂'</span>: <span class="number">101</span>, <span class="string">'玉米棒'</span>: <span class="number">102</span>, <span class="string">'玻璃制品'</span>: <span class="number">103</span>, <span class="string">'玻璃杯'</span>: <span class="number">104</span>, <span class="string">'瓜子壳'</span>: <span class="number">105</span>,</span><br><span class="line">         <span class="string">'甘蔗皮'</span>: <span class="number">106</span>, <span class="string">'电线'</span>: <span class="number">107</span>, <span class="string">'电路板'</span>: <span class="number">108</span>, <span class="string">'皮带'</span>: <span class="number">109</span>, <span class="string">'眼影'</span>: <span class="number">110</span>,</span><br><span class="line">         <span class="string">'眼药水瓶'</span>: <span class="number">111</span>, <span class="string">'睫毛膏'</span>: <span class="number">112</span>, <span class="string">'矿泉水瓶'</span>: <span class="number">113</span>, <span class="string">'破碗碟'</span>: <span class="number">114</span>, <span class="string">'硬塑料'</span>: <span class="number">115</span>,</span><br><span class="line">         <span class="string">'碎玻璃片'</span>: <span class="number">116</span>, <span class="string">'窗玻璃'</span>: <span class="number">117</span>, <span class="string">'竹制品'</span>: <span class="number">118</span>, <span class="string">'笔'</span>: <span class="number">119</span>, <span class="string">'篮球'</span>: <span class="number">120</span>,</span><br><span class="line">         <span class="string">'粉底液'</span>: <span class="number">121</span>, <span class="string">'粉扑'</span>: <span class="number">122</span>, <span class="string">'粉笔'</span>: <span class="number">123</span>, <span class="string">'粽子'</span>: <span class="number">124</span>, <span class="string">'糕饼'</span>: <span class="number">125</span>,</span><br><span class="line">         <span class="string">'糖果'</span>: <span class="number">126</span>, <span class="string">'纸巾'</span>: <span class="number">127</span>, <span class="string">'纽扣电池'</span>: <span class="number">128</span>, <span class="string">'绿植'</span>: <span class="number">129</span>, <span class="string">'罐头'</span>: <span class="number">130</span>,</span><br><span class="line">         <span class="string">'罐头盒'</span>: <span class="number">131</span>, <span class="string">'肉干'</span>: <span class="number">132</span>, <span class="string">'肉类'</span>: <span class="number">133</span>, <span class="string">'胶卷'</span>: <span class="number">134</span>, <span class="string">'胶囊'</span>: <span class="number">135</span>,</span><br><span class="line">         <span class="string">'胶带'</span>: <span class="number">136</span>, <span class="string">'节能灯'</span>: <span class="number">137</span>, <span class="string">'芒果皮'</span>: <span class="number">138</span>, <span class="string">'花生壳'</span>: <span class="number">139</span>, <span class="string">'苹果核'</span>: <span class="number">140</span>,</span><br><span class="line">         <span class="string">'苹果皮'</span>: <span class="number">141</span>, <span class="string">'茶叶渣'</span>: <span class="number">142</span>, <span class="string">'荔枝壳'</span>: <span class="number">143</span>, <span class="string">'药品包装'</span>: <span class="number">144</span>, <span class="string">'药片'</span>: <span class="number">145</span>,</span><br><span class="line">         <span class="string">'药瓶'</span>: <span class="number">146</span>, <span class="string">'菌菇类'</span>: <span class="number">147</span>, <span class="string">'菜刀'</span>: <span class="number">148</span>, <span class="string">'菜叶'</span>: <span class="number">149</span>, <span class="string">'菜根'</span>: <span class="number">150</span>,</span><br><span class="line">         <span class="string">'蓄电池'</span>: <span class="number">151</span>, <span class="string">'薯片'</span>: <span class="number">152</span>, <span class="string">'虾'</span>: <span class="number">153</span>, <span class="string">'蛋壳'</span>: <span class="number">154</span>, <span class="string">'蜜饯'</span>: <span class="number">155</span>,</span><br><span class="line">         <span class="string">'螺蛳'</span>: <span class="number">156</span>, <span class="string">'蟹壳'</span>: <span class="number">157</span>, <span class="string">'西瓜子'</span>: <span class="number">158</span>, <span class="string">'西瓜皮'</span>: <span class="number">159</span>, <span class="string">'话梅核'</span>: <span class="number">160</span>,</span><br><span class="line">         <span class="string">'调料'</span>: <span class="number">161</span>, <span class="string">'谷类及加工物'</span>: <span class="number">162</span>, <span class="string">'豆类'</span>: <span class="number">163</span>, <span class="string">'贝类去硬壳'</span>: <span class="number">164</span>, <span class="string">'购物纸袋'</span>: <span class="number">165</span>,</span><br><span class="line">         <span class="string">'足球'</span>: <span class="number">166</span>, <span class="string">'输液管'</span>: <span class="number">167</span>, <span class="string">'酱料'</span>: <span class="number">168</span>, <span class="string">'金属制品'</span>: <span class="number">169</span>, <span class="string">'金属工具'</span>: <span class="number">170</span>,</span><br><span class="line">         <span class="string">'金属瓶罐'</span>: <span class="number">171</span>, <span class="string">'铝制品'</span>: <span class="number">172</span>, <span class="string">'锂电池'</span>: <span class="number">173</span>, <span class="string">'锅'</span>: <span class="number">174</span>, <span class="string">'镍镉电池'</span>: <span class="number">175</span>,</span><br><span class="line">         <span class="string">'镜子'</span>: <span class="number">176</span>, <span class="string">'防碎气泡膜'</span>: <span class="number">177</span>, <span class="string">'陶瓷'</span>: <span class="number">178</span>, <span class="string">'雨伞'</span>: <span class="number">179</span>, <span class="string">'面包'</span>: <span class="number">180</span>,</span><br><span class="line">         <span class="string">'面食'</span>: <span class="number">181</span>, <span class="string">'鞋'</span>: <span class="number">182</span>, <span class="string">'鞋盒'</span>: <span class="number">183</span>, <span class="string">'风干食品'</span>: <span class="number">184</span>, <span class="string">'食品及日用品玻璃瓶罐'</span>: <span class="number">185</span>,</span><br><span class="line">         <span class="string">'食品塑料盒'</span>: <span class="number">186</span>, <span class="string">'食品外包装盒'</span>: <span class="number">187</span>, <span class="string">'食用油桶'</span>: <span class="number">188</span>, <span class="string">'饼干'</span>: <span class="number">189</span>, <span class="string">'香蕉皮'</span>: <span class="number">190</span>,</span><br><span class="line">         <span class="string">'鱼'</span>: <span class="number">191</span>, <span class="string">'鱼骨头'</span>: <span class="number">192</span>, <span class="string">'鱼鳞'</span>: <span class="number">193</span>, <span class="string">'鲜花'</span>: <span class="number">194</span>, <span class="string">'鸡'</span>: <span class="number">195</span>,</span><br><span class="line">         <span class="string">'鸡骨头'</span>: <span class="number">196</span>, <span class="string">'鸭'</span>: <span class="number">197</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getname</span><span class="params">(index)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(names)[index]</span><br></pre></td></tr></table></figure>

<h2 id="Define-get-category-id-function"><a href="#Define-get-category-id-function" class="headerlink" title="Define get_category_id() function"></a>Define <code>get_category_id()</code> function</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'./dataset/resizedFullGarbageDataset/train.json'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    train_labels = json.load(f)</span><br><span class="line">names_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> train_labels[<span class="string">'categories'</span>]:</span><br><span class="line">    names_dict.update(&#123;label[<span class="string">'name'</span>] : label[<span class="string">'id'</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_category_id</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> names_dict[name]</span><br></pre></td></tr></table></figure>

<h2 id="Make-prediction-and-post-process"><a href="#Make-prediction-and-post-process" class="headerlink" title="Make prediction and post process"></a>Make prediction and post process</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results_name = []</span><br><span class="line">results_label = [] <span class="comment"># category_id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(valiset_filenames)):</span><br><span class="line">    image_path = valiset_path + <span class="string">'/'</span> + valiset_filenames[i]</span><br><span class="line">    img = image.load_img(image_path, target_size=(<span class="number">112</span>, <span class="number">112</span>))</span><br><span class="line">    x = image.img_to_array(img)</span><br><span class="line">    x = np.expand_dims(x, axis=<span class="number">0</span>) /<span class="number">255</span></span><br><span class="line"></span><br><span class="line">    pred = model.predict(x)</span><br><span class="line">    </span><br><span class="line">    index = np.argmax(pred)</span><br><span class="line">    result_name = getname(index)</span><br><span class="line">    result_label = get_category_id(result_name)</span><br><span class="line">    </span><br><span class="line">    results_name.append(result_name)</span><br><span class="line">    results_label.append(result_label)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((i+<span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>):</span><br><span class="line">        print(<span class="string">"finished %d predictions"</span>%(i+<span class="number">1</span>)) <span class="comment">#to show the process</span></span><br></pre></td></tr></table></figure>

<h2 id="Observe-random-20-images"><a href="#Observe-random-20-images" class="headerlink" title="Observe random 20 images"></a>Observe random 20 images</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">randNums = random.sample(range(<span class="number">0</span>, len(valiset_filenames)), <span class="number">20</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">18</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">    filename = valiset_filenames[randNums[i]]</span><br><span class="line">    image_path = valiset_path + <span class="string">'/'</span> + filename</span><br><span class="line">    img = image.load_img(image_path, target_size=(<span class="number">112</span>, <span class="number">112</span>))</span><br><span class="line">    x = image.img_to_array(img)</span><br><span class="line">    x = np.expand_dims(x, axis=<span class="number">0</span>) /<span class="number">255</span></span><br><span class="line">    pred = model.predict(x)</span><br><span class="line">    index = np.argmax(pred)</span><br><span class="line">    result_name = getname(index)</span><br><span class="line">    result_label = get_category_id(result_name)</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">4</span>,<span class="number">5</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(x[<span class="number">0</span>])</span><br><span class="line">    plt.title(filename)</span><br><span class="line">    plt.xlabel(<span class="string">"Prediction: %d-%s"</span>%(result_label, result_name))</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/23/87OS7d.png" alt="87OS7d.png"></p>
<h2 id="Save-results"><a href="#Save-results" class="headerlink" title="Save results"></a>Save results</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">resultName = <span class="string">'test0'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./PredictResults/'</span> + resultName + <span class="string">'.csv'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"id,label\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(valiset_filenames)):</span><br><span class="line">        vali_id = str(valiset_filenames[i]).replace(<span class="string">'.jpg'</span>,<span class="string">''</span>)</span><br><span class="line">        f.write(<span class="string">"%s,%s\n"</span>%(vali_id, str(results_label[i])))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关海华AI比赛6</title>
    <url>/2020/03/31/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B6/</url>
    <content><![CDATA[<h1 id="06-1-Observe-hidden-layers"><a href="#06-1-Observe-hidden-layers" class="headerlink" title="06.1.Observe hidden layers"></a>06.1.Observe hidden layers</h1><p>Code by <a href="https://github.com/csy-tvgo" target="_blank" rel="noopener">karbon</a><br>This notebook is a modified version of <code>04.2.MNIST and CNN.ipynb</code> in order to observe the hidden layers.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function, unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="comment"># TensorFlow and tf.keras</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">print(tf.__version__)</span><br></pre></td></tr></table></figure>

<h2 id="Import-MNIST-dataset-and-preprocess-the-dataset"><a href="#Import-MNIST-dataset-and-preprocess-the-dataset" class="headerlink" title="Import MNIST dataset and preprocess the dataset"></a>Import MNIST dataset and preprocess the dataset</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mnist = keras.datasets.mnist</span><br><span class="line"></span><br><span class="line">(train_images, train_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># grayscale image has only 1 channal</span></span><br><span class="line"><span class="keyword">if</span> K.image_data_format() == <span class="string">'channels_first'</span>:</span><br><span class="line">    train_images = train_images.reshape(train_images.shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">    test_images = test_images.reshape(test_images.shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">    input_shape = (<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    train_images = train_images.reshape(train_images.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    test_images = test_images.reshape(test_images.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    input_shape = (<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">train_images_normed = train_images / <span class="number">255.0</span></span><br><span class="line">test_images_normed = test_images / <span class="number">255.0</span></span><br><span class="line">train_labels_onehot = keras.utils.to_categorical(train_labels, <span class="number">10</span>)</span><br><span class="line">test_labels_onehot = keras.utils.to_categorical(test_labels, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Build-the-model-and-train"><a href="#Build-the-model-and-train" class="headerlink" title="Build the model and train"></a>Build the model and train</h2><p>This example is <a href="http://yann.lecun.com/exdb/lenet/" target="_blank" rel="noopener">LeNet-5</a>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = keras.Sequential([</span><br><span class="line">    keras.layers.Conv2D(<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">                 activation=<span class="string">'relu'</span>,</span><br><span class="line">                 input_shape=input_shape),</span><br><span class="line">    keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    keras.layers.Conv2D(<span class="number">16</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    keras.layers.Flatten(),</span><br><span class="line">    keras.layers.Dense(<span class="number">120</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">84</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.compile(loss=keras.losses.categorical_crossentropy,</span><br><span class="line">              optimizer=keras.optimizers.Adam(),</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">model.fit(train_images_normed, train_labels_onehot, batch_size=<span class="number">100</span>, epochs=<span class="number">6</span>)</span><br><span class="line"><span class="comment"># It may need more than one minute</span></span><br></pre></td></tr></table></figure>

<h2 id="Make-prediction-and-observe-the-hidden-layers"><a href="#Make-prediction-and-observe-the-hidden-layers" class="headerlink" title="Make prediction and observe the hidden layers"></a>Make prediction and observe the hidden layers</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = random.randint(<span class="number">0</span>, len(test_images))</span><br><span class="line">inputImg = test_images[num]</span><br><span class="line">inputImg = np.expand_dims(inputImg, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">predictions = model.predict(test_images_normed)</span><br><span class="line"></span><br><span class="line">layer1 = Model(inputs=model.input, outputs=model.get_layer(index=<span class="number">0</span>).output)</span><br><span class="line">layer1_output = layer1.predict(inputImg)</span><br><span class="line">layer2 = Model(inputs=model.input, outputs=model.get_layer(index=<span class="number">1</span>).output)</span><br><span class="line">layer2_output = layer2.predict(inputImg)</span><br><span class="line">layer3 = Model(inputs=model.input, outputs=model.get_layer(index=<span class="number">2</span>).output)</span><br><span class="line">layer3_output = layer3.predict(inputImg)</span><br><span class="line">layer4 = Model(inputs=model.input, outputs=model.get_layer(index=<span class="number">3</span>).output)</span><br><span class="line">layer4_output = layer4.predict(inputImg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">18</span>,<span class="number">18</span>))</span><br><span class="line">plt.subplot(<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">plt.imshow(inputImg[<span class="number">0</span>,:,:,<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    img = layer1_output[<span class="number">0</span>, :, :, i]</span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">6</span>,i+<span class="number">7</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    img = layer2_output[<span class="number">0</span>, :, :, i]</span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">6</span>,i+<span class="number">13</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    img = layer3_output[<span class="number">0</span>, :, :, i]</span><br><span class="line">    plt.subplot(<span class="number">10</span>,<span class="number">8</span>,i+<span class="number">49</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    img = layer4_output[<span class="number">0</span>, :, :, i]</span><br><span class="line">    plt.subplot(<span class="number">10</span>,<span class="number">8</span>,i+<span class="number">65</span>)</span><br><span class="line">    plt.imshow(img)</span><br></pre></td></tr></table></figure>

<p>  <img src="https://s1.ax1x.com/2020/03/31/GKN4aV.png" alt="GKN4aV.png"></p>
<h1 id="06-2-Better-training-methods"><a href="#06-2-Better-training-methods" class="headerlink" title="06.2.Better training methods"></a>06.2.Better training methods</h1><p> <strong><em>Attention!</em></strong> Before running this notebook, you need to run <code>05.1.ReadAnnotationsFromJSON.ipynb</code> before </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function, unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="comment"># TensorFlow and tf.keras</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.callbacks <span class="keyword">import</span> LearningRateScheduler</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">print(tf.__version__)</span><br></pre></td></tr></table></figure>

<h2 id="Import-dataset-and-preprocessing"><a href="#Import-dataset-and-preprocessing" class="headerlink" title="Import dataset and preprocessing"></a>Import dataset and preprocessing</h2><p>Because our dataset is a bit large, RAM may not be enough to directly load all images. We can use <code>flow_from_dataframe</code> to load our dataset. (click <a href="https://keras.io/preprocessing/image/" target="_blank" rel="noopener">here</a> to read more about this function)<br>First, load labels from our <code>.csv</code> file. We use <code>pandas.read_csv</code>, it loads csv file to <code>DataFrame</code> format.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"./dataset/resizedFullGarbageDataset/train.csv"</span>, encoding=<span class="string">'gbk'</span>, dtype=str)</span><br><span class="line">df = df.sample(frac=<span class="number">1</span>).reset_index(drop=<span class="literal">True</span>) <span class="comment"># shuffle the datadrame</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<p> Then, use <code>keras.preprocessing.image.ImageDataGenerator</code> to load trainset.<br>You can add data augumentation settings in this function. Read <a href="https://keras.io/preprocessing/image/" target="_blank" rel="noopener">more about this function</a>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">batch_size = <span class="number">32</span> <span class="comment">#number one time</span></span><br><span class="line">sizeX, sizeY = <span class="number">112</span>, <span class="number">112</span> <span class="comment">#size</span></span><br><span class="line">apply_DataAugumentation = <span class="literal">True</span> <span class="comment">#数据增强 change the picture in different way to increase the database</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> apply_DataAugumentation:</span><br><span class="line">    datagen=ImageDataGenerator(rescale=<span class="number">1.</span>/<span class="number">255</span>, </span><br><span class="line">                               validation_split=<span class="number">0.1</span>,</span><br><span class="line">                               rotation_range=<span class="number">15</span>, <span class="comment">#旋转角度 rotation angle</span></span><br><span class="line">                               width_shift_range=<span class="number">0.2</span>, <span class="comment">#大小 size</span></span><br><span class="line">                               height_shift_range=<span class="number">0.2</span>,</span><br><span class="line">                               horizontal_flip=<span class="literal">True</span>, <span class="comment">#水平镜像 reflection</span></span><br><span class="line">                               vertical_flip=<span class="literal">False</span>, <span class="comment">#垂直镜像</span></span><br><span class="line">                               zoom_range=[<span class="number">0.8</span>, <span class="number">1</span>], <span class="comment">#缩放 zoom</span></span><br><span class="line">                               fill_mode=<span class="string">'reflect'</span></span><br><span class="line">                              )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    datagen=ImageDataGenerator(rescale=<span class="number">1.</span>/<span class="number">255</span>, validation_split=<span class="number">0.1</span>) <span class="comment">#10% is test group</span></span><br><span class="line">                          </span><br><span class="line">                          </span><br><span class="line">trainset = datagen.flow_from_dataframe(dataframe=df, directory=<span class="string">'./dataset/resizedFullGarbageDataset/train_resized'</span>,</span><br><span class="line">                                       x_col=<span class="string">'filename'</span>, y_col=<span class="string">'name'</span>, class_mode=<span class="string">'categorical'</span>, target_size=(sizeX,sizeY),</span><br><span class="line">                                       batch_size=batch_size, shuffle=<span class="literal">True</span>, seed=<span class="number">42</span>, subset=<span class="string">'training'</span>)</span><br><span class="line">testset = datagen.flow_from_dataframe(dataframe=df, directory=<span class="string">'./dataset/resizedFullGarbageDataset/train_resized'</span>,</span><br><span class="line">                                      x_col=<span class="string">'filename'</span>, y_col=<span class="string">'name'</span>, class_mode=<span class="string">'categorical'</span>, target_size=(sizeX,sizeY),</span><br><span class="line">                                      batch_size=batch_size, shuffle=<span class="literal">True</span>, seed=<span class="number">42</span>, subset=<span class="string">'validation'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = trainset.class_indices</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getname</span><span class="params">(index)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(names)[index] <span class="comment">#ues numbers to replace the names of different objects</span></span><br><span class="line"></span><br><span class="line">names</span><br></pre></td></tr></table></figure>

<p> <code>trainset[i]</code> has two parts. <code>trainset[i][0]</code> is the i-th batch of image, while <code>trainset[i][1]</code> is one-hot encodings which represents classes. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">8</span>))</span><br><span class="line">n = <span class="number">123</span> <span class="comment"># index of the batch you want to observe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">4</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(trainset[n][<span class="number">0</span>][i])</span><br><span class="line">    index = np.argmax(trainset[n][<span class="number">1</span>][i])</span><br><span class="line">    plt.xlabel(str(index) + <span class="string">':'</span> + getname(index))</span><br></pre></td></tr></table></figure>

<p>example:</p>
<p><img src="https://s1.ax1x.com/2020/03/31/GKB2MF.png" alt="GKB2MF.png"></p>
<h2 id="Import-a-pre-trained-model-without-prediction-layers-as-feature-extractor"><a href="#Import-a-pre-trained-model-without-prediction-layers-as-feature-extractor" class="headerlink" title="Import a pre-trained model without prediction layers as feature extractor"></a>Import a pre-trained model without prediction layers as feature extractor</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_shape = (sizeX, sizeY, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.applications.inception_v3 <span class="keyword">import</span> InceptionV3  <span class="comment"># use InceptionV3 as example </span></span><br><span class="line"><span class="comment">#we can change the model(from Keras documentation)</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.applications.inception_v3 <span class="keyword">import</span> preprocess_input, decode_predictions <span class="comment">#the function in the model </span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.regularizers <span class="keyword">import</span> l2</span><br><span class="line"></span><br><span class="line">base_model = InceptionV3(weights=<span class="string">'imagenet'</span>, include_top=<span class="literal">False</span>, input_shape=input_shape)</span><br><span class="line"><span class="comment">#the setting is according to the Keras Documentation</span></span><br><span class="line">base_model.summary()</span><br></pre></td></tr></table></figure>

<h2 id="Add-prediction-layers"><a href="#Add-prediction-layers" class="headerlink" title="Add prediction layers"></a>Add prediction layers</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = base_model.output</span><br><span class="line">x = keras.layers.AveragePooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))(x)</span><br><span class="line">x = keras.layers.Dropout(<span class="number">.4</span>)(x)</span><br><span class="line">x = keras.layers.Flatten()(x)</span><br><span class="line">x = keras.layers.Dense(<span class="number">198</span>, kernel_initializer=<span class="string">'glorot_uniform'</span>, kernel_regularizer=l2(<span class="number">.0005</span>), activation=<span class="string">'softmax'</span>)(x)</span><br><span class="line"></span><br><span class="line">model_finetune = Model(inputs=base_model.input, outputs=x)</span><br><span class="line"></span><br><span class="line">model_finetune.summary()</span><br></pre></td></tr></table></figure>

<h2 id="Define-optimizer-and-compile-the-model"><a href="#Define-optimizer-and-compile-the-model" class="headerlink" title="Define optimizer and compile the model"></a>Define optimizer and compile the model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">schedule</span><span class="params">(epoch)</span>:</span>   <span class="comment">#change the length of every step according to the epoch</span></span><br><span class="line">    <span class="keyword">if</span> epoch &lt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">.01</span></span><br><span class="line">    <span class="keyword">elif</span> epoch &lt;= <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">.002</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">.0004</span> <span class="comment">#change the step as the epoch change</span></span><br><span class="line">lr_scheduler = LearningRateScheduler(schedule)</span><br><span class="line"></span><br><span class="line">sgd = keras.optimizers.SGD(lr=<span class="number">.01</span>, momentum=<span class="number">.9</span>)</span><br><span class="line"></span><br><span class="line">model_finetune.compile(loss=keras.losses.categorical_crossentropy,</span><br><span class="line">              optimizer=sgd,</span><br><span class="line">              metrics=[<span class="string">"accuracy"</span>])</span><br></pre></td></tr></table></figure>

<h2 id="Start-learning"><a href="#Start-learning" class="headerlink" title="Start learning"></a>Start learning</h2><p>Because the dataset is large, <em>it may take a <strong>very long</strong> time.</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STEP_SIZE_TRAIN=trainset.n//trainset.batch_size</span><br><span class="line">STEP_SIZE_VALID=testset.n//testset.batch_size</span><br><span class="line">print(STEP_SIZE_TRAIN, STEP_SIZE_VALID)</span><br><span class="line"></span><br><span class="line">model_finetune.fit_generator(generator=trainset,</span><br><span class="line">                    steps_per_epoch=STEP_SIZE_TRAIN,</span><br><span class="line">                    validation_data=testset,</span><br><span class="line">                    validation_steps=STEP_SIZE_VALID,</span><br><span class="line">                    epochs=<span class="number">10</span>, <span class="comment">#this control the times it runs, the more the more accurate,but it have a top value</span></span><br><span class="line">                    callbacks=[lr_scheduler]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="Evaluate-the-model"><a href="#Evaluate-the-model" class="headerlink" title="Evaluate the model"></a>Evaluate the model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_finetune.evaluate_generator(testset,verbose=<span class="number">1</span>) <span class="comment">#add more layer</span></span><br></pre></td></tr></table></figure>

<h2 id="Save-the-trained-model"><a href="#Save-the-trained-model" class="headerlink" title="Save the trained model"></a>Save the trained model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">modelname = <span class="string">'finetuneExample0-9964'</span> </span><br><span class="line">model_finetune.save(<span class="string">'./trainedModels/'</span> + modelname + <span class="string">'.h5'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关海华AI比赛thought</title>
    <url>/2020/04/18/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9Bthought/</url>
    <content><![CDATA[<h1 id="海华AI比赛感受-Haihua-AI-garbage-classification-competition"><a href="#海华AI比赛感受-Haihua-AI-garbage-classification-competition" class="headerlink" title="海华AI比赛感受 Haihua AI garbage classification competition"></a>海华AI比赛感受 Haihua AI garbage classification competition</h1><p>看到垃圾分类这个标题时我就决定要参加这个比赛。我之前也参加过类似的项目课题研究，只是并不专业，更注重社科题材的研究。那时我请教老师，老师说用机器学习构建神经网络然后图像识别进行垃圾分类其实是个很简单的事情。于是我变很好奇到底是怎么做到的。</p>
<p>What was it? I decided to take part in Haihua Al rubbish classification competition when I saw the title ‘rubbish classification’, which is to use computer classify the rubbish. After all, computer science is the major I have chosen. At that time, I asked my teacher for some advice, and he said that it was actually just using the machine learning to build neural networks and then use image recognition to classify garbage. Then, I truly became curious about how it could be done.</p>
<p>参加比赛前，我们进行了学习。老师从如何预测简单的商店营业额一直教到图像处理，看似无关的知识点之间环环相扣，最终实现了创建模型，识别图片并垃圾分类。刚学完时，我都不敢相信课程已经结束了，原来创建模型真的不是一件难事。安装配备tensorflow等包（也可以尝试其他环境），导入数据和图片，用图片信息进行编号，分成训练集和测试集，合理运用Keras官网上准确度较高的模型，训练自己的模型，最终运行模型获得预测数据，整过程便结束了。</p>
<p>My group learnt some relevant knowledge before we took part in the competition, being taught from how to predict the turnover of a store by plotting graph to how to do image processing, from simple to difficult. Seemingly irrelevant knowledge points were interlinked, such as which PS skills can be realized by using the image processing codes, and finally the model, which was suitable for the competition, was created and images were recognized and rubbish classification was realized. When I finished, I couldn’t believe the course was over, because there were too many things for me to learn that the time really flew. It turned out that it wasn’t so hard to create models. Installing packages such as tensorflow (you can also try other environments), importing data and pictures, numbering them with picture information …… and finally running the model to obtain the prediction data, the whole process is over.</p>
<p>别看只写了两三行字，这中间可是用了几周的时间，训练模型确实是件苦差事。从开始二三十遍为一循环，到十次一循环，到最后一次一循环，准确度始终在99.7徘徊，却始终没有更好的成绩，确实是一件令人着急的事。还有上学的缘故，家里电脑硬件不足，我还学会了远程操控电脑。其中还有不少困难：电脑硬件出现问题，电脑无法连接，硬盘内存满了要换一个盘，环境未匹配上，下载官网模型时间过长通过其他办法下载……虽然有困难，但我们都一一解决了。这也有助于我对这一块知识的了解，比如在学习编程之前，我可以说是对电脑一无所知，只会上网。而现在，不论是编程语言的更加熟练，还是对电脑的更加熟悉，都有助于我将来的学习，毕竟这是我选定的专业方向。当然，经历了这么多，我也逐渐能做到做事时能不像以前那么着急，不能图快，一件一件慢慢处理才能达到最高的效率。</p>
<p>Despite writing only two or three lines of codes, it took weeks to train the model. From the beginning with 20 or 30 times for a cycle of training, to 10 times a cycle, to at last once a cycle, the accuracy was always hovering in 99.7 percent. But that there is no more better accuracy is really a matter of urgency. Also because of school schedule and the insufficient home computer hardware, I also learned to operate the computer remotely, which can save my time on the way. Meanwhile, there were also many difficulties, such as computer hardware problems, Internet connection difficulties, the hard disk memory is full, the environment is not matched, and so on. Although there were difficulties, we solved them one by one which added to my deeper understanding of the programme. For instance, before learning programming, I can say that I knew nothing about computers, except the Internet. Now,being more proficient in the programming language and more familiar with the computer can absolutely help me in my future studies. By taking part in this competition I learn a lot of important skills such as time management and working in a methodical and reflective way.</p>
<p>曾经，我觉得这是一个多么遥远的专业，因为不了解，所以觉得简直是不可能的事情。但如今回头再看，其实没有我想的那么难。学习就是这样，是一个上升的阶梯，从下往上看时感觉遥不可及，但当不知不觉爬上去后往下看，似乎也没那么遥远。</p>
<p>In the past, I thought learning this programme would be beyond my capabilities because I was not familiar with it and it felt impossible for me to understand. However, looking back now, it was not as hard as I thought. Learning is just like this, a ladder: when I get from the bottom to the top, I feel it far away; when unwittingly climbing up and looking down, it seems not so far away.</p>
]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>粗读逻辑学</title>
    <url>/2020/07/12/%E7%B2%97%E8%AF%BB%E9%80%BB%E8%BE%91%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="逻辑学"><a href="#逻辑学" class="headerlink" title="逻辑学"></a>逻辑学</h1><h2 id="0-什么是逻辑？"><a href="#0-什么是逻辑？" class="headerlink" title="0.什么是逻辑？"></a>0.什么是逻辑？</h2><p>​    概念<br>​    模型<br>​    判断<br>​        已知——&gt;未知：推理<br>​        (概念-命题-论证)—&gt;逻辑</p>
<h2 id="1-逻辑：已知-gt-未知"><a href="#1-逻辑：已知-gt-未知" class="headerlink" title="1.逻辑：已知-&gt;未知"></a>1.逻辑：已知-&gt;未知</h2><h3 id="1-演绎逻辑：大范围找小范围（必然有效）–机器思维"><a href="#1-演绎逻辑：大范围找小范围（必然有效）–机器思维" class="headerlink" title="1)演绎逻辑：大范围找小范围（必然有效）–机器思维"></a>1)演绎逻辑：大范围找小范围（必然有效）–机器思维</h3><p> <strong>经典逻辑学（亚里士多德：必然得出），形式逻辑</strong><br> <strong>形式：增加确定性:计算出结果</strong><br>    <strong>人类：类比</strong><br>    <strong>形式：公式得出——科技</strong></p>
<p>AEIO（基本命题）<br>三段论（形式逻辑，词项逻辑）</p>
<p><a href="https://imgchr.com/i/NsRWFS" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/26/NsRWFS.th.jpg" alt="NsRWFS.th.jpg"></a>        </p>
<p>三段式：一个一般性的原则（大前提），一个附属于前面大前提的特殊化陈述（小前提），以及由此引申出的特殊化陈述符合一般性原则的结论。</p>
<p>​    三段论推理：思维时，大脑首先用一个人为定义的内容极为明确的、囊括的范围比较大的总的原则A（简称“大前提”），再通过科学实验寻找另外一个概念小前提B，B的概念的全部内涵能够一定被包含在大前提A内、并且用文字描述的B的概念的内容时，不能人为与大前提A的内容本质完全一样（B简称小前提），然后按照小前提B如果属于大前提A范围内，那么B的性质一定与大前提的性质一样，而得到可靠而正确的判断，此思维过程叫做正确的下结论C过程——科学术语叫做“三段论推理”。</p>
<p>e.g.<br>    生物包括所有的动物和不吃肉的动物等等<br>    动物都属于生物<br>    只有一部分动物吃肉<br>    老虎属于吃肉动物（最小的的圈）<br>    “得出”老虎属于生物</p>
<p>复合命题（包括连接词）<br>            而且（and）两者同真为真<br>            或者（or）两者有一为真即为真<br>            ……</p>
<p><a href="https://imgchr.com/i/NsWOBt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/26/NsWOBt.th.jpg" alt="NsWOBt.th.jpg"></a></p>
<h3 id="2）非形式逻辑，合情推理，或然性–人类思维"><a href="#2）非形式逻辑，合情推理，或然性–人类思维" class="headerlink" title="2）非形式逻辑，合情推理，或然性–人类思维"></a>2）非形式逻辑，合情推理，或然性–人类思维</h3><h4 id="①归纳逻辑：小范围找大范围（强度）"><a href="#①归纳逻辑：小范围找大范围（强度）" class="headerlink" title="①归纳逻辑：小范围找大范围（强度）"></a>①归纳逻辑：小范围找大范围（强度）</h4><p>A(已婚）-&gt;B-&gt;C（未婚）   是否有一个已婚人士盯着未婚人士？<br>    A.是<br>    B.不是<br>    C.不确定</p>
<p> 人的正常思维：C（直觉）；           计算机思维：A（演绎全部可能性） </p>
<p>​    处理有限经验可能性（关键变量）<br>​    对“特殊对象”有限观察，整理出“性质”，归纳推理出事务“类型”</p>
<p><a href="https://imgchr.com/i/NsWz4S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/26/NsWz4S.th.jpg" alt="NsWz4S.th.jpg"></a></p>
<p>​    密尔五法之三：<br>​        求同法：两者同时发生(不知因果)<br>​        求异法：控制变量，找不同（无法找全所有变量）<br>​        共变法：定量（统计）<br>​            总体-样本-可统计变量-参数<br>​    相关性（函数）-因果关系<br>​        随机对照测试（增加样本数）<br>​    归纳-对象-因果关系-统计-庞大数据-变量-推理-从过去到未来（观测手段有局限性）</p>
<p><a href="https://imgchr.com/i/NsfKgJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/26/NsfKgJ.th.jpg" alt="NsfKgJ.th.jpg"></a></p>
<p>e.g.烟与肺癌</p>
<p><a href="https://imgchr.com/i/Nsf3Hx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/26/Nsf3Hx.th.jpg" alt="Nsf3Hx.th.jpg"></a></p>
<p>如果单看1960年前的数据，无法判断烟与肺癌的关系；但在呼吁人们减少吸烟后，肺癌减少可以证明。</p>
<p>​    科学&amp;神学<br>​        科学：将已于处理的结构嵌入人的经验的手段更高明（更易被实证证明，更有效）</p>
<h4 id="②类比逻辑：相似范围类比（可接受度）（认知语言学）老-新，心理内容-物理实体"><a href="#②类比逻辑：相似范围类比（可接受度）（认知语言学）老-新，心理内容-物理实体" class="headerlink" title="②类比逻辑：相似范围类比（可接受度）（认知语言学）老-新，心理内容-物理实体"></a>②类比逻辑：相似范围类比（可接受度）（认知语言学）老-新，心理内容-物理实体</h4><p>​    e.g.逝者如斯夫<br>​    属性类比（形容词）<br>​    关系类比（动词，介词）<br>​    结构类比（名词）</p>
<p><a href="https://imgchr.com/i/NsfyUf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/26/NsfyUf.th.jpg" alt="NsfyUf.th.jpg"></a>    </p>
<p>原型Prototype：高效认知，限制想象力<br>        语言链-拓展（原型范畴论）<br>            家庭类比社会</p>
<p><a href="https://imgchr.com/i/Nsf28g" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/26/Nsf28g.th.jpg" alt="Nsf28g.th.jpg"></a></p>
<p>​        推己及人<br>​            认为别人对我们的评价=我们对别人的评价的翻版<br>​    马克思·韦伯：我们都是悬挂在自己意义之网上的动物<br>​        被牢笼束缚<br>​        避无可避-&gt;扩大牢笼</p>
<h2 id="2-谬误"><a href="#2-谬误" class="headerlink" title="2.谬误"></a>2.谬误</h2><p>​    前提谬误<br>​    支持谬误<br>​    相干谬误</p>
<h2 id="3-逻辑与口才"><a href="#3-逻辑与口才" class="headerlink" title="3.逻辑与口才"></a>3.逻辑与口才</h2>]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>-reading seminar</tag>
      </tags>
  </entry>
</search>
