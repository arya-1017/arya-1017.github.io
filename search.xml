<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown语法介绍</title>
    <url>/2019/11/23/Markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="4-Markdown语法介绍"><a href="#4-Markdown语法介绍" class="headerlink" title="4.Markdown语法介绍"></a>4.Markdown语法介绍</h1><p>在前面的课程中，我们已经成功搭建了我们的blog，并将它放到了github通过域名进行访问，今天我们来学习一下如何用Markdown来写文章。</p>
<p>首先简要介绍一下什么是Markdown：</p>
<ul>
<li><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>
</li>
<li><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p>
</li>
<li><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p>
</li>
<li><p>Markdown 编写的文档后缀为 <code>.md</code>,  <code>.markdown</code>。</p>
</li>
</ul>
<h3 id="1-Markdown标题"><a href="#1-Markdown标题" class="headerlink" title="1.Markdown标题"></a>1.Markdown标题</h3><p>我们使用<code>#</code>号来标记我们的标题,一共有六级标题,分别对应1到6个<code>#</code>号,如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<p>对应显示效果如下</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191108202908903.png" alt="image-20191108202908903"></p>
<h3 id="2、Markdown段落"><a href="#2、Markdown段落" class="headerlink" title="2、Markdown段落"></a>2、Markdown段落</h3><h4 id="（1）字体"><a href="#（1）字体" class="headerlink" title="（1）字体"></a>（1）字体</h4><p>Markdown支持显示以下几种字体</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure>

<p>对应显示效果如下：</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191108203410562.png" alt="image-20191108203410562"></p>
<h4 id="（2）分隔线"><a href="#（2）分隔线" class="headerlink" title="（2）分隔线"></a>（2）分隔线</h4><p>我们使用三个以上减号来建立分隔线</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">------ 分隔线</span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191108203745695.png" alt="image-20191108203745695"></p>
<h4 id="（3）删除线"><a href="#（3）删除线" class="headerlink" title="（3）删除线"></a>（3）删除线</h4><p>删除线只需要在文字两端加上双波浪线即可~~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~HELLO~~</span><br></pre></td></tr></table></figure>

<p>显示效果如下<br><del>HELLO</del></p>
<h4 id="（4）下划线"><a href="#（4）下划线" class="headerlink" title="（4）下划线"></a>（4）下划线</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<p><u>下划线</u></p>
<h3 id="3、Markdown列表"><a href="#3、Markdown列表" class="headerlink" title="3、Markdown列表"></a>3、Markdown列表</h3><p>列表分为有序列表和无序列表</p>
<h4 id="1、无序列表如下所示（注意后面加一个空格）"><a href="#1、无序列表如下所示（注意后面加一个空格）" class="headerlink" title="1、无序列表如下所示（注意后面加一个空格）"></a>1、无序列表如下所示（注意后面加一个空格）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<h4 id="2、有序列表如下所示（注意后面加一个空格）"><a href="#2、有序列表如下所示（注意后面加一个空格）" class="headerlink" title="2、有序列表如下所示（注意后面加一个空格）"></a>2、有序列表如下所示（注意后面加一个空格）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h4 id="3、列表嵌套用法"><a href="#3、列表嵌套用法" class="headerlink" title="3、列表嵌套用法"></a>3、列表嵌套用法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<h3 id="4、Markdown引用"><a href="#4、Markdown引用" class="headerlink" title="4、Markdown引用"></a>4、Markdown引用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 引用的一段话，这里演示用。</span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<blockquote>
<p>引用的一段话，这里演示用。</p>
</blockquote>
<h3 id="5、Markdown代码"><a href="#5、Markdown代码" class="headerlink" title="5、Markdown代码"></a>5、Markdown代码</h3><h4 id="（1）、代码"><a href="#（1）、代码" class="headerlink" title="（1）、代码"></a>（1）、代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;printf()&#96;</span><br></pre></td></tr></table></figure>

<p>显示效果如下<br><code>printf()</code></p>
<h4 id="（2）、代码段"><a href="#（2）、代码段" class="headerlink" title="（2）、代码段"></a>（2）、代码段</h4><p>输入如下：</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191108210014315.png" alt="image-20191108210014315"></p>
<p>显示效果如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、Markdown链接"><a href="#6、Markdown链接" class="headerlink" title="6、Markdown链接"></a>6、Markdown链接</h3><p>如下所示输入超链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[百度](https:&#x2F;&#x2F;www.baidu.com)</span><br></pre></td></tr></table></figure>

<p>显示效果如下（可点击跳转百度）<br><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></p>
<h3 id="7、Markdown表格"><a href="#7、Markdown表格" class="headerlink" title="7、Markdown表格"></a>7、Markdown表格</h3><p>实例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>

<p>显示效果如下：</p>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<h3 id="8、Markdown图片"><a href="#8、Markdown图片" class="headerlink" title="8、Markdown图片"></a>8、Markdown图片</h3><p>插入图片我们需要先上传到图床网站获取链接，然后再插入图片链接，具体操作如下：</p>
<ol>
<li><p>我们首先打开网站<a href="https://imgchr.com/" target="_blank" rel="noopener">https://imgchr.com/</a></p>
</li>
<li><p>点击开始上传，上传一张我们想要的图</p>
</li>
<li><p>上传好了我们找到下面Markdown Code并复制<br><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191108211045231.png" alt="image-20191108211045231"></p>
</li>
<li><p>将复制的链接粘贴过来</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[![MZ53S1.md.jpg](https:&#x2F;&#x2F;s2.ax1x.com&#x2F;2019&#x2F;11&#x2F;08&#x2F;MZ53S1.md.jpg)](https:&#x2F;&#x2F;imgchr.com&#x2F;i&#x2F;MZ53S1)</span><br></pre></td></tr></table></figure>

<p>显示成功如下</p>
<p><a href="https://imgchr.com/i/MZ53S1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/08/MZ53S1.md.jpg" alt="MZ53S1.md.jpg"></a> </p>
<p>这是一些基本的用法,学会了这些我们就可以写一些基本的文章来记录自己的日常啦<del>~</del></p>
]]></content>
      <categories>
        <category>Testing</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习2</title>
    <url>/2020/05/03/Python-%E5%AD%A6%E4%B9%A02/</url>
    <content><![CDATA[<h1 id="Python-if，while-for循环"><a href="#Python-if，while-for循环" class="headerlink" title="Python-if，while, for循环"></a>Python-if，while, for循环</h1><h2 id="key-points"><a href="#key-points" class="headerlink" title="key points"></a>key points</h2><h3 id="if语句，及if语句套用"><a href="#if语句，及if语句套用" class="headerlink" title="if语句，及if语句套用"></a>if语句，及if语句套用</h3><ol>
<li>if…else</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=input()  <span class="comment">#显示输入框，name=输入内容 show the inputbox，name=input #input 函数</span></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">'Mary'</span>:               <span class="comment">#if 语句</span></span><br><span class="line">    print(<span class="string">'Hello Mary'</span>)</span><br><span class="line">    password=input()</span><br><span class="line">    <span class="keyword">if</span> password == <span class="string">'swordfish'</span>:</span><br><span class="line">        print(<span class="string">'Access granted.'</span>)</span><br><span class="line">    <span class="keyword">else</span>:                        <span class="comment">#if...else语句           </span></span><br><span class="line">        print(<span class="string">'Wrong password.'</span>)</span><br></pre></td></tr></table></figure>

<p>该代码可判断用户名及密码是否与设定值相符</p>
<p>check the user‘s name and password</p>
<ol start="2">
<li>if…elif</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=input()</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">'Alice'</span>:</span><br><span class="line">    print(<span class="string">'Hi,Alice.'</span>)  </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'What is your age?'</span>)</span><br><span class="line">    age=input()</span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="string">'12'</span>:</span><br><span class="line">        print(<span class="string">'You are not Alice, kiddo.'</span>)</span><br><span class="line">    <span class="keyword">elif</span> age &gt; <span class="string">'100'</span>:</span><br><span class="line">        print(<span class="string">'You are not Alice,grannie.'</span>)</span><br><span class="line">    <span class="keyword">elif</span> age &gt; <span class="string">'2000'</span>:</span><br><span class="line">        print(<span class="string">'Unlike you, Alice is not an undead, immortal vampire.'</span>)</span><br></pre></td></tr></table></figure>

<p>该代码通过判断年龄确定身份</p>
<p>check the user through age</p>
<h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> spam &lt; <span class="number">5</span>:</span><br><span class="line">    print(<span class="string">'Hello world!'</span>)</span><br><span class="line">    spam = spam+<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>output：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello world!</span><br><span class="line">Hello world!</span><br><span class="line">Hello world!</span><br><span class="line">Hello world!</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure>

<h4 id="‘break’-and-‘continue’"><a href="#‘break’-and-‘continue’" class="headerlink" title="‘break’ and ‘continue’"></a>‘break’ and ‘continue’</h4><p>break:</p>
<p>When the break is executed, the loop ends.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'Hello world'</span>)</span><br><span class="line">    <span class="keyword">if</span> spam==<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    spam=spam+<span class="number">1</span></span><br><span class="line">print(spam)</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"><span class="comment">#3</span></span><br></pre></td></tr></table></figure>

<p>continue:</p>
<p>When continue is executed, the loop starts again.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> spam&lt;<span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'Hello!'</span>)</span><br><span class="line">    spam=spam+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> spam==<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(<span class="string">'Hello world'</span>)</span><br><span class="line">    print(<span class="string">' '</span>)</span><br><span class="line">print(spam)</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#Hello!</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#Hello!  during this time, spam=3, so it didn't print 'Hello world'.</span></span><br><span class="line"><span class="comment">#Hello!</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"><span class="comment">#4</span></span><br></pre></td></tr></table></figure>



<h3 id="while-if"><a href="#while-if" class="headerlink" title="while+if"></a>while+if</h3><p>输入密码 input the password</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key=input() </span><br><span class="line">spam=<span class="number">0</span> <span class="comment">#record the times tried, make sure no more than 3 times 不超过三次</span></span><br><span class="line"><span class="keyword">if</span> int(key)==<span class="number">12345</span>:</span><br><span class="line">        print(<span class="string">'Pass'</span>)</span><br><span class="line"><span class="keyword">while</span> spam &lt; <span class="number">2</span> <span class="keyword">and</span> int(key)!=<span class="number">12345</span>:</span><br><span class="line">            print(<span class="string">'Try again'</span>)</span><br><span class="line">            key=input()</span><br><span class="line">            spam=spam+<span class="number">1</span>  <span class="comment">#计次 record thetimes</span></span><br><span class="line"><span class="keyword">if</span> int(key)==<span class="number">12345</span> <span class="keyword">and</span> spam!=<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Pass'</span>)</span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;1</span><br><span class="line">Try again</span><br><span class="line">&gt;12</span><br><span class="line">Try again</span><br><span class="line">&gt;12345</span><br><span class="line">Pass</span><br></pre></td></tr></table></figure>

<p>another way：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key=input()</span><br><span class="line"><span class="keyword">if</span> key==<span class="string">'12345'</span>:</span><br><span class="line">    print(<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'try again'</span>)</span><br><span class="line">    key=input()</span><br><span class="line">    <span class="keyword">if</span> key==<span class="string">'12345'</span>:</span><br><span class="line">        print(<span class="string">'pass'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'try again'</span>)</span><br><span class="line">        key=input()</span><br><span class="line">        <span class="keyword">if</span> key==<span class="string">'12345'</span>:</span><br><span class="line">            print(<span class="string">'pass'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">12</span>,<span class="number">16</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>12到16的所有整数</p>
<p>print all integers in 12 to 16</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>): <span class="comment">#the 2 here means the step is 2</span></span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment">#out：0 2 4 6 8</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">-1</span>,<span class="number">-1</span>): </span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment">#output：5 4 3 2 1 0</span></span><br></pre></td></tr></table></figure>



<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><h3 id="a-tricky-game："><a href="#a-tricky-game：" class="headerlink" title="a tricky game："></a>a tricky game：</h3><p>You must input ‘your name’ instead of the real name:</p>
<p>你要输入 ”your name” 而不是真的名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'Please type your name.'</span>)</span><br><span class="line">yourname=input()</span><br><span class="line"><span class="keyword">while</span>  yourname!=<span class="string">'your name'</span>:</span><br><span class="line">    print(<span class="string">'Please type your name.'</span>)</span><br><span class="line">    yourname=input()</span><br><span class="line"><span class="keyword">if</span> yourname==<span class="string">'your name'</span>:</span><br><span class="line">    print(<span class="string">'Thank you!'</span>)</span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Please type your name.</span><br><span class="line">Alice</span><br><span class="line">Please type your name.</span><br><span class="line">Emma</span><br><span class="line">Please type your name.</span><br><span class="line">your name</span><br><span class="line">Thank you!</span><br></pre></td></tr></table></figure>

<p>another way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'Please type your name.'</span>)</span><br><span class="line">    name=input()</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'your name'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">'Thank you!'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="make-patterns"><a href="#make-patterns" class="headerlink" title="make patterns!"></a>make patterns!</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">6</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'*'</span>*a) <span class="comment">#'*'is the string while * is 'x', multiply</span></span><br><span class="line">    a=a<span class="number">-1</span> <span class="comment">#the number of a is decreasing</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment">#if there is no more '*', it ends</span></span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">******</span><br><span class="line">*****</span><br><span class="line">****</span><br><span class="line">***</span><br><span class="line">**</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'*'</span>*a) </span><br><span class="line">    a=a+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">6</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'*'</span>*a)</span><br><span class="line">    a=a<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line">******</span><br><span class="line">*****</span><br><span class="line">****</span><br><span class="line">***</span><br><span class="line">**</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

<p>another way</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    print(<span class="string">'*'</span>*a)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">    print(<span class="string">'*'</span>*a)</span><br></pre></td></tr></table></figure>

<h3 id="calculation-of-factorial"><a href="#calculation-of-factorial" class="headerlink" title="calculation of factorial"></a>calculation of factorial</h3><p>阶乘计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result=<span class="number">1</span></span><br><span class="line">a=int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,a+<span class="number">1</span>):</span><br><span class="line">    result=result*i</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<p>input=9</p>
<p>output=362880</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习1</title>
    <url>/2020/07/07/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<h1 id="C语言笔记1"><a href="#C语言笔记1" class="headerlink" title="C语言笔记1"></a>C语言笔记1</h1><h2 id="第一课-First-Class"><a href="#第一课-First-Class" class="headerlink" title="第一课 First Class"></a>第一课 First Class</h2><p>C is a language that faces processes.</p>
<p>It can recognize capital or not.</p>
<p>1.Install Dev-C++ (we can also use vs code)</p>
<p>2.Show page like this:</p>
<p><img src="https://s1.ax1x.com/2020/07/07/UA3EAs.png" alt="UA3EAs.png"></p>
<p>*‘Include’ is a word that has been definited, we can’t use it as variable again.</p>
<p>*Content after ‘include’ is the stock of C</p>
<p><em>Inside ‘/\</em> */‘ is the annotation(注释).</p>
<p>*Another way to show annotation is after ‘//‘</p>
<p><em>The difference between ‘/\</em> */‘ and ‘//‘ :  ‘/* */‘ can include paragraphs, but ‘//‘ can only include one line.</p>
<p>The blue one means the annotation.</p>
<p><img src="https://s1.ax1x.com/2020/07/07/UAGlk9.png" alt="UAGlk9.png"></p>
<p>*‘Main’ is the entre of the function and inside the ‘ { } ’ is the body of the function. There is only one main function at anywhere.</p>
<p>*After every sentence, we should add ‘；’</p>
<p>3.Then we can write some simple code and click the compile(the red circle one) to check whether there is a grammatic error:</p>
<p><img src="https://s1.ax1x.com/2020/07/07/UAYFx0.png" alt="UAYFx0.png"></p>
<p>*’Printf’ means to print/show the content inside the (). It won’t change to a new line unless ‘\n’ is added.</p>
<p>*Content in “ “ are considered as string, and printed out.</p>
<p>*’\n’ means to change to another line.</p>
<ol start="4">
<li><p>After clicking compile: if there is an error, it will show you where it is; if there isn’t an error, it will create an exe file in the same file as the c file.</p>
<p>We can also use the exe file to excute the code.</p>
</li>
</ol>
<ol start="5">
<li>If there is nothing wrong we can click the button next to compile(on the right), the ‘run’ button. cmd will appear and the content after printf will be shown.</li>
</ol>
<ol start="6">
<li><p><img src="https://s1.ax1x.com/2020/07/07/UA0o9g.png" alt="UA0o9g.png"></p>
<p>“%d” means the integer(s) behind the ‘，’ will be at the postion of “%d” when excuting.</p>
<p>We need to identify the variables first and give them values. Then calculating,and ouput.</p>
<p><img src="https://s1.ax1x.com/2020/07/07/UADoOs.jpg" alt="UADoOs.jpg"></p>
</li>
</ol>
<ol start="7">
<li>“scanf()” input values</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;a,&amp;b); <span class="comment">//input numbers are separated by ','</span></span><br></pre></td></tr></table></figure>

<p>add “”in””string:</p>
<p>example： “Please input “yes””</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input \"yes\"\n"</span>);</span><br></pre></td></tr></table></figure>

<p>function in function:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>(a,b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(intx,inty)</span> <span class="comment">//int means input is integer; if there is no requirement, use "void"</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> z;</span><br><span class="line"><span class="keyword">if</span>(x&gt;y) z=x;</span><br><span class="line"><span class="keyword">else</span> z=y;</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8.characters that can be used:</p>
<blockquote>
<p>abcde… …z</p>
</blockquote>
<blockquote>
<p>ABCDE… …Z</p>
</blockquote>
<blockquote>
<p>0~9</p>
</blockquote>
<blockquote>
<p>+-*/=,.:;?“ ‘~|&amp;^!%#(){}[]&lt;&gt; (space) (tab) </p>
</blockquote>
<p>保留字(words that have been identified): (32)</p>
<p>type：int, long, float, … …</p>
<p>sentences: if…else, while, for, … …</p>
<p>store: auto, static,… …</p>
<p>calculation: sizeof</p>
<p><img src="https://s1.ax1x.com/2020/07/07/UAor6I.jpg" alt="UAor6I.jpg"></p>
<p>*put int in char, it will show the character through ASCII</p>
<p>*put char in int, it will show the value of ASCII</p>
<p>*if the integer is positive, it is stored as true form; if it is negative, it is stored as  complement form.</p>
<p>*initialization:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">5</span>;</span><br><span class="line">in b=<span class="number">10</span>,c=<span class="number">10</span>,d=<span class="number">10</span>; <span class="comment">//not b=c=d=10</span></span><br></pre></td></tr></table></figure>





<p>home exercise：guess number（simple form）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n=<span class="number">10</span>,g;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"guess a number from 0 to 100.\n"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;g);</span><br><span class="line">	<span class="keyword">while</span>(g!=n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (g&gt;n) <span class="built_in">printf</span>(<span class="string">"It is too large!\n"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"It is too small!\n"</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;g);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"You are right!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>out：</p>
<p>guess a number from 0 to 100.<br>50<br>It is too large!<br>25<br>It is too large!<br>12<br>It is too large!<br>6<br>It is too small!<br>8<br>It is too small!<br>9<br>It is too small!<br>10<br>You are right!</p>
<hr>
<p>Process exited after 20.56 seconds with return value 0</p>
<h2 id="第二课-Second-class"><a href="#第二课-Second-class" class="headerlink" title="第二课 Second class"></a>第二课 Second class</h2><p>1.’ ‘内加字符，” “加输入输出</p>
<p>2.int * i –&gt;*指针</p>
<p>3.a=b: = 赋值 assignin </p>
<p>4.初始化赋值 initialization：int a=0;</p>
<p>5.sizeof ：看字节数</p>
<p>6.输出输入（输入格式以scanf后引号内为准，&amp;：取地址）</p>
<p>e.g. the input values a b are divided by “,”</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>

<p>7.测试testing standard：正确数据 correct one，临界值 the boundary，错误数据 wrong one</p>
<p>const：定义常量 constant，不可改值 can’t be change，一般大写常量capital，在内存里有空间exist in memory</p>
<p>#define：用途同const，在内存内无空间 doesn’t exist in memory</p>
<p>8.</p>
<table>
<thead>
<tr>
<th><strong>类型名称</strong></th>
<th><strong>类型说明符</strong></th>
<th><strong>字节数</strong></th>
<th><strong>数值范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>基本整型</strong></td>
<td><strong>int</strong></td>
<td><strong>2</strong></td>
<td><strong>-32768~32767</strong></td>
</tr>
<tr>
<td><strong>短整型</strong></td>
<td><strong>short</strong> [int]</td>
<td><strong>2</strong></td>
<td><strong>-32768~32767</strong></td>
</tr>
<tr>
<td><strong>长整型</strong></td>
<td><strong>long</strong> [int]</td>
<td><strong>4</strong></td>
<td><strong>-2147483648~ 2147483647</strong></td>
</tr>
<tr>
<td><strong>无符号基本整型</strong></td>
<td><strong>unsigned</strong> [int]</td>
<td><strong>2</strong></td>
<td><strong>0~65535</strong></td>
</tr>
<tr>
<td><strong>无符号短整型</strong></td>
<td><strong>unsigned short</strong> [int]</td>
<td><strong>2</strong></td>
<td><strong>0~65535</strong></td>
</tr>
<tr>
<td><strong>无符号长整型</strong></td>
<td><strong>unsigned long</strong> [int]</td>
<td><strong>4</strong></td>
<td><strong>0~4294967295</strong></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>运算符</th>
<th>运算规则</th>
<th>操作数数目</th>
<th>优先级</th>
<th>结合方向</th>
</tr>
</thead>
<tbody><tr>
<td>－</td>
<td>负号</td>
<td>单目</td>
<td>2</td>
<td>右结合</td>
</tr>
<tr>
<td>＋</td>
<td>加法</td>
<td>双目</td>
<td>4</td>
<td>左结合</td>
</tr>
<tr>
<td>－</td>
<td>减法</td>
<td>双目</td>
<td>4</td>
<td>左结合</td>
</tr>
<tr>
<td>＊</td>
<td>乘法</td>
<td>双目</td>
<td>3</td>
<td>左结合</td>
</tr>
<tr>
<td>／</td>
<td>除法</td>
<td>双目</td>
<td>3</td>
<td>左结合</td>
</tr>
<tr>
<td>％</td>
<td>求余或模</td>
<td>双目</td>
<td>3</td>
<td>左结合</td>
</tr>
</tbody></table>
<p>同级：左集合，从左往右：d=3*5/4</p>
<p>d=a=3：优先级先右后左</p>
<p>整数相除没有余数，截取整数：1/3+1/3+1/3=0</p>
<p>浮点数正常计算</p>
<p>10/3<em>3=10,10.0/3\</em>3=10.0</p>
<p>9.自增自减：</p>
<p>x=10,y=++x,y=11</p>
<p>x=10,y=x++,y=10,x=11</p>
<p>i=6</p>
<p>++i=7,i=7</p>
<p>i++=7,i=8</p>
<p>a=–i,a=7,i=7</p>
<p>b=i–,b=7,i=6</p>
<p>-i++=-6,i=7</p>
<p>10.强制转换：(int)(x+y)    (有损失some value will be lost)</p>
<p>11.关系运算（1/0表示真假）</p>
<p>5&gt;(4&lt;5) 可以运行4&lt;5值为1（真），5&gt;1</p>
<p>==比=优先级高</p>
<p><strong>1、圆括号【（）】、下标运算符【[]】、分量运算符的指向结构体成员运算符【-&gt;】、结构体成员运算符【.】；</strong></p>
<p><strong>2、逻辑非运算符【!】、按位取反运算符【~】、自增自减运算符【++】【 –】、负号运算符【-】、类型转换运算符【(类型)】、指针运算符和取地址运算符【<em>】【&amp;】、长度运算符【sizeof】；</em></strong></p>
<p><strong><em>3、乘法运算符【</em>】、除法运算符【/】、取余运算符【%】；</strong></p>
<p><strong>4、加法运算符【+】、减法运算符【-】；</strong></p>
<p><strong>5、左移动运算符【&lt;&lt;】、右移动运算符【&gt;&gt;】；</strong></p>
<p><strong>6、关系运算符【&lt; 】【&gt;】【&lt;=】【 &gt;= 】；</strong></p>
<p><strong>7、等于运算符【==】、不等于运算符【!=】；</strong></p>
<p><strong>8、按位与运算符【&amp;】；</strong></p>
<p><strong>9、按位异或运算符【^】；</strong></p>
<p><strong>10、按位或运算符【|】；</strong></p>
<p><strong>11、逻辑与运算符【&amp;&amp;】；</strong></p>
<p><strong>12、逻辑或运算符【||】；</strong></p>
<p><strong>13、条件运算符【?:】；</strong></p>
<p><strong>14、赋值运算符【=】【/=】【*=】【%=】【+=】【-=】【&lt;&lt;=】【&gt;&gt;=】【&amp;=】【^=】【|=】；</strong></p>
<p><strong>15、逗号运算符【,】。</strong></p>
<p>逻辑运算：0&lt;x&lt;5  变为  x&gt;0&amp;&amp;x&lt;5, &amp;&amp;为且</p>
<p>非：！（非0取反为0,0取反为1），与：&amp;&amp;，或：||</p>
<p>当计算一边值可确定真假时，另一边不会计算</p>
<p>表达式1 ？ 表达式2 ：表达式3  =  if 表达式1  表达式2  else 表达式3  （可嵌套）</p>
<p>运算符：=</p>
<p>复合运算(从右往左）：+=，-=，*=，/=，%=   (a+=b—a=a+b)</p>
<p>，表达式</p>
<p>全部计算，最后一个表达式为整个式子的值</p>
<p>e.g. n=a=5+3,a+10,a*8</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>CTB参赛过程</title>
    <url>/2020/03/21/CTB%E5%8F%82%E8%B5%9B%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="参赛CTB-China-Thinks-Big-competition"><a href="#参赛CTB-China-Thinks-Big-competition" class="headerlink" title="参赛CTB  China Thinks Big competition"></a>参赛CTB  China Thinks Big competition</h1><p>It is a competion that encourage to do some research to solve some present problems.</p>
<p>During this competition, I use python to analyse the data.</p>
<hr>
<h2 id="Our-title"><a href="#Our-title" class="headerlink" title="Our title:"></a>Our title:</h2><p><strong>–如何通过装置革新实现高精度垃圾分类及培养公民垃圾分类意识</strong> </p>
<p><strong>–How to achieve high precision garbage classification and cultivate citizen garbage classification consciousness through device innovation</strong></p>
<hr>
<h2 id="What-we-are-going-to-do"><a href="#What-we-are-going-to-do" class="headerlink" title="What we are going to do?"></a>What we are going to do?</h2><p>before the competition:</p>
<p><strong>Q:你打算研究什么社会问题（研究问题）？请详细描述该社会话题或现象，并说明为什么这个问题很重要？</strong></p>
<p><strong>A:</strong></p>
<p>垃圾分类效果不理想。垃圾分类可以在很大程度上可以节约资源，同时通过分类回收处理节约了垃圾处理的成本，在国家节约资源的基本国策中占较大比重。然而现在垃圾分类的效果并不理想，仍然有大量的垃圾被以落后且高成本的方式进行处理。</p>
<p>在社区范围内居民垃圾分类意识薄弱，家庭方面，所有的垃圾统一用所有的垃圾袋装载并丢弃，垃圾袋内垃圾混杂，即使分类也没有意义。而垃圾桶也存在巨大问题，标出可回收不可回收的垃圾桶有时内部就是一个整体，垃圾站将所收的垃圾混在一起，说明政府的对垃圾分类不重视，以及在监督方面的不重视。这些都是亟待解决的问题。</p>
<p><strong>Q:你觉得这个社会问题是由哪些原因造成的？该研究问题可能的答案是什么（你的研究假设是什么）？</strong></p>
<p><strong>A:</strong></p>
<p>（教育宣传），装置落后</p>
<p>宣传方式不高效，没有严厉的法律措施来执行。没有足够先进的机器去监督人们自主的执行垃圾分类。尽管近年来我国国民素质有了大幅提高，但整体水平相对落后，公民的环境意识相对淡薄，无法从根本上形成自觉进行垃圾分类的意识。缺乏科学有效的垃圾分类的运行体系。<br>研究问题可能的答案：利用一些先进的技术和机器强制人们进行垃圾分类，促使人们养成垃圾分类的习惯。利用自动分类垃圾的系统使一些不知道如何垃圾分类的人也可以进行垃圾分类。还可以通过发放传单或者一些关于垃圾分类小知识的小册子来拓展垃圾分类的知识让更多的人知道如何使垃圾分类以及如何使用我们设计的便于垃圾分类的设备。</p>
<p><strong>Q:你会通过哪些方式证实这些原因是否成立或者哪些原因更主要（如何验证你的假设）？请简述你们会采用的研究方法。</strong></p>
<p><strong>A:</strong></p>
<p>试点对比</p>
<p>1.在小区里进行试点调查，设置对比试验，控制变量进行调查。<br>2.对使用过样品的人群进行采访，对数据进行分析，研究发现原因是否成立或者哪些原因更主要，在进行改进，之后再实验。不断改进后对结果进行对比，发现最适合执行的方案。<br>3.询问垃圾分类站的专家，分析样品是否适合大规模生产及放置，及对成本问题以及实用性进行研究<br>4.联系厂家，确保厂家能够精准的分别即将产生的垃圾<br>5.对样品进行大量实验，使垃圾能够被正确分类，样品减少错误</p>
<p><strong>你觉得可以采取哪些方法来改善这个社会问题和现象？请具体描述计划采取的行动，及预计最终成果形式和衡量项目成功的标准。</strong></p>
<p><strong>A:</strong></p>
<p>装置的改进，加强宣传，培养意识，奖励机制</p>
<p>用科技，宣传等辅助性手段逐步培养公民的环保意识。</p>
<p>首先，我们设计了一个辅助性的分类系统，垃圾桶是由4+1个垃圾桶组成，垃圾桶盖正常处于关闭状态，垃圾的包装上有可识别的的二维码记录了垃圾类型，系统里有识别装置可以识别垃圾类型并且打开相应的垃圾桶，当垃圾被投入后内部传感器会自动感应并关闭垃圾桶。如果识别不出会打开第五个备用垃圾桶。我们以这个装置为主题，并配合教育宣传和奖励机制的建立，通过辅助系统来配合公民垃圾分类意识的养成。</p>
<hr>
<h2 id="研究报告-research-report"><a href="#研究报告-research-report" class="headerlink" title="研究报告:  (research report)"></a>研究报告:  (research report)</h2><p>​          <strong>“继农业革命、工业革命、计算机革命之后，影响人类生存发展的又一次浪潮，将是世纪之交要出现的垃圾革命。”–美国著名的未来学家托夫勒《第三次浪潮》</strong> </p>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a><strong>摘要</strong></h3><p><strong>社会问题：</strong>垃圾分类效果不理想。即使获得社会重视，民众日常生活中意识 淡薄，对垃圾种类了解不全，没有养成垃圾分类的习惯，垃圾桶设施不完备等问题依然存在。 </p>
<p><strong>意义：</strong>将新时代的科技创新与当前社会较为关注的热点问题结合，以求缓解在环境、资源上的危机。同时，垃圾分类的逐有成效，也减少了对垃圾场劳动力的需求。垃圾分类可以减少垃圾占地、减少污染、变废为宝、减少危害。 </p>
<p><strong>研究问题：</strong>利用科技创新手段促进垃圾分类，减少垃圾的错误分类，以及培养民众垃圾分类意识。 </p>
<p><strong>假设：</strong>使用特质垃圾桶自动辅助垃圾分类，同时普及民众的垃圾分类知识。 </p>
<p><strong>主要结论：</strong>利用在商品袋上粘贴二维码识别垃圾的想法可行性不高，直接图像采集识别取得初步成功。</p>
<h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a><strong>Abstract</strong></h3><p><strong>Social problems:</strong> garbage classification is not efficient. Even if social attention is paid, people’s awareness of daily life is still weak. They do not fully understand the types of garbage, and they do not form the habit of garbage classification. And the garbage bin facilities are not complete and other problems still exist. </p>
<p><strong>Significance:</strong> combine the scientific and technological innovation of the new era with the hot issues concerned by the current society in order to alleviate the crisis in environment and resources. At the same time, the more and more effective waste separation also reduce the need for landfill labor.Garbage classification can reduce waste land, reduce pollution, and reduce harm. </p>
<p><strong>Research questions:</strong> using scientific and technological innovation means to promote garbage classification to reduce the wrong classification of garbage, and cultivate the public awareness of garbage classification. </p>
<p><strong>Hypothesis:</strong> use idiosyncratic garbage bins to automatically assist garbage classification and popularize garbage classification knowledge among the public. </p>
<p><strong>Conclusion:</strong> the idea of using two-dimensional code pasted on commodity bags to identify garbage is not feasible, and direct image acquisition and recognition has achieved initial success. </p>
<p><img src="https://s1.ax1x.com/2020/03/21/8WZ4aQ.png" alt="8WZ4aQ.png"></p>
<h3 id="主题介绍"><a href="#主题介绍" class="headerlink" title="主题介绍"></a>主题介绍</h3><p><strong>•定义社会问题</strong> </p>
<p>垃圾分类如今存在较大的问题。与一些国家不同的是，中国发展时间较短， 没有早早意识到垃圾分类的重要性, 民众的垃圾分类意识不强，也没有相关的知识储备，也没有形成习惯。这会导致资源的浪费，以及对环境造成破坏。如若解决该问题，有以下优点： </p>
<p>一、减少垃圾占地 </p>
<p>生活垃圾中有些物质不易降解，使土地受到严重侵蚀。垃圾分类，去掉可以 回收的、不易降解的物质，减少垃圾数量达 60%以上。 </p>
<p>二、减少污染 </p>
<p>目前我国的垃圾处理多采用卫生填埋甚至简易填埋的方式，占用上万亩土 地；虫蝇乱飞，污水四溢，臭气熏天，严重污染环境；废弃的电池含有金属汞、镉等有毒的物质，会对人类产生严重的危害；土壤中的废塑料会导致农作物减产。 </p>
<p>三、变废为宝 </p>
<p>据统计，中国每年使用塑料快餐盒达 40 亿个，方便面碗 5<del>7 亿个，一次性筷子数十亿双，这些占生活垃圾的 8</del>15%。生活垃圾中有 30%~40%可以回收利用， 各种固体废弃物混合在一起是垃圾，分选开就是资源。 </p>
<p>四、减少危害 </p>
<p>抛弃的废塑料被动物误食，导致动物死亡的事故时有发生。因此回收利用还可以减少危害。 </p>
<p>笔者将对问题的解决方案，定在使用科技的手段改善垃圾分类错误的问题，及用科技在投放垃圾时对民众进行教育宣传上。由于该项目对科技依赖程度较大，大部分的具体活动都为对技术的改进及创新。为达成目标，两种对垃圾桶的改造双线并行。 </p>
<p><strong>•细化研究问题</strong> </p>
<p>该研究项目将社科问题与科技相结合，关注了社会当前面临的一个热点话题，且也与新时代科技创新的重点相契合，更是考虑到利用科技不是长久之计， 唯有培养民众垃圾分类的素养，才能保证这一问题得到解决。研究问题主要针对如何解决当代中国民众垃圾分类意识不成熟，缺少垃圾分类知识的状况进行研究。目标明确，具体。 </p>
<p><strong>•论点/假设</strong> </p>
<p><strong>针对在垃圾分类上产生的问题，笔者进行了如下假设：</strong> </p>
<p>1.完全使用机器代替人工分类。经研究发现，该想法存在许多问题，如成本过高，垃圾种类较多不易完全记录数据，不易识别，错误率较高，且该方案难度 较大。因此只将该想法作为研究基础。 </p>
<p>2.在使用机器分类的同时进行科普教育。实现全民在日常生活中垃圾分类， 需要时间的过度，需要机器的辅助。 而选用机器作为过度的辅助，可以辅助现阶段的垃圾分类，提高垃圾分类效率，缓解问题。笔者认为通过垃圾分类装置的革新可以使人们逐渐加深垃圾分类的想法及增加垃圾分类的知识，形成习惯，进而促进垃圾分类的完善。 </p>
<h3 id="研究分析"><a href="#研究分析" class="headerlink" title="研究分析"></a><strong>研究分析</strong></h3><p><strong>理论介绍及文献整理</strong> </p>
<p><strong>“去年工业固体废物产生量为 19.1 亿吨，生活垃圾产生量约为 1.8 亿吨，后者处置率达 97.3％。面对生活垃圾逐年增加的趋势，垃圾处理将持续遇到压力。垃圾围城，令人担忧。”–中国环保部《2016 年全国大、中城市固体废物污染环境防治年报》</strong> </p>
<p><strong>2016 年 12 月 21 日下午，习近平总书记主持召开了中央财经领导小组第十四次会议，研究“十三五”规划纲要确定的 165 项重大工程项目进展和解决好人民群众普遍关心的突出问题等工作。“普遍推行垃圾分类制度，关系 13 亿多人生活环境改善，关系垃圾能不能减量化、资源化、无害化处理。”–习近平</strong> </p>
<p><strong>“4 月 26 日，住房和城乡建设部、国家发展和改革委员会、生态环境部等部门联合印发《关于在全国地级及以上城市全面开展生活垃圾分类工作的通知》（建城〔2019〕56 号）文件发出后，并未引起大范围的舆论关注。直至 6 月，在上海即将开始垃圾分类的影响下，舆论对于垃圾分类的相关信息日益关注。6月 28 日，‘人民网’发表文章《住建部：46 城 2020 年底前基本建成垃圾分类处理系统》，引爆舆论，‘全国 46 个重点城市试行垃圾分类’一事正式进入公众视野。”–《全国 46 个重点城市试行垃圾分类舆情分析报告》</strong> </p>
<p>垃圾分类日益严重，也已经引起人们的广泛关注。 </p>
<p>本项目核心内容为利用更加智能和先进的垃圾分类装置辅助人们养成垃圾 分类意识。笔者希望通过自主设计的智能垃圾桶从而逐步培养公民垃圾分类的意识，一 旦公民们养成这种习惯，公民将会自主的将垃圾丢入不同颜色的桶中。久而久之，人们不再需要使用智能的垃圾桶来帮助分类垃圾。  </p>
<p><strong>关于该内容有学者指出“2000 年 6 月，北京、上海、南京、杭州、桂林、广州、深圳、厦门 8 个城市率先开启了垃圾分类收集试点，实践表明垃圾分类要取得好效果既需要政府的强力推动，更需要每个家庭的认真参与。长期以来，居民参与社区治理活动的热情和动力不足，已经成为制约城市治理发展的重要瓶颈。没有“共建共治”，哪里有“共享”，垃圾分类作为全民参与的活动，能够成为破解共建共治共享难题的一个“引爆点”。“引爆点”最早源自心理学中的“破窗效应”。该理论认为环境中不好的现象如果被放任不管，会诱使人们效仿，甚至变本加厉。比如，一条人行道有少许纸屑，如果不打扫，就会出现更多的垃圾，最终人们将会理所当然地将垃圾顺手丢弃在地上。“破窗效应”作为一种有规律可循的心理现象，只要能够正确应用，可以把坏的事情转化为好的事情。以“关键点”为突破口，通过以点带面，促使整个事件发生连锁反应，朝着越来越好的方向发展。”–（中国经济时报 赵晨）</strong> </p>
<p>垃圾桶的设置不够完善也是一个影响因素： </p>
<p>许多垃圾桶带有盖子，所以人们不愿意去一个一个打开盖子，逐类将垃圾投入不同的垃圾桶中。而我们的智能垃圾桶自动识别开盖，正好解决了这一问题，不但帮助了人们对于不同种类垃圾的理解，也方便了人们扔垃圾。 因此，在此理论中本小队的智能垃圾分类装置将起到引爆点的作用，该装置 使用图像识别技术，能识别出垃圾种类并从数据库中找出对应垃圾的所属种类并 实现自动开启与关闭，在实际应用中可以为人们带来方便： </p>
<p><strong>“目前市面上销售的带盖垃圾箱，开盖时均需采用手动或脚踩方式实现，这种开盖方式主要的缺点是既不卫生又不方便。市场上也有部分智能垃圾箱出售，但开发及使用的程度并不高，主要以自动感应翻盖为主，而且不能主动对垃圾进行分类、没有垃圾满箱提示等智能化功能。”–（辽阳科技学院，辽宁 沈阳 ）</strong> </p>
<p>因此笔者所设计的智能垃圾桶更加人性化，考虑到人们使用垃圾桶时的实际困难。笔者相信垃圾分类的中心还是在人身上，一切的设备，以及宣传等最终都是为了让人们养成垃圾分类的习惯： </p>
<p><strong>“从回收可循环利用垃圾的角度出发，促使大家将可循环垃圾投入智能分类垃圾桶，从而形成“垃圾入桶”的意外和习惯，习惯一旦养成，人们手头无论有什么垃圾就会扔入垃圾箱，将垃圾投人垃圾箱将不再对人们是一种约束，而是一种乐趣和习惯。”–（天津师范大学软件学院，天津）</strong> </p>
<p>但是，对于智能垃圾分类，社会上也有一些反对的言论。 </p>
<p>智能垃圾桶只告诉人们这是什么种类的垃圾，却并未指出为何要垃圾分类。居民并没有意识到垃圾分类的重要性，所以即使知道自己的垃圾是什么种类的，也由于懒惰不愿将垃圾分类投放。 </p>
<p><strong>“切身利益是指居民的个人利益与眼前利益。 居民有分类意向，认为垃圾分类是有必要的，这通常是通过媒体了解到垃圾分类的社会效益。但是对居民本身而言，他们没有感受到利益相关性，所以在行为上缺少动力。 这方面的因素可归于个体的“经济人”理性。 如果居民严格执行垃圾分类政策，减少垃圾量，降低污染，节约资源，其正外部效应产出所承担的成本（如时间、金钱）并不会得到相应的回报（如减免垃圾费），存在社会收益与个人收益之间的偏离。 如果居民不执行垃圾分类政策，虽然对环境产生负外部效应，但自身付出成本也较少，且不会因环境污染而受到惩罚，这样也会造成社会成本与个人成本之间的偏离。在双向激励驱动下，经济人理性选择驱使部分居民放弃执行垃圾分类政策。”–《城市生活垃圾分类处理问题探究——基于上海市社区的个案调研》</strong> </p>
<p>智能垃圾桶的普及造价极高，不能大规模放置，导致只能在小范围试点，这会导致只有一部分居民知道如何垃圾分类，而他们看到试点以外的居民并不分 类，从而产生从众心理，对智能垃圾桶视而不见。 </p>
<p><strong>“阿里巴巴的负责人曹启明指出：目前全产业链前后端还没有完全打通，垃圾分类的基础设施还不完善，分类标准不统一，去向模糊，区域配套产业链建设还需进一步加强。”–《垃圾分类期待完整“闭环”》</strong> </p>
<p>垃圾分类工作并未市场化、体系化。垃圾分类处理并不应该是完全由政府承担的公益性工作，必须让垃圾分类处理工作符合市场化改革潮流，形成垃圾分类处理产业链，发展环保企业。 </p>
<p>总而言之，智能垃圾分类有优点亦有缺点。智能垃圾分类使市民投放垃圾的过程更加人性化，同时也保护了环境。但是，智能垃圾桶并未指出为何要垃圾分类，因此对人们没有起到足够的影响；而且智能垃圾桶的普及造价极高，不能大规模放置。这些都是笔者在研究过程中需要考虑的问题。</p>
<h3 id="个人垃圾分类现状调查"><a href="#个人垃圾分类现状调查" class="headerlink" title="个人垃圾分类现状调查"></a><strong>个人垃圾分类现状调查</strong></h3><h4 id="Here-I-use-another-case-I-compeleted-to-show-how-to-analyse-the-data"><a href="#Here-I-use-another-case-I-compeleted-to-show-how-to-analyse-the-data" class="headerlink" title="Here I use another case I compeleted to show how to analyse the data."></a>Here I use another case I compeleted to show how to analyse the data.</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment">#import pandas</span></span><br><span class="line">data=pd.read_csv(<span class="string">r'C:\Users\Administrator\Desktop\表格.csv'</span>) <span class="comment">#read the data</span></span><br><span class="line">data.columns</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#broken line graph:</span></span><br><span class="line">data.plot() </span><br><span class="line">colors1 = <span class="string">'#6D6D6D'</span>  <span class="comment">#设置标题颜色为灰色 make the title gray</span></span><br><span class="line">plt.title(<span class="string">'(title)'</span>,color = colors1,fontsize = <span class="number">40</span>,fontproperties=zhfont1)</span><br><span class="line">plt.xlabel(<span class="string">'Question'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'(name)'</span>,fontproperties=zhfont1)<span class="comment">#change to Chinese</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/23/8TL8b9.png" alt="8TL8b9.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bar graph:</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">sns.set()</span><br><span class="line">%matplotlib inline</span><br><span class="line">a=[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>]</span><br><span class="line">print(a)</span><br><span class="line">b=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">61</span>,<span class="number">90</span>]</span><br><span class="line">plt.bar(a,height=b,align=<span class="string">'center'</span>)</span><br><span class="line">zhfont1 = matplotlib.font_manager.FontProperties(fname=<span class="string">'C:\Windows\Fonts\simsun.ttc'</span>)</span><br><span class="line">plt.title(<span class="string">'个人更偏爱网络上的娱乐还是现实生活中的娱乐？'</span>,fontproperties=zhfont1)</span><br><span class="line">plt.xlabel(<span class="string">'紧张度'</span>,fontproperties=zhfont1)</span><br><span class="line">plt.ylabel(<span class="string">'人数'</span>,fontproperties=zhfont1)</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/23/8TLvMF.png" alt="8TLvMF.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pie graph:</span></span><br><span class="line">labels = [<span class="string">'A.3小时以内'</span>, <span class="string">'B.3至5小时'</span>, <span class="string">'C.5至7小时'</span>, <span class="string">'D.7小时以上'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置分裂属性</span></span><br><span class="line">explode = [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分裂饼图</span></span><br><span class="line">plt.pie(a, explode = explode,</span><br><span class="line">        labels = labels, autopct = <span class="string">'%3.1f%%'</span>,</span><br><span class="line">        startangle = <span class="number">180</span>, shadow = <span class="literal">True</span>,</span><br><span class="line">        colors = [<span class="string">'c'</span>, <span class="string">'r'</span>, <span class="string">'gray'</span>, <span class="string">'g'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标题</span></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line">plt.title(<span class="string">'每周花费在娱乐活动上的时间是多少?'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>![[<img src="https://s2.ax1x.com/2020/02/06/1yYMFA.png" alt="1yYMFA.png">]</p>
<h4 id="The-formal-one"><a href="#The-formal-one" class="headerlink" title="The formal one"></a>The formal one</h4><p>在设计一个适用于当今社会垃圾分类现状的设备前，对人们的情况进行了解是必不可少的，这能保证研究并不是无用功，并且能明确指出合理的研究方向，不会偏离主题。为明确方向，笔者进行了如下问卷调查。 </p>
<p>第 1 题 </p>
<p>你平时垃圾分类吗 [单选题] </p>
<p>第一个问题是关于人们平时是否有意识的进行垃圾分类。从当前数据看来， 接近半数的人们偶尔进行垃圾分类，三分之一的人们经常进行垃圾分类。虽然只有极少数的人每次都进行垃圾分类，但是不进行垃圾分类的人也是极少的。 这 说明人们基本上已经有了一个要进行垃圾分类的意识，但大部分的人们缺少一定的行动力。大部分的人们已经意识到了垃圾分类需要被实施，但还没有意识到垃圾分类的重要性，认为垃圾分类是一个可有可无的事情，并没有很好的重视这个问题。 </p>
<p><img src="https://s1.ax1x.com/2020/03/21/8WeiM6.png" alt="8WeiM6.png"></p>
<p><img src="https://s1.ax1x.com/2020/03/21/8WeFsK.png" alt="8WeFsK.png"></p>
<p>第 2 题 </p>
<p>你在垃圾分类时遇到那些困难 [单选题] </p>
<p>本题分为两个部分：经常/偶尔进行垃圾分类的人，从不进行垃圾分类的人。 </p>
<p>其中两者有较大区别：有过垃圾分类的人们中，根据调查数据显示，有将近一般的人不清除垃圾的种类。这说明有意识而没有做到垃圾分类的人们是因为并不是太了解如何进行垃圾分类从而导致无法垃圾分类，最后直接忽视了垃圾分类的问题。通过合理的 普及垃圾分类的知识，让更多的人了解、学习垃圾分类，养成垃圾分类的习惯。还有三分之一的人表示还有一部分的垃圾桶没有分类的标示从而无法进行垃圾分类。这是部分垃圾桶设施存在一些问题，是可以进行改进的一个方向。 </p>
<p><img src="https://s1.ax1x.com/2020/03/21/8Weyo4.png" alt="8Weyo4.png"></p>
<p>而在不进行垃圾分类的人当中，因为懒得去或者是没有时间进行垃圾分类的人的比例明显提高。现在的人们生活工作的节奏很快，基本没有时间腾出来去9了解学习并且有效的进行垃圾分类。所以可以通过智能垃圾分类的方法从而让一 些没有时间，或是不了解如何垃圾分类的人来正确的进行垃圾。 </p>
<p><img src="https://s1.ax1x.com/2020/03/21/8WeTTe.png" alt="8WeTTe.png"></p>
<p>这一题的结果说明大部分人是有垃圾分类意识的，没有这个意识的人仅占少部分，并且这少部分的问题也仅仅是某些可以借助特殊手段克服的个人问题。而大部分没有完全做到垃圾分类的人也有两个共性：一是个人垃圾分类知识储备不 够，二是垃圾桶设施问题。这两个问题将作为笔者主要克服的对象进行设计。 </p>
<p>第 3 题 </p>
<p>你如何垃圾分类的？ [多选题] </p>
<p>第三个问题是关于人们通过何种方式进行垃圾分类：在外将饮料瓶扔入可回收垃圾桶、在家分类打包、提醒他人垃圾分类，这是一个垃圾分类逐渐深入的顺 序。结果出现这样的下滑情况是情理之中的，也是我们需要努力去改善，让人们逐渐形成垃圾分类习惯的一个步骤。据调查数据显示，百分之八十的人都能很好的将饮料品投入可回收垃圾桶，一半的人都能做到将家中的垃圾进行分类打包， 这说明还有一部分的人进行垃圾分类时，只局限于将饮料瓶、餐巾纸之类的，可 以容易进行分类的垃圾进行分类，认为这就是所谓的垃圾分类，没有很深层次的理解到垃圾分类，仅仅是做到了垃圾分类的浅浅一层而没有进行深入。 </p>
<p><a href="https://imgchr.com/i/8WeXlt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/21/8WeXlt.png" alt="8WeXlt.png"></a></p>
<p><img src="https://s1.ax1x.com/2020/03/21/8Wezm8.png" alt="8Wezm8.png"></p>
<p>第 4 题 </p>
<p>你垃圾分类受到什么影响 [多选题] </p>
<p>第四个问题是关于人们进行垃圾分类具体是受到了什么的影响。数据显示社区宣传、学校工作单位宣传、网络宣传对人们造成的影响都差不多。这说明人们能通过各种渠道来进行了解垃圾分类。所以网上宣传、社区宣传、学校公司宣传 都是很好的选择。 另外根据调查显示，大部分的人们有良好的个人环保意识，都能记住并进行垃圾分类。所以只要宣传得到位，宣传得具体，大部分的人们还是能好好地养成垃圾分类的习惯。对此，笔者专门设计了既可以自动垃圾分类，又可以对人们进行垃圾分类知识的科普的设备。 </p>
<p><a href="https://imgchr.com/i/8Wm311" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/21/8Wm311.png" alt="8Wm311.png"></a></p>
<p>第 5 题 </p>
<p>你认为如何促进垃圾分类比较有效 [多选题]</p>
<p>第五个问题主要调查了人们认为如何促进垃圾分类比较有效。了解这一点有助于笔者实行最有效的方法促进垃圾分类。其中教育宣传和法律强制要求占比重比较大。这说明大多数人们觉得教育宣传是很有必要的，加强教育宣传可以很好的促进垃圾分类知识的传播。还说明有的时候强制性措施也是一种比较好的选择，除了通过法律的强制性措施，还可以通过智能垃圾分类的方法有效的分类。除此之 外，调查中奖励机制和受到他人的影响这两个方面占得比重也不小，都有百分之 四十左右。这说明，奖励机制和他人影响也是不容忽视的两个方面，可以通过适当的奖励来促使人们惊醒垃圾分类。 </p>
<p><a href="https://imgchr.com/i/8WmB9A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/21/8WmB9A.png" alt="8WmB9A.png"></a></p>
<p>第 6 题 </p>
<p>是否愿意通过装置进行垃圾分类的辅助及就行教育 [单选题] </p>
<p>第六个问题是询问人们是否愿意进行垃圾分类的辅助及就行教育。 </p>
<p><strong>“我们研发了智能分类垃圾箱，该产品能够对垃圾智能分类，提升垃圾的回收率，减少对环境污染，同时，该产品还可利用互联网采集数据，通过数据收集，计算出各区域消费者人群消费档次及消费倾向，并把该数据卖给商品供应商，供应商即可根据该数据将对应区域消费者群体所需求的商品及时销售给消费人群，省却中间时间与金钱的消耗，提供给人们更加便利的生活，迎合数据时代的需求。”–（辽阳科技学院，辽宁 沈阳）</strong> </p>
<p>这说明智能垃圾分类是存在巨大研究价值的。想要实行设备投入使用最大的问题就是人们是否配合。询问这个问题主要想 探究笔者设计的设备是否能获得人们的支持从而得到推广。数据表明绝大多数的 人都愿意配合，只有极少部分的人不同意。说明人们是愿意配合实施垃圾分类，并且有想要学习垃圾分类的意识的。这说明笔者的假设是具有可行性的，可以被大部分的人使用。</p>
<p><a href="https://imgchr.com/i/8WmcB8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/21/8WmcB8.png" alt="8WmcB8.png"></a></p>
<p><a href="https://imgchr.com/i/8WmcB8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/21/8WmcB8.png" alt="8WmcB8.png"></a></p>
<p>第 7 题 </p>
<p>你认为在装置辅助教育一段时间，撤除装置后，你是否能保持垃圾分类意识 [单选题] </p>
<p>在笔者的假设中，绝对靠科技手段进行垃圾分类是不可靠的，设备也可能出现许多问题且需要人进行维护。所以垃圾分类最后的终点必然是要靠人们自己分类，养成这样的习惯。笔者认为，设备终有被撤除的一天。而撤除设备后如果人们分类情况又回到之前的状态，这相当于白白浪费了这些时间和金钱。因此，了解人们是否能从这些设备中获益十分重要。根据调查显示，绝大多数的人都表示能在教育一段时间，辅助装置撤除后，保持垃圾分类的意识合理地进行垃圾分类。所以辅助装置能很好地帮助人们养成垃圾分类的习惯，从而是垃圾在没有辅助装置的情况下也能很好的进行分类。</p>
<p><a href="https://imgchr.com/i/8WnMb8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/21/8WnMb8.png" alt="8WnMb8.png"></a></p>
<p><strong>总结</strong> </p>
<p>在本阶段，我们对垃圾分类中所存在的问题进行了进一步的调查和分析，同时通过查阅国内外文献并设计调查问卷了解人们日常垃圾分类的情况，小组成员整理了针对对垃圾分类不同的观点和态度。目前，垃圾分类所面临的最大问题是 不知道垃圾所属的种类。因此，我们坚定了通过设计智能垃圾桶来起到教育和意识养成的辅助作用的想法。回顾我们的研究过程，我们采取问卷调查的方式设计逻辑跳转分别对已经进 行垃圾分类和尚未进行垃圾分类的人群进行不同方面的调查，一定程度上了解到目前垃圾分类在实际操作上的不便之处并分享了已经进行垃圾分类的人的经验 并以此作为推广垃圾分类的参考。然而在调查问卷的投放中我们主要面对的对象是我们的同学，并不能充分地代表广大群众，我们将在接下来的过程中继续通过问卷进行调查且扩大调查范围，并在条件允许的情况下针对有代表性的个体进行 单独访谈调查。而且随着研究的进一步推进我们将把我们重点转移到智能垃圾桶的制作，我们已经完成图像识别垃圾桶的软件及硬件设计，在实践阶段，我们会将智能垃圾桶的数据库以及模型的实验。</p>
<p><strong>引用文献：</strong> </p>
<p><strong>美国 托夫勒:</strong></p>
<p>《第三次浪潮》</p>
<p><strong>中国环保部:</strong></p>
<p>《2016 年全国大、中城市固体废物污染环境防治年报》</p>
<p><strong>习近平:</strong></p>
<p>2016 年 12 月 21 日下午 总书记中央财经领导小组第十四次会议</p>
<p>《全国 46 个重点城市试行垃圾分类舆情分析报告》</p>
<p><strong>赵晨 中国经济时报</strong> </p>
<p><strong>辽阳科技学院，辽宁 沈阳</strong> </p>
<p><strong>天津师范大学软件学院，天津</strong>: </p>
<p>《城市生活垃圾分类处理问题探究——基于上海市社区的个案调研》</p>
<p>《垃圾分类期待完整“闭环”》</p>
<hr>
<h2 id="实践报告-practice-report"><a href="#实践报告-practice-report" class="headerlink" title="实践报告(practice report)"></a><strong>实践报告(practice report)</strong></h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a><strong>第一部分</strong></h3><p>在此阶段，我们对之前的研究假设和猜想进行了实践取证，同时对我们的实物产品，智能垃圾桶进行了测试以及数据库的充实。我们此次实践的核心是完成了智能垃圾分类装置的模型制作并对其进行多 次测试以及数据取样以确保其稳定性及用户使用体验。我们在装置模型中已经成功实现通过摄像头获取垃圾特征信息并将其和数据库已保存的各个特征文件进行对比，通过相似度的比较让处理器识别出垃圾种类同时产生信号来控制置于垃圾桶上的电机，使其转动并打开垃圾桶盖，在我们的试验中我们针对图像的反馈 进行了改进，为方便使用者确定摄像头所对焦的位置我们假装了显示屏帮助使用者将垃圾完整地置于镜头识别区域中。对于猜想的取证，我们采取线上问卷调查和线上访谈的形式，调查内容是针对人们对于垃圾分类中的困扰和使用装置来辅助垃圾分类的态度。 </p>
<h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a><strong>第二部分</strong></h3><p>通过对于垃圾分类现状的调查，我们发现从来不进行垃圾分类的人群所占比例较小，而占比最多的是偶尔分类的人群，其中针对此人群进行的原因调查显示，不知道垃圾种类和垃圾桶无分类占比达 96.35%这也证实了我们设计的智能垃圾 分类装置解决客观设备问题以及辅助进行分类的作用。同时通过线上访谈，我们 了解到一些细节会在心理上影响垃圾分类。比如，垃圾桶在使用过程中会不可避免地变脏变臭导致人们会对打开垃圾桶盖产生抗拒情绪，而清理垃圾桶又会消耗 人力。这个问题将在我们的系统使用中得到解决，本装置自动识别并完成开启， 停滞，关闭的过程完全避免使用者与垃圾桶的接触，同时控制垃圾滋生细菌的传播。</p>
<h3 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a><strong>第三部分</strong></h3><p>关于本装置的实践计划，我们原定利用寒假及春节假期，通过在家的大量数据导入及实验完善其可行性和实用性。当错误率较低时，制作缩小版并发放给同学、邻里等方便进行采访且有研究价值的人群，进行小规模试用。然而，受新型冠状病毒影响，本计划未能完全实现，目前只进行对设备的完善。但是我们并未放弃该计划，在如果情况有所好转，我们拟定暂时现在参与者 的家中投放使用同时利用这段时间录入更多的垃圾特征文件，增强模拟的真实性。 本装置目的在于辅助和培养人们进行垃圾分类的习惯所以我们会在实践时对垃圾分类的情况进行记录和对比。关于影响力方面，首先我们坚信在试用结束后，垃圾分类情况将会大大好转，即使存在个别错误，垃圾分类的正确率将接近 100%。而在习惯养成方面，大多数原本不垃圾分类的人群基本都会进入垃圾分类的行列，即使不能确保所有人使用后都能对垃圾分类熟练运用，但有学习意识是必然趋势。 当今社会，智能垃圾分类已成为热潮，而我们与众不同的是，我们并不是以 人工智能代替人，而是用人工智能帮助人学习。我们在研究过程中也借鉴不少已 经卓有成效的事例，在能力所及处完善自我。 </p>
<h3 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a><strong>第四部分</strong></h3><p>介于新型冠状病毒的影响，我们尚有未完成的计划，这些都是在全国站前我们想要尽力努力完成的。在全国站前，我们争取完成小规模试用，通过对试用人 群进行再次问卷调查，对比两次结果，研究设备对人们的影响。其次若还有富余时间，我们会对结果进行分析，再次改进设备，有可能会进行进一步的试用，使结果更加准确。当然比较重要的未完成部分便是如何实现培养民众分类意识。对此我们已有完整的想法，但在实现问题上存在部分困难还待解决。之后的时间，我们将以此任务为中心完成进一步实验。</p>
<hr>
<h2 id="成果展示（the-final-report）（including-thetranslation）"><a href="#成果展示（the-final-report）（including-thetranslation）" class="headerlink" title="成果展示（the final report）（including thetranslation）"></a>成果展示（the final report）（including thetranslation）</h2><p><img src="https://s1.ax1x.com/2020/03/21/8WuZoF.png" alt="8WuZoF.png"></p>
<h3 id="①摘要"><a href="#①摘要" class="headerlink" title="①摘要"></a>①摘要</h3><p>本小队此次研究了目前垃圾分类效果不理想的问题，笔者通过实际调查以及对相关资料的搜集发现现在各社区内的垃圾分类实行情况并不顺利。我们结合自身情况做出来假设：市民遇到的阻力主要是对垃圾种类知识的缺乏。因此我们设计了智能垃圾分类装置，该装置通过图像识别技术识别垃圾种类辅助进行垃圾分类，本装置可以通过显示种类补充垃圾分类知识， 本装置可以在解决垃圾桶本身存在的分类问题并同时进行教育。</p>
<p>我们针对个人及家庭的垃圾分类情况和设计了调查问卷并进行线上的 调查，结果与我们的猜想相符，我们进行了后续的实践，做出了我们设想中智能垃圾分类装置的模型并对其数据库进行了完善，如果该装置能得到实用将很大程度上促进垃圾分类的执行效果。 </p>
<h3 id="②背景介绍"><a href="#②背景介绍" class="headerlink" title="②背景介绍"></a>②背景介绍</h3><p>垃圾分类作为我国节约资源的国家战略中不可忽视的一部分目前正受到越来越多的关注。而就我国垃圾分类的现状并不理想。如果能保质保量地进行垃圾分类不仅减少处理垃圾的成本，还能将大量的资源回收再利用。</p>
<p>要想推广垃圾分类，宣传教育是必不可少的 一部分，有垃圾分类的市民数量正在增加，但是当前的宣传存在不够具体的问题，根据我们的调查结果，不进行垃圾分类的原因在中不知道垃圾所属的具体种类占很大的比例。因此我们希望通过对垃圾分类装置的革新可以辅助人们垃圾分类意识的培养最终达到即使在没有本装置的情况下仍可以自觉进行垃圾分类。 </p>
<h3 id="③研究部分"><a href="#③研究部分" class="headerlink" title="③研究部分"></a>③研究部分</h3><p>我们的研究假设是通过使用智能垃圾分类装置，进行垃圾分类知识的普及可以促进垃圾分类的进程。该研究项目将社科问题与科技相结合，关注了社会当前面临的一 个热点话题，且也与新时代科技创新的重点相契合，更是考虑到利用科技不是长久之 计，唯有培养民众垃圾分类的素养，才能保证这一问题得到解决。</p>
<p>研究问题主要针对如何解决当代中国民众垃圾分类意识不成熟，缺少垃圾分类知识的状况进行研究。目标明确、具体。 </p>
<p>我们通过搜寻文献及相关消息了解了目前垃圾分类情况较好的国家和地区，在研究其成功的原因时，有一项是所有成功例子的通性，那就是民众的垃圾分类意识和垃圾分类知识较强，垃圾分类其目的最终是为人民服务，理应由人民来执行。与其花费 大量成本在中端和末端进行垃圾分类，让居民能够在垃圾投放的第一线就进行垃圾分 类明显效率更高，效果更好。但是据了解，长期以来居民参加垃圾分类热情不高，其中主要受两点因素影响：“不知道要去分”和“不知道怎么分”相比较而言，“不知道怎么分”的问题更加严重，这直接影响垃圾分类的执行，即使是有垃圾分类意识的人，如果不知道具体的垃圾怎么分类不仅不能做出实际的行动，积极性也会受到打击，长此以往垃圾分类意识就再次淡薄。因此我们希望能通过该装置解决“不知道怎么分”的问题，从实际出发解决垃圾分类问题。</p>
<p>在设计一个适用于当今社会垃圾分类现状的设备前，对人们的情况进行了解是必不 可少的，这能保证笔者的研究并不是无用功，并且能明确指出笔者的研究方向，不会 偏离主题。为明确方向，笔者进设计并进行了线上问卷调查。问卷分别调查了参与者 目前的垃圾分类状况，垃圾分类意识，遇到的困难以及对于使用装置辅助垃圾分类的 态度。调查结果证实了我们的猜想，证明智能垃圾分类装置的合理性。</p>
<p>在理论研究中，我们对垃圾分类中所存在的问题进行了进一步的调查和分析，同时通过查阅国内外文献并设计调查问卷了解人们日常垃圾分类的情况，小组成员整理了针 对对垃圾分类不同的观点和态度。目前，垃圾分类所面临的最大问题是不知道垃圾所属的种类。因此，我们坚定了通过设计智能垃圾桶来起到教育和意识养成的辅助作用的想法。 </p>
<h3 id="④实践部分"><a href="#④实践部分" class="headerlink" title="④实践部分"></a>④实践部分</h3><p>实践内容： </p>
<p>一．我们将智能垃圾分类装置的模型制作出来并通过实体操作对其进行了实验。 </p>
<p>1.我们通过使用摄像头获取垃圾特征信息 </p>
<p>2.我们将摄像头获取的特征和数据库已保存的各个特征文件进行对比 </p>
<p>3.处理器将比对出的结果转化为电子信号并将信号发送给了控制智能垃圾桶盖的电机，电机带动相对应的垃圾桶盖转动打开 </p>
<p>4.我们发现使用者不能确定是否将自己需要投放至垃圾桶中的垃圾置于摄像机镜 头的对焦处，导致有些基础的物品无法被识别出来 </p>
<p>5.因此，我们加装了电子显示屏以帮助使用者将垃圾完整地置于镜头识别区域中 </p>
<p>二． 我们也通过线上调查的形式针对人们对于垃圾分类中的困扰和使用装置来辅 </p>
<p>助垃圾分类的态度展开了调查 </p>
<ol>
<li><p>通过对垃圾分类现状的调查，我们发现从来不进行垃圾分类的人群所占比例较小，而占比最多的是偶尔分类的人群 </p>
</li>
<li><p>我们针对此人群进行的原因调查显示，不知道垃圾种类和垃圾桶无分类占比达 96.35% </p>
</li>
</ol>
<p>实践与研究的关系： </p>
<p>我们通过对我们将要试用的智能垃圾分类装置模型进行实体操作，可以确保我们 在未来推广使用这款装置的时候不会出现一些因技术上原因而导致的产品的缺点，以确保我们的研究可以方便准确的帮助人们学习与习惯垃圾分类。同时我们也通 过线上调查的形式对人们对于垃圾分类中的困扰以及对通过智能垃圾分类装置辅助垃圾分类的态度以预估我们的装置未来投入使用后的认可度。我们也希望能够 更加完美的改进装置已尽可能多的解决人们对于当下垃圾分类的困扰。 </p>
<p>效果评估： </p>
<p>我们目前在试验阶段中的装置对于正常垃圾分类的正确率几乎高达100%，同时我们也通过几位同学的试用，对于我们的装置也给予了较高的满意度。唯一美中不足的是我们的产品拥有较高的造价。 </p>
<h3 id="⑤未来方向"><a href="#⑤未来方向" class="headerlink" title="⑤未来方向"></a>⑤未来方向</h3><p>下一步，我们主要把重心放在改进装置上。 而现在的难题是如何在病毒的阻碍下完成实验，以及在保证性能的条件下如何使成本更低。我们准备继续我们的实践研究，对我们的实验样品进行更多的测试，并进而改进它的功能。 </p>
<p><img src="https://s1.ax1x.com/2020/03/21/8WM9uq.png" alt="8WM9uq.png"></p>
<h3 id="①Abstract"><a href="#①Abstract" class="headerlink" title="①Abstract"></a>①Abstract</h3><p>Our team studied that the current garbage classification effect is not ideal. Through the actual investigation and the collection of relevant data, the we found that the implementation of garbage classification in each community is not very successful.We make an assumption based on our own situation: the main resistance encountered by the public is the lack of knowledge of garbage types.Therefore, we designed an AI garbage classification device, which can identify garbage types through image recognition technology to assist garbage classification. This device can supplement garbage classification knowledge by displaying types, and this device can solve the classification problems of the garbage bins themselves and carry out education at the same time. We aimed at the situation of personal and family garbage classification, then </p>
<p>we design the questionnaires and online survey. The results are in conformity with our conjecture. We conducted a follow-up research, made us suppose intelligent garbage classifying device model and to improve its database. If the device can get practical will largely promote the implementation of garbage classification effect. </p>
<h3 id="②Introduction"><a href="#②Introduction" class="headerlink" title="②Introduction"></a>②Introduction</h3><p>Garbage classification, as a part of the national strategy of resource conservation in China, is attracting more and more attention.However, the status quo of garbage classification in China is not ideal.If the quality and quantity of garbage can be guaranteed, not only the cost of garbage treatment can be reduced, but also a lot of resources can be recycled. </p>
<p>In order to promote garbage classification, publicity and education turn to indispensable parts. The number of citizens with garbage classification is increasing, but the current publicity is not specific enough. According to our survey results, the reasons for not doing garbage classification that some people do not know the specific types of garbage is accounted for a large proportion. Therefore, we hope that the innovation of garbage classification device can help people cultivate their garbage classification consciousness and finally achieve the goal of garbage classification even without this device. </p>
<h3 id="③Research"><a href="#③Research" class="headerlink" title="③Research"></a>③Research</h3><p>Our hypothesis is that the popularization of garbage classification knowledge can promote the process of garbage classification through the use of intelligent garbage classification device.This research project combines social science issues with science and technology to focus on a hot topic facing the society at present, which is also in line with the focus of scientific and technological innovation in the new era. Moreover, it takes into account that the use of science and technology is not a long-term solution, and only the only guaranteed solution is cultivating people’s literacy in garbage classification guaranteed. The research problems mainly focus on how to solve the problem that the awareness of garbage classification is not mature and the knowledge of garbage classification is not enough.Our goal is clear and specific. </p>
<p>We learned about the countries and regions with good garbage classification status by searching literature and relevant information. In the study of the reasons for its success, there is a commonality of all successful examples, which is that the public’s awareness of garbage classification and garbage classification knowledge is strong, the purpose of garbage classification is ultimately to serve the people, should be implemented by the people. Rather than spend a lot of money on garbage classification at the middle and end, it is more efficient and effective for residents to conduct garbage classification at the first line of garbage delivery.But it is known that for a long time residents participate in garbage sorting enthusiasm is not high, mainly affected by two factors: “I don’t want to do” and “don’t know how to” comparison, “don’t know how to” problem is more serious, which directly influence the execution of the garbage sorting, even a person with a sense of garbage classification, if you don’t know specific how garbage classification not only can’t make the actual action, enthusiasm will hit, weak consciousness of waste classification in the long term will once again.Therefore, we hope to solve the problem of “don’t know how to do” through this device, and solve the garbage classification problem from the perspective of reality. Before designing a device applicable to the current situation of garbage classification in today’s society, it is essential to understand people’s situation, which can ensure that the author’s research is not useless, and can clearly point out the author’s research direction, will not deviate from the theme.</p>
<p>To clarify the direction, the author designed and conducted an online questionnaire survey.The questionnaire investigated participants’ current status of garbage classification, awareness of garbage classification, difficulties encountered and attitudes towards the use of devices to assist garbage classification.The investigation results confirm our conjecture and prove the rationality of intelligent waste sorting device. In the theoretical research, we further investigated and analyzed the problems existing in garbage classification. At the same time, we consulted domestic and foreign literatures and designed questionnaires to learn about People’s Daily garbage classification. The team members sorted out different views and attitudes towards garbage classification.At present, the biggest problem of garbage classification is not knowing what kind of garbage belongs to.Therefore, we firmly believe that the design of intelligent garbage can can play an auxiliary role in education and consciousness cultivation. </p>
<h3 id="④-Implementation"><a href="#④-Implementation" class="headerlink" title="④ Implementation"></a>④ Implementation</h3><p>Practice content: </p>
<p>A.We made the model of the intelligent garbage classification device and experimented with it </p>
<p>through physical operation. </p>
<ol>
<li><p>We use cameras to obtain garbage feature information </p>
</li>
<li><p>We compare the features obtained by the camera with the features saved by the database </p>
</li>
<li><p>The processor converts the result of comparison into electronic signals and sends the signals to the motor controlling the intelligent garbage can cover, which drives the corresponding garbage can cover to rotate and open </p>
</li>
<li><p>We found that we can’t make sure whether users place the garbage they need to put into the trash bin in the focus of the camera lens, leading to some basic items that could not be identified </p>
</li>
<li><p>Therefore, we have added electronic display screens to help users place garbage in the lens recognition area completely </p>
</li>
</ol>
<p>B.We also conducted an online survey on people’s attitudes towards waste separation and the </p>
<p>use of devices to assist waste separation </p>
<ol>
<li><p>Through the investigation on the status quo of garbage classification, we find that the proportion of people who never classify garbage is small, while the largest proportion is people who classify occasionally </p>
</li>
<li><p>According to our investigation on the reasons for this group, 96.35% of them do not know the types of garbage and refuse can not be classified </p>
</li>
</ol>
<p>The relationship between practice and research: </p>
<p>We test our garbage classification device model physically, which will ensure that our promotion in the future when using this device won’t appear some product defects caused by technical reasons and ensure that our research can be accurate to help people learn and habits garbage classification. </p>
<p>At the same time, we also estimated the recognition degree of our device after it was put into use in the future by means of an online survey on people’s troubles in garbage classification and their attitude towards the auxiliary garbage classification through the intelligent garbage classification device.We also hope to improve the device and improve as much as possible to solve the current garbage classification problem. </p>
<p>Effect evaluation: </p>
<p>At present, the accuracy rate of our device for normal garbage classification in the experiment stage is almost 100%. Meanwhile, we also give high satisfaction to our device through the trial of several classmates. The only drawback in the ointment is that our products have a high price. </p>
<h3 id="⑤Discussions"><a href="#⑤Discussions" class="headerlink" title="⑤Discussions"></a>⑤Discussions</h3><p>For the next step, we will focus on improving the device. Now,the challenge is how we complete it when the virus is on our way,and how to make it cheaper without compromising performance. We plan to continue our practical research. We will conduct more tests on our experimental samples, and further improve its functions. </p>
<hr>
<h1 id="Final-Result"><a href="#Final-Result" class="headerlink" title="Final Result"></a>Final Result</h1><h2 id="证书certification"><a href="#证书certification" class="headerlink" title="证书certification"></a>证书certification</h2><p> <img src="file:///C:/Users/Administrator/Desktop/%E4%BD%9C%E4%B8%9A/CTB/%E7%94%B5%E5%AD%90%E8%AF%81%E4%B9%A6" alt="file:///C:/Users/Administrator/Desktop/%E4%BD%9C%E4%B8%9A/CTB/%E7%94%B5%E5%AD%90%E8%AF%81%E4%B9%A6"> </p>
<h2 id="演讲视频video"><a href="#演讲视频video" class="headerlink" title="演讲视频video"></a>演讲视频video</h2><video id="video" controls="" preload="none">
    <source id="mp4" src="C:/Users/Administrator/Desktop/作业/CTB/我的影片.mp4" type="video/mp4">
</video>
]]></content>
      <categories>
        <category>competitions</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习1</title>
    <url>/2020/05/03/Python-%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<h1 id="Python内置函数"><a href="#Python内置函数" class="headerlink" title="Python内置函数"></a>Python内置函数</h1><p>*一到六载自<a href="https://cloud.tencent.com/developer/article/1200752，经微调，重点加黑" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1200752，经微调，重点加黑</a></p>
<h2 id="数学符号"><a href="#数学符号" class="headerlink" title="*数学符号"></a>*数学符号</h2><table>
<thead>
<tr>
<th>操作符</th>
<th>操作</th>
<th>例子</th>
<th>求职为</th>
</tr>
</thead>
<tbody><tr>
<td>**</td>
<td>指数(^)</td>
<td>2**3</td>
<td>8</td>
</tr>
<tr>
<td>%</td>
<td>取余数(mod)</td>
<td>22%8</td>
<td>6</td>
</tr>
<tr>
<td>//</td>
<td>取商(quotient)</td>
<td>22//8</td>
<td>2</td>
</tr>
<tr>
<td>/</td>
<td>除(divide)</td>
<td>22/8</td>
<td>2.75</td>
</tr>
<tr>
<td>*</td>
<td>乘(multiply)</td>
<td>3*5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减(minus)</td>
<td>5-2</td>
<td>3</td>
</tr>
<tr>
<td>+</td>
<td>加(add)</td>
<td>2+2</td>
<td>4</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>符号</th>
<th>操作</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
</tr>
<tr>
<td>==</td>
<td>等于(equal to)</td>
</tr>
<tr>
<td>!=</td>
<td>不等(not equal to)</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
</tbody></table>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="*数据类型"></a>*数据类型</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>转换符号</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>整型（integer）</td>
<td>int()</td>
<td>-2, -1, 0, 1, 2, 3</td>
</tr>
<tr>
<td>浮点型（float）</td>
<td>float()</td>
<td>-1.25, -1.0, –0.5, 1.25</td>
</tr>
<tr>
<td>字符型（string）</td>
<td>str()</td>
<td>‘a’, ‘aa’, ‘Hello!’, ‘11a’</td>
</tr>
</tbody></table>
<h2 id="一、数学运算类"><a href="#一、数学运算类" class="headerlink" title="一、数学运算类"></a>一、数学运算类</h2><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>abs(x)</strong></td>
<td align="left">求绝对值1、参数可以是整型，也可以是复数2、若参数是复数，则返回复数的模</td>
</tr>
<tr>
<td align="left">complex([real[, imag]])</td>
<td align="left">创建一个复数</td>
</tr>
<tr>
<td align="left">divmod(a, b)</td>
<td align="left">分别取商和余数注意：整型、浮点型都可以</td>
</tr>
<tr>
<td align="left"><strong>float([x])</strong></td>
<td align="left">将一个字符串或数转换为浮点数。如果无参数将返回0.0</td>
</tr>
<tr>
<td align="left"><strong>int([x[, base]])</strong></td>
<td align="left">将一个字符转换为int类型，base表示进制</td>
</tr>
<tr>
<td align="left">long([x[, base]])</td>
<td align="left">将一个字符转换为long类型</td>
</tr>
<tr>
<td align="left">pow(x, y[, z])</td>
<td align="left">返回x的y次幂</td>
</tr>
<tr>
<td align="left"><strong>range([start], stop[, step])</strong></td>
<td align="left">产生一个序列，默认从0开始</td>
</tr>
<tr>
<td align="left">round(x[, n])</td>
<td align="left">四舍五入</td>
</tr>
<tr>
<td align="left"><strong>sum(iterable[, start])</strong></td>
<td align="left">对集合求和</td>
</tr>
<tr>
<td align="left">oct(x)</td>
<td align="left">将一个数字转化为8进制</td>
</tr>
<tr>
<td align="left">hex(x)</td>
<td align="left">将整数x转换为16进制字符串</td>
</tr>
<tr>
<td align="left"><strong>chr(i) / asc(i)</strong></td>
<td align="left">返回整数i对应的ASCII字符 / ASCII字符对应的整数i</td>
</tr>
<tr>
<td align="left">bin(x)</td>
<td align="left">将整数x转换为二进制字符串</td>
</tr>
<tr>
<td align="left">bool([x])</td>
<td align="left">将x转换为Boolean类型</td>
</tr>
</tbody></table>
<h2 id="二、集合类操作"><a href="#二、集合类操作" class="headerlink" title="二、集合类操作"></a>二、集合类操作</h2><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">basestring()</td>
<td align="left">str和unicode的超类不能直接调用，可以用作isinstance判断</td>
</tr>
<tr>
<td align="left">format(value [, format_spec])</td>
<td align="left">格式化输出字符串格式化的参数顺序从0开始，如“I am {0},I like {1}”</td>
</tr>
<tr>
<td align="left">unichr(i)</td>
<td align="left">返回给定int类型的unicode</td>
</tr>
<tr>
<td align="left">enumerate(sequence [, start = 0])</td>
<td align="left">返回一个可枚举的对象,该对象的next()方法将返回一个tuple</td>
</tr>
<tr>
<td align="left">iter(o[, sentinel])</td>
<td align="left">生成一个对象的迭代器，第二个参数表示分隔符</td>
</tr>
<tr>
<td align="left"><strong>max(iterable[, args…][key])</strong></td>
<td align="left">返回集合中的最大值</td>
</tr>
<tr>
<td align="left"><strong>min(iterable[, args…][key])</strong></td>
<td align="left">返回集合中的最小值</td>
</tr>
<tr>
<td align="left"><strong>dict([arg])</strong></td>
<td align="left">创建数据字典</td>
</tr>
<tr>
<td align="left"><strong>list([iterable])</strong></td>
<td align="left">将一个集合类转换为另外一个集合类</td>
</tr>
<tr>
<td align="left">set()</td>
<td align="left">set对象实例化</td>
</tr>
<tr>
<td align="left">frozenset([iterable])</td>
<td align="left">产生一个不可变的set</td>
</tr>
<tr>
<td align="left"><strong>str([object])</strong></td>
<td align="left">转换为string类型</td>
</tr>
<tr>
<td align="left">sorted(iterable[, cmp[, key[, reverse]]])</td>
<td align="left">队集合排序</td>
</tr>
<tr>
<td align="left">tuple([iterable])</td>
<td align="left">生成一个tuple类型</td>
</tr>
<tr>
<td align="left">xrange([start], stop[, step])</td>
<td align="left">xrange()函数与range()类似，但xrnage()并不创建列表，而是返回一个xrange对象，它的行为与列表相似，但是只在需要时才计算列表值，当列表很大时，这个特性能为我们节省内存</td>
</tr>
</tbody></table>
<h2 id="三、逻辑判断"><a href="#三、逻辑判断" class="headerlink" title="三、逻辑判断"></a>三、逻辑判断</h2><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">all(iterable)</td>
<td align="left">1、集合中的元素都为真的时候为真2、特别的，若为空串返回为True</td>
</tr>
<tr>
<td align="left">any(iterable)</td>
<td align="left">1、集合中的元素有一个为真的时候为真2、特别的，若为空串返回为False</td>
</tr>
<tr>
<td align="left">cmp(x, y)</td>
<td align="left">如果x &lt; y ,返回负数；x == y, 返回0；x &gt; y,返回正数</td>
</tr>
</tbody></table>
<h2 id="四、反射"><a href="#四、反射" class="headerlink" title="四、反射"></a>四、反射</h2><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">callable(object)</td>
<td align="left">检查对象object是否可调用1、类是可以被调用的2、实例是不可以被调用的，除非类中声明了<strong>call</strong>方法</td>
</tr>
<tr>
<td align="left">classmethod()</td>
<td align="left">1、注解，用来说明这个方式是个类方法2、类方法即可被类调用，也可以被实例调用3、类方法类似于Java中的static方法4、类方法中不需要有self参数</td>
</tr>
<tr>
<td align="left">compile(source, filename,  mode[, flags[, dont_inherit]])</td>
<td align="left">将source编译为代码或者AST对象。代码对象能够通过exec语句来执行或者eval()进行求值。1、参数source：字符串或者AST（Abstract Syntax Trees）对象。2、参数 filename：代码文件名称，如果不是从文件读取代码则传递一些可辨认的值。3、参数model：指定编译代码的种类。可以指定为 ‘exec’,’eval’,’single’。4、参数flag和dont_inherit：这两个参数暂不介绍</td>
</tr>
<tr>
<td align="left">dir([object])</td>
<td align="left">1、不带参数时，返回当前范围内的变量、方法和定义的类型列表；2、带参数时，返回参数的属性、方法列表。3、如果参数包含方法<strong>dir</strong>()，该方法将被调用。当参数为实例时。4、如果参数不包含<strong>dir</strong>()，该方法将最大限度地收集参数信息</td>
</tr>
<tr>
<td align="left">delattr(object, name)</td>
<td align="left">删除object对象名为name的属性</td>
</tr>
<tr>
<td align="left">eval(expression [, globals [, locals]])</td>
<td align="left">计算表达式expression的值</td>
</tr>
<tr>
<td align="left">execfile(filename [, globals [, locals]])</td>
<td align="left">用法类似exec()，不同的是execfile的参数filename为文件名，而exec的参数为字符串。</td>
</tr>
<tr>
<td align="left">filter(function, iterable)</td>
<td align="left">构造一个序列，等价于[ item for item in iterable if function(item)]1、参数function：返回值为True或False的函数，可以为None2、参数iterable：序列或可迭代对象</td>
</tr>
<tr>
<td align="left">getattr(object, name [, defalut])</td>
<td align="left">获取一个类的属性</td>
</tr>
<tr>
<td align="left">globals()</td>
<td align="left">返回一个描述当前全局符号表的字典</td>
</tr>
<tr>
<td align="left">hasattr(object, name)</td>
<td align="left">判断对象object是否包含名为name的特性</td>
</tr>
<tr>
<td align="left">hash(object)</td>
<td align="left">如果对象object为哈希表类型，返回对象object的哈希值</td>
</tr>
<tr>
<td align="left">id(object)</td>
<td align="left">返回对象的唯一标识</td>
</tr>
<tr>
<td align="left">isinstance(object, classinfo)</td>
<td align="left">判断object是否是class的实例</td>
</tr>
<tr>
<td align="left">issubclass(class, classinfo)</td>
<td align="left">判断是否是子类</td>
</tr>
<tr>
<td align="left"><strong>len(s)</strong></td>
<td align="left">返回集合长度</td>
</tr>
<tr>
<td align="left">locals()</td>
<td align="left">返回当前的变量列表</td>
</tr>
<tr>
<td align="left">map(function, iterable, …)</td>
<td align="left">遍历每个元素，执行function操作</td>
</tr>
<tr>
<td align="left">memoryview(obj)</td>
<td align="left">返回一个内存镜像类型的对象</td>
</tr>
<tr>
<td align="left">next(iterator[, default])</td>
<td align="left">类似于iterator.next()</td>
</tr>
<tr>
<td align="left">object()</td>
<td align="left">基类</td>
</tr>
<tr>
<td align="left">property([fget[, fset[, fdel[, doc]]]])</td>
<td align="left">属性访问的包装类，设置后可以通过c.x=value等来访问setter和getter</td>
</tr>
<tr>
<td align="left">reduce(function, iterable[, initializer])</td>
<td align="left">合并操作，从第一个开始是前两个参数，然后是前两个的结果与第三个合并进行处理，以此类推</td>
</tr>
<tr>
<td align="left">reload(module)</td>
<td align="left">重新加载模块</td>
</tr>
<tr>
<td align="left">setattr(object, name, value)</td>
<td align="left">设置属性值</td>
</tr>
<tr>
<td align="left">repr(object)</td>
<td align="left">将一个对象变幻为可打印的格式</td>
</tr>
<tr>
<td align="left">slice（）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">staticmethod</td>
<td align="left">声明静态方法，是个注解</td>
</tr>
<tr>
<td align="left">super(type[, object-or-type])</td>
<td align="left">引用父类</td>
</tr>
<tr>
<td align="left"><strong>type(object)</strong></td>
<td align="left">返回该object的类型</td>
</tr>
<tr>
<td align="left">vars([object])</td>
<td align="left">返回对象的变量，若无参数与dict()方法类似</td>
</tr>
<tr>
<td align="left">bytearray([source [, encoding [, errors]]])</td>
<td align="left">返回一个byte数组1、如果source为整数，则返回一个长度为source的初始化数组；2、如果source为字符串，则按照指定的encoding将字符串转换为字节序列；3、如果source为可迭代类型，则元素必须为[0 ,255]中的整数；4、如果source为与buffer接口一致的对象，则此对象也可以被用于初始化bytearray.</td>
</tr>
<tr>
<td align="left">zip([iterable, …])</td>
<td align="left">实在是没有看懂，只是看到了矩阵的变幻方面</td>
</tr>
</tbody></table>
<h2 id="五、IO操作"><a href="#五、IO操作" class="headerlink" title="五、IO操作"></a>五、IO操作</h2><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">file(filename [, mode [, bufsize]])</td>
<td align="left">file类型的构造函数，作用为打开一个文件，如果文件不存在且mode为写或追加时，文件将被创建。添加‘b’到mode参数中，将对文件以二进制形式操作。添加‘+’到mode参数中，将允许对文件同时进行读写操作1、参数filename：文件名称。2、参数mode：’r’（读）、’w’（写）、’a’（追加）。3、参数bufsize：如果为0表示不进行缓冲，如果为1表示进行行缓冲，如果是一个大于1的数表示缓冲区的大小 。</td>
</tr>
<tr>
<td align="left"><strong>input([prompt])</strong></td>
<td align="left">获取用户输入推荐使用raw_input，因为该函数将不会捕获用户的错误输入</td>
</tr>
<tr>
<td align="left"><strong>open(name[, mode[, buffering]])</strong></td>
<td align="left">打开文件与file有什么不同？推荐使用open</td>
</tr>
<tr>
<td align="left"><strong>print</strong></td>
<td align="left">打印函数</td>
</tr>
<tr>
<td align="left">raw_input([prompt])</td>
<td align="left">设置输入，输入都是作为字符串处理</td>
</tr>
</tbody></table>
<h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h2><p><strong>help()–帮助信息</strong></p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-学习3</title>
    <url>/2020/05/30/Python-%E5%AD%A6%E4%B9%A03/</url>
    <content><![CDATA[<h1 id="Python-List"><a href="#Python-List" class="headerlink" title="Python-List"></a>Python-List</h1><h2 id="Obtain-the-value"><a href="#Obtain-the-value" class="headerlink" title="Obtain the value"></a>Obtain the value</h2><p>The value is obtained from ‘0’, which means ‘0’ is the first value.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:['cat', 'bat', 'rat', 'elephant']</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#out:'cat'</span></span><br></pre></td></tr></table></figure>

<p>We can also add it to a string:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'The '</span>+spam[<span class="number">1</span>]+<span class="string">' ate the '</span>+spam[<span class="number">0</span>]+<span class="string">'.'</span></span><br><span class="line"><span class="comment">#out:'The bat ate the cat.'</span></span><br></pre></td></tr></table></figure>

<p>The list in the list:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>],[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line">spam[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"><span class="comment">#out:20</span></span><br></pre></td></tr></table></figure>

<p>Use negative subscripts to get the value:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line">spam[<span class="number">-3</span>]</span><br><span class="line"><span class="comment">#out:'bat'</span></span><br></pre></td></tr></table></figure>

<h2 id="Obtain-the-slice"><a href="#Obtain-the-slice" class="headerlink" title="Obtain the slice"></a>Obtain the slice</h2><p>Use range of subscripts (the range includes the former one, but doesn’t include the later one)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line">spam[<span class="number">0</span>:<span class="number">-2</span>]</span><br><span class="line"><span class="comment">#out:['cat','bat']</span></span><br></pre></td></tr></table></figure>

<p>without one/both subscript(s) (from the beginning or/and the end)</p>
<ul>
<li>[:] means the  whole list</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line">spam[:<span class="number">2</span>]</span><br><span class="line"><span class="comment">#out:['cat', 'bat']</span></span><br></pre></td></tr></table></figure>

<h2 id="Length"><a href="#Length" class="headerlink" title="Length"></a>Length</h2><p>Length is the number of value it has.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'dog'</span>,<span class="string">'moose'</span>]</span><br><span class="line">len(spam)</span><br><span class="line"><span class="comment">#out: 3</span></span><br></pre></td></tr></table></figure>

<h2 id="Changing-the-value-by-using-subscripts"><a href="#Changing-the-value-by-using-subscripts" class="headerlink" title="Changing the value by using subscripts"></a>Changing the value by using subscripts</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line">spam[<span class="number">1</span>]=<span class="string">'aardvark'</span>  </span><br><span class="line">spam[<span class="number">2</span>]=spam[<span class="number">1</span>]</span><br><span class="line">spam[<span class="number">-1</span>]=<span class="number">12345</span></span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:['cat', 'aardvark', 'aardvark', 12345]</span></span><br></pre></td></tr></table></figure>

<h2 id="The-combination-and-calculation-of-list"><a href="#The-combination-and-calculation-of-list" class="headerlink" title="The combination and calculation of list"></a>The combination and calculation of list</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]+[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>]</span><br><span class="line"><span class="comment">#out:[1, 2, 3, 'A', 'B', 'C']</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]*<span class="number">3</span></span><br><span class="line"><span class="comment">#out:[1, 2, 3, 1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>Delete by using del</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">del</span> spam[<span class="number">2</span>]</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:[1, 2, 4]</span></span><br></pre></td></tr></table></figure>



<h2 id="one-usage-enter-the-cats’-name"><a href="#one-usage-enter-the-cats’-name" class="headerlink" title="one usage: enter the cats’ name:"></a>one usage: enter the cats’ name:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">catnames=[]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'Enter the name of cat '</span>+str(len(catnames)+<span class="number">1</span>)+<span class="string">'(Or enter nothing to stop.):'</span>)</span><br><span class="line">    name=input()</span><br><span class="line">    <span class="keyword">if</span> name ==<span class="string">''</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    catnames=catnames+[name]</span><br><span class="line">print(<span class="string">'The cat names are:'</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> catnames:</span><br><span class="line">    print(<span class="string">'  '</span>+name)</span><br></pre></td></tr></table></figure>

<p><strong>The processing steps:</strong></p>
<p>Enter the name of cat 1(Or enter nothing to stop.):<br>Alpha<br>Enter the name of cat 2(Or enter nothing to stop.):<br>Bravo<br>Enter the name of cat 3(Or enter nothing to stop.):<br>Cathy<br>Enter the name of cat 4(Or enter nothing to stop.):</p>
<p><strong>The result:</strong></p>
<p>The cat names are:<br>  Alpha<br>  Bravo<br>  Cathy</p>
<h2 id="Use-list-in-loop"><a href="#Use-list-in-loop" class="headerlink" title="Use list in loop"></a>Use list in loop</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">supplies=[<span class="string">'pen'</span>,<span class="string">'staplers'</span>,<span class="string">'flame-throwers'</span>,<span class="string">'binders'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(supplies)):</span><br><span class="line">    print(<span class="string">'Index '</span>+str(i)+<span class="string">' in supplies is: '</span>+supplies[i])</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#Index 0 in supplies is: pen</span></span><br><span class="line"><span class="comment">#Index 1 in supplies is: staplers</span></span><br><span class="line"><span class="comment">#Index 2 in supplies is: flame-throwers</span></span><br><span class="line"><span class="comment">#Index 3 in supplies is: binders</span></span><br></pre></td></tr></table></figure>

<h2 id="in-and-not-in"><a href="#in-and-not-in" class="headerlink" title="in and not in"></a><em>in</em> and <em>not in</em></h2><p>example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'howdy'</span><span class="keyword">in</span>[<span class="string">'hello'</span>,<span class="string">'hi'</span>,<span class="string">'howdy'</span>]</span><br><span class="line"><span class="comment">#out:True</span></span><br></pre></td></tr></table></figure>

<p>usage:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mypet=[<span class="string">'Zophie'</span>,<span class="string">'Pooka'</span>,<span class="string">'Simon'</span>]</span><br><span class="line">print(<span class="string">'Enter a pet name:'</span>)</span><br><span class="line">name=input()</span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> mypet:</span><br><span class="line">    print(<span class="string">'I do not have a pet named '</span>+name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(name+<span class="string">' is my pet.'</span>)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#Enter a pet name:</span></span><br><span class="line"><span class="comment">#Simon</span></span><br><span class="line"><span class="comment">#Simon is my pet.</span></span><br></pre></td></tr></table></figure>



<p>improve the former usage about the cats’ names:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">catnames=[]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'Enter the name of cat '</span>+str(len(catnames)+<span class="number">1</span>)+<span class="string">'(Or enter nothing to stop.):'</span>)</span><br><span class="line">    name=input()</span><br><span class="line">    <span class="keyword">if</span> name ==<span class="string">''</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> catnames:              <span class="comment">#added part    </span></span><br><span class="line">        print(<span class="string">'The name has existed'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        catnames=catnames+[name]</span><br><span class="line">print(<span class="string">'The cat names are:'</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> catnames:</span><br><span class="line">    print(<span class="string">'  '</span>+name)</span><br></pre></td></tr></table></figure>

<p><strong>The processing steps:</strong></p>
<p>Enter the name of cat 1(Or enter nothing to stop.):<br>Alpha<br>Enter the name of cat 2(Or enter nothing to stop.):<br>Bravo<br><strong><em>Enter the name of cat 3(Or enter nothing to stop.):</em></strong><br><strong><em>Alpha</em></strong><br><strong><em>The name has existed</em></strong><br>Enter the name of cat 3(Or enter nothing to stop.):<br>Cathy<br>Enter the name of cat 4(Or enter nothing to stop.):</p>
<p><strong>The result:</strong></p>
<p>The cat names are:<br>  Alpha<br>  Bravo<br>  Cathy</p>
<h2 id="Mutiple-values"><a href="#Mutiple-values" class="headerlink" title="Mutiple values:"></a>Mutiple values:</h2><p>We can give the list other values.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat=[<span class="string">'fat'</span>,<span class="string">'black'</span>,<span class="string">'loud'</span>]</span><br><span class="line">size, color, dispostion=cat</span><br><span class="line">print(size)</span><br><span class="line"><span class="comment">#out:fat</span></span><br></pre></td></tr></table></figure>



<h2 id="Other-instructions"><a href="#Other-instructions" class="headerlink" title="Other instructions"></a>Other instructions</h2><h3 id="append-add-a-new-value-to-the-list-in-the-end"><a href="#append-add-a-new-value-to-the-list-in-the-end" class="headerlink" title="append: add a new value to the list in the end"></a>append: add a new value to the list in the end</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">spam.append(<span class="string">'mouse'</span>)</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:[1, 2, 3, 4, 'mouse']</span></span><br></pre></td></tr></table></figure>



<h3 id="insert-add-a-new-value-in-the-middle"><a href="#insert-add-a-new-value-in-the-middle" class="headerlink" title="insert: add a new value in the middle"></a>insert: add a new value in the middle</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">spam.insert(<span class="number">1</span>,<span class="string">'chicken'</span>)</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:[1, 'chicken', 2, 3, 4]</span></span><br></pre></td></tr></table></figure>



<h3 id="index-show-the-position-of-the-value"><a href="#index-show-the-position-of-the-value" class="headerlink" title="index: show the position of the value"></a>index: show the position of the value</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">spam.index(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#out: 2</span></span><br></pre></td></tr></table></figure>



<h3 id="remove-remove-the-value-from-the-list"><a href="#remove-remove-the-value-from-the-list" class="headerlink" title="remove:  remove the value from the list"></a>remove:  remove the value from the list</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">spam.remove(<span class="number">1</span>)</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:[2, 3, 4]</span></span><br></pre></td></tr></table></figure>



<h3 id="sort-put-the-value-in-order"><a href="#sort-put-the-value-in-order" class="headerlink" title="sort: put the value in order"></a>sort: put the value in order</h3><h4 id="numbers"><a href="#numbers" class="headerlink" title="numbers:"></a>numbers:</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3.14</span>,<span class="number">1</span>,<span class="number">-7</span>]</span><br><span class="line">spam.sort()</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:[-7, 1, 2, 3.14, 5]</span></span><br></pre></td></tr></table></figure>

<h4 id="words-the-upper-letters-are-in-the-front"><a href="#words-the-upper-letters-are-in-the-front" class="headerlink" title="words: (the upper letters are in the front)"></a>words: (the upper letters are in the front)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'ants'</span>,<span class="string">'cats'</span>,<span class="string">'dogs'</span>,<span class="string">'badgers'</span>]</span><br><span class="line">spam.sort()</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:['ants', 'badgers', 'cats', 'dogs']</span></span><br></pre></td></tr></table></figure>



<h3 id="reverse-reverse-the-order-of-the-value"><a href="#reverse-reverse-the-order-of-the-value" class="headerlink" title="reverse: reverse the order of the value"></a>reverse: reverse the order of the value</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'ants'</span>, <span class="string">'badgers'</span>, <span class="string">'cats'</span>, <span class="string">'dogs'</span>]</span><br><span class="line">spam.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:['dogs', 'cats', 'badgers', 'ants']</span></span><br></pre></td></tr></table></figure>



<h3 id="ignore-the-lower-or-upper-letters"><a href="#ignore-the-lower-or-upper-letters" class="headerlink" title="ignore the lower or upper letters:"></a>ignore the lower or upper letters:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=[<span class="string">'b'</span>,<span class="string">'a'</span>,<span class="string">'A'</span>,<span class="string">'z'</span>,<span class="string">'Z'</span>]</span><br><span class="line">spam.sort(key=str.lower)</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out: ['a', 'A', 'b', 'z', 'Z']</span></span><br></pre></td></tr></table></figure>



<h3 id="tuple-can-be-read-only"><a href="#tuple-can-be-read-only" class="headerlink" title="tuple: (can be read only)"></a>tuple: (can be read only)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment">#out:(1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure>

<p>*if turn dictionary to tuple, it will only show the key:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple(&#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">3</span>:<span class="number">4</span>&#125;)</span><br><span class="line"><span class="comment">#out:(1, 3)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-学习4</title>
    <url>/2020/06/07/Python-%E5%AD%A6%E4%B9%A04/</url>
    <content><![CDATA[<h1 id="Python-functions"><a href="#Python-functions" class="headerlink" title="Python-functions"></a>Python-functions</h1><h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><p>.upper()–capital the letters</p>
<p>.lower()–lower the letters</p>
<p>.islower()–check whether all the letters are lower</p>
<p>.isupper()–check whether all the letters are capital</p>
<p>.isalpha()–check wether all are string(includes letters and Chinese)</p>
<p>.isalnum()–check whether all are string or numbers</p>
<p>.startswith()–check whether the string starts with the context in the ()</p>
<p>.endswith()–check whether the string ends with the context in the ()</p>
<p>‘, ‘.join()–join the list with’,’</p>
<p>.split()–split to form the list with ‘ ‘</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'MyabcnameabcisabcSimon'</span>.split(<span class="string">'abc'</span>)</span><br><span class="line"><span class="comment">#out:['My', 'name', 'is', 'Simon']</span></span><br></pre></td></tr></table></figure>

<p>.rjust(10)–add 10 spaces to the left of the string</p>
<p>.ljust(10)–add 10 spaces to the right of the string</p>
<p>.rjust(10,’*’)–add 10 stars to the left of the string</p>
<p>.center(20,’*’)–put the string in the middle of 20 stars</p>
<p>.strip(‘Spam’)–skip the Spam in the front and in the end</p>
<h2 id="print-："><a href="#print-：" class="headerlink" title="print()："></a><strong>print()：</strong></h2><p>end:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'Hello '</span>,end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'World'</span>)</span><br><span class="line"><span class="comment">#out:Hello World</span></span><br></pre></td></tr></table></figure>

<p>sep:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'cats'</span>,<span class="string">'dogs'</span>,<span class="string">'mice'</span>,sep=<span class="string">","</span>)</span><br><span class="line"><span class="comment">#out:cats,dogs,mice</span></span><br></pre></td></tr></table></figure>

<p>print() will return ‘none’ value:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = print(<span class="string">'Hello!'</span>)</span><br><span class="line"><span class="comment">#out:Hello! </span></span><br><span class="line"></span><br><span class="line"><span class="literal">None</span> == spam</span><br><span class="line"><span class="comment">#out:True</span></span><br></pre></td></tr></table></figure>



<h2 id="def"><a href="#def" class="headerlink" title="def"></a>def</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span> </span><br><span class="line">    print(<span class="string">'Hello '</span> + name) </span><br><span class="line">hello(<span class="string">'Alice'</span>) </span><br><span class="line">hello(<span class="string">'Bob'</span>) </span><br><span class="line"><span class="comment">#out：Hello Alice</span></span><br><span class="line"><span class="comment">#    Hello Bob</span></span><br></pre></td></tr></table></figure>



<h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>It will print a random answer.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAnswer</span><span class="params">(answerNumber)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> answerNumber == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'It is certain'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'It is decidedly so'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Yes'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Reply hazy try again'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Ask again later'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Concentrate and ask again'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'My reply is no'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Outlook not so good'</span></span><br><span class="line">    <span class="keyword">elif</span> answerNumber == <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Very doubtful'</span></span><br><span class="line">r = random.randint(<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">fortune = getAnswer(r)</span><br><span class="line">print(fortune)</span><br></pre></td></tr></table></figure>



<h3 id="partial-and-overall"><a href="#partial-and-overall" class="headerlink" title="partial and overall"></a>partial and overall</h3><ol>
<li>Variables in one part can’t be used in overall situation.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    eggs = <span class="number">31337</span></span><br><span class="line">spam()</span><br><span class="line">print(eggs)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-9-4fa03afe709c&gt; in &lt;module&gt;</span><br><span class="line">      2     eggs&#x3D;31337</span><br><span class="line">      3 </span><br><span class="line">----&gt; 4 print(eggs)</span><br><span class="line"></span><br><span class="line">NameError: name &#39;eggs&#39; is not defined</span><br></pre></td></tr></table></figure>

<p>This is because the ‘eggs’ is only in the spam but not the overall situation.</p>
<ol start="2">
<li>Variables in one part can’t be used in another part.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    eggs=<span class="number">99</span></span><br><span class="line">    bacon()</span><br><span class="line">    eggs=bacon()</span><br><span class="line">    print(eggs)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bacon</span><span class="params">()</span>:</span></span><br><span class="line">    ham=<span class="number">101</span></span><br><span class="line">    eggs=<span class="number">0</span></span><br><span class="line">    print(<span class="string">'1'</span>)</span><br><span class="line">    <span class="keyword">return</span> eggs</span><br><span class="line">spam()</span><br><span class="line"><span class="comment">#out:1</span></span><br><span class="line"><span class="comment">#    1</span></span><br><span class="line"><span class="comment">#    0</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Variables in overall situation can be used in one part.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    print(eggs)</span><br><span class="line">eggs=<span class="number">42</span></span><br><span class="line">spam()</span><br><span class="line">print(eggs)</span><br><span class="line"><span class="comment">#out:42</span></span><br><span class="line"><span class="comment">#    42</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>One part can be used in another part, and their name can be the same.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    eggs=<span class="string">'spam local'</span></span><br><span class="line">    print(eggs)<span class="comment">#prints 'spam local'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bacon</span><span class="params">()</span>:</span></span><br><span class="line">    eggs=<span class="string">'bacon local'</span></span><br><span class="line">    print(eggs)<span class="comment">#print 'bacon local'</span></span><br><span class="line">    spam()</span><br><span class="line">    print(eggs)<span class="comment">#print 'bacon local'</span></span><br><span class="line">eggs=<span class="string">'global'</span></span><br><span class="line">bacon()</span><br><span class="line">print(eggs)<span class="comment">#prints 'global'</span></span><br><span class="line"><span class="comment">#out:bacon local</span></span><br><span class="line"><span class="comment">#    spam local</span></span><br><span class="line"><span class="comment">#    bacon local</span></span><br><span class="line"><span class="comment">#    global</span></span><br></pre></td></tr></table></figure>



<h3 id="try"><a href="#try" class="headerlink" title="try"></a>try</h3><p>try, if the condition can’t be satisfied, move on to the except part:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(divideBy)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">42</span> / divideBy</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">'Error :Invalid argument.'</span>)</span><br><span class="line"></span><br><span class="line">print(spam(<span class="number">2</span>))</span><br><span class="line">print(spam(<span class="number">12</span>))</span><br><span class="line">print(spam(<span class="number">0</span>))</span><br><span class="line">print(spam(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p>out:</p>
<p>21.0<br>3.5<br>Error :Invalid argument.<br>None<br>42.0</p>
<h3 id="guess-the-number"><a href="#guess-the-number" class="headerlink" title="guess the number:"></a>guess the number:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#This is a guess the numer game</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">secretNumber=random.randint(<span class="number">1</span>,<span class="number">20</span>)</span><br><span class="line">print(<span class="string">'I am thinking of a number between 1 and 20.'</span>)</span><br><span class="line"><span class="comment">#Ask the player to guess 6 times</span></span><br><span class="line"><span class="keyword">for</span> guessesTaken <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    print(<span class="string">'Take a guess!'</span>)</span><br><span class="line">    guess=int(input())</span><br><span class="line">    <span class="keyword">if</span> guess&lt;secretNumber:</span><br><span class="line">        print(<span class="string">'Your guess is too low.'</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess&gt;secretNumber:</span><br><span class="line">        print(<span class="string">'Your number is too high.'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> guess==secretNumber:</span><br><span class="line">    print(<span class="string">'Good job!You guessed my number in '</span>+str(guessesTaken)+<span class="string">' guesses!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Nope. The number I was thinking of was '</span>+str(secretNumber)+<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<p>out:</p>
<p>I am thinking of a number between 1 and 20.<br>Take a guess!<br>1<br>Your guess is too low.<br>Take a guess!<br>4<br>Your guess is too low.<br>Take a guess!<br>6<br>Your guess is too low.<br>Take a guess!<br>9<br>Your guess is too low.<br>Take a guess!<br>15<br>Good job!You guessed my number in 5 guesses!</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>‘certificate</title>
    <url>/2020/05/30/certificate/</url>
    <content><![CDATA[<h1 id="List-of-certificates-and-other-activities"><a href="#List-of-certificates-and-other-activities" class="headerlink" title="List of certificates and other activities"></a>List of certificates and other activities</h1><h2 id="Academic-competition"><a href="#Academic-competition" class="headerlink" title="Academic competition"></a>Academic competition</h2><h3 id="1-ETS-critical-thinking"><a href="#1-ETS-critical-thinking" class="headerlink" title="1. ETS (critical thinking)"></a>1. ETS (critical thinking)</h3><p><img src="https://s1.ax1x.com/2020/05/30/tQpZND.jpg" alt="tQpZND.jpg"></p>
<h3 id="2-CTB"><a href="#2-CTB" class="headerlink" title="2. CTB"></a>2. CTB</h3><p>Our research topic was about rubbish classification. Looking for details: <a href="https://arya-1017.github.io/2020/03/21/CTB%E5%8F%82%E8%B5%9B%E8%BF%87%E7%A8%8B/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/03/21/CTB%E5%8F%82%E8%B5%9B%E8%BF%87%E7%A8%8B/</a></p>
<p><a href="https://imgchr.com/i/tQpJUS" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/30/tQpJUS.jpg" alt="tQpJUS.jpg"></a></p>
<h3 id="3-Haihua-AI-competition"><a href="#3-Haihua-AI-competition" class="headerlink" title="3. Haihua AI competition"></a>3. Haihua AI competition</h3><p>Using machine learning to achieve the automatic rubbish classification. Looking for details:</p>
<p>1: <a href="https://arya-1017.github.io/2020/02/25/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B1/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/02/25/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B1/</a></p>
<p>2: <a href="https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B2/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B2/</a></p>
<p>3: <a href="https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B3/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B3/</a></p>
<p>4: <a href="https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B4/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B4/</a></p>
<p>5: <a href="https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B5/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B5/</a></p>
<p>6: <a href="https://arya-1017.github.io/2020/03/31/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B6/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/03/31/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B6/</a></p>
<p>thoughts: <a href="https://arya-1017.github.io/2020/04/18/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9Bthought/" target="_blank" rel="noopener">https://arya-1017.github.io/2020/04/18/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9Bthought/</a></p>
<h3 id="4-UKMT"><a href="#4-UKMT" class="headerlink" title="4.  UKMT"></a>4.  UKMT</h3><p><img src="https://s1.ax1x.com/2020/05/30/tQCyp4.jpg" alt="tQCyp4.jpg"></p>
<h2 id="Other-activities"><a href="#Other-activities" class="headerlink" title="Other activities"></a>Other activities</h2><h3 id="1-Dragon-boat-race"><a href="#1-Dragon-boat-race" class="headerlink" title="1. Dragon boat race"></a>1. Dragon boat race</h3><p>‘Shuimuqinhuai cup’ the 13th Nanjing dragon boat race in 2019</p>
<p>the first prize</p>
<p><img src="https://s1.ax1x.com/2020/05/30/tQCZSH.png" alt="tQCZSH.png"></p>
<p>photos:</p>
<p><img src="https://s1.ax1x.com/2020/05/30/tQF1k6.png" alt="tQF1k6.png"></p>
<p><img src="https://s1.ax1x.com/2020/05/30/tQAQJK.png" alt="tQAQJK.png"></p>
<p><img src="https://s1.ax1x.com/2020/05/30/tQA8Qe.png" alt="tQA8Qe.png"></p>
<p><img src="https://s1.ax1x.com/2020/05/30/tQAJLd.jpg" alt="tQAJLd.jpg"></p>
<h3 id="2-horse-riding"><a href="#2-horse-riding" class="headerlink" title="2. horse riding"></a>2. horse riding</h3><p><img src="https://s1.ax1x.com/2020/05/30/tQAoy4.jpg" alt="tQAoy4.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/05/30/tQES6e.jpg" alt="tQES6e.jpg"></p>
]]></content>
      <categories>
        <category>competitions</category>
      </categories>
  </entry>
  <entry>
    <title>b站bv转av</title>
    <url>/2020/03/26/b%E7%AB%99bv%E8%BD%ACav/</url>
    <content><![CDATA[<p>b站将av视频号换成了更高级的bv号，转化代码如下：（python）<br>bv to av：</p>


<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=99160403&bvid=BV1R7411y7kw&cid=169272770&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">
    </iframe>
</div>


<p>av to bv：</p>


<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=98869161&bvid=BV1N741127Tj&cid=169275257&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">
    </iframe>
</div>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bv to av:</span></span><br><span class="line">bv=input()</span><br><span class="line">c=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bv:</span><br><span class="line">    c=c+[i]</span><br><span class="line">c=c[<span class="number">2</span>:]</span><br><span class="line">table=&#123;<span class="string">'1'</span>:<span class="number">13</span>,<span class="string">'2'</span>:<span class="number">12</span>,<span class="string">'3'</span>:<span class="number">46</span>,<span class="string">'4'</span>:<span class="number">31</span>,<span class="string">'5'</span>:<span class="number">43</span>,<span class="string">'6'</span>:<span class="number">18</span>,<span class="string">'7'</span>:<span class="number">40</span>,<span class="string">'8'</span>:<span class="number">28</span>,<span class="string">'9'</span>:<span class="number">5</span>,<span class="string">'A'</span>:<span class="number">54</span>,<span class="string">'B'</span>:<span class="number">20</span>,<span class="string">'C'</span>:<span class="number">15</span>,<span class="string">'D'</span>:<span class="number">8</span>,<span class="string">'E'</span>:<span class="number">39</span>,<span class="string">'F'</span>:<span class="number">57</span>,<span class="string">'G'</span>:<span class="number">45</span>,<span class="string">'H'</span>:<span class="number">36</span>,<span class="string">'J'</span>:<span class="number">38</span>,<span class="string">'K'</span>:<span class="number">51</span>,</span><br><span class="line">      <span class="string">'L'</span>:<span class="number">42</span>,<span class="string">'M'</span>:<span class="number">49</span>,<span class="string">'N'</span>:<span class="number">52</span>,<span class="string">'P'</span>:<span class="number">53</span>,<span class="string">'Q'</span>:<span class="number">7</span>,<span class="string">'R'</span>:<span class="number">4</span>,<span class="string">'S'</span>:<span class="number">9</span>,<span class="string">'T'</span>:<span class="number">50</span>,<span class="string">'U'</span>:<span class="number">10</span>,<span class="string">'V'</span>:<span class="number">44</span>,<span class="string">'W'</span>:<span class="number">34</span>,<span class="string">'X'</span>:<span class="number">6</span>,<span class="string">'Y'</span>:<span class="number">25</span>,<span class="string">'Z'</span>:<span class="number">1</span>,<span class="string">'a'</span>:<span class="number">26</span>,<span class="string">'b'</span>:<span class="number">29</span>,<span class="string">'c'</span>:<span class="number">56</span>,<span class="string">'d'</span>:<span class="number">3</span>,<span class="string">'e'</span>:<span class="number">24</span>,<span class="string">'f'</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="string">'g'</span>:<span class="number">47</span>,<span class="string">'h'</span>:<span class="number">27</span>,<span class="string">'i'</span>:<span class="number">22</span>,<span class="string">'j'</span>:<span class="number">41</span>,<span class="string">'k'</span>:<span class="number">16</span>,<span class="string">'m'</span>:<span class="number">11</span>,<span class="string">'n'</span>:<span class="number">37</span>,<span class="string">'o'</span>:<span class="number">2</span>,<span class="string">'p'</span>:<span class="number">35</span>,<span class="string">'q'</span>:<span class="number">21</span>,<span class="string">'r'</span>:<span class="number">17</span>,<span class="string">'s'</span>:<span class="number">33</span>,<span class="string">'t'</span>:<span class="number">30</span>,<span class="string">'u'</span>:<span class="number">48</span>,<span class="string">'v'</span>:<span class="number">23</span>,<span class="string">'w'</span>:<span class="number">55</span>,<span class="string">'x'</span>:<span class="number">32</span>,<span class="string">'y'</span>:<span class="number">14</span>,<span class="string">'z'</span>:<span class="number">19</span>&#125;</span><br><span class="line">d=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(bv)<span class="number">-2</span>):</span><br><span class="line">    d=d+[table[c[i]]]</span><br><span class="line">f=d[<span class="number">0</span>]*<span class="number">58</span>**<span class="number">6</span>+d[<span class="number">1</span>]*<span class="number">58</span>**<span class="number">2</span>+d[<span class="number">2</span>]*<span class="number">58</span>**<span class="number">4</span>+d[<span class="number">3</span>]*<span class="number">58</span>**<span class="number">8</span>+d[<span class="number">4</span>]*<span class="number">58</span>**<span class="number">5</span>+d[<span class="number">5</span>]*<span class="number">58</span>**<span class="number">9</span>+d[<span class="number">6</span>]*<span class="number">58</span>**<span class="number">3</span>+d[<span class="number">7</span>]*<span class="number">58</span>**<span class="number">7</span>+d[<span class="number">8</span>]*<span class="number">58</span>+d[<span class="number">9</span>]</span><br><span class="line">f=bin(f<span class="number">-100618342136696320</span>)</span><br><span class="line">f=list(f[<span class="number">2</span>:])</span><br><span class="line">g=<span class="number">0</span></span><br><span class="line">h=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'1010100100111011001100100100'</span>:</span><br><span class="line">    <span class="keyword">if</span> f[g]==str(i):</span><br><span class="line">        h=h+[<span class="string">'0'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        h=h+[<span class="string">'1'</span>]</span><br><span class="line">    g=g+<span class="number">1</span></span><br><span class="line">av=<span class="string">''</span>.join(h)</span><br><span class="line">av=<span class="string">'av'</span>+str(int(h,<span class="number">2</span>))</span><br><span class="line">print(av)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例：input：bv17x411w7KC</span></span><br><span class="line"><span class="comment">#     output：av170001</span></span><br></pre></td></tr></table></figure>

<h2 id="代码原版："><a href="#代码原版：" class="headerlink" title="代码原版："></a>代码原版：</h2><p>作者(author)：mcfx<br>链接(link)：<a href="https://www.zhihu.com/question/381784377/answer/1099438784" target="_blank" rel="noopener">https://www.zhihu.com/question/381784377/answer/1099438784</a><br>来源(from)：知乎</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table=<span class="string">'fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF'</span></span><br><span class="line">tr=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">58</span>):</span><br><span class="line">    tr[table[i]]=i</span><br><span class="line">s=[<span class="number">11</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">xor=<span class="number">177451812</span></span><br><span class="line">add=<span class="number">8728348608</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(x)</span>:</span></span><br><span class="line">    r=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        r+=tr[x[s[i]]]*<span class="number">58</span>**i</span><br><span class="line">    <span class="keyword">return</span> (r-add)^xor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(x)</span>:</span></span><br><span class="line">    x=(x^xor)+add</span><br><span class="line">    r=list(<span class="string">'BV1  4 1 7  '</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        r[s[i]]=table[x//<span class="number">58</span>**i%<span class="number">58</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(r)</span><br><span class="line"></span><br><span class="line">print(dec(<span class="string">'BV17x411w7KC'</span>))</span><br><span class="line">print(dec(<span class="string">'BV1Q541167Qg'</span>))</span><br><span class="line">print(dec(<span class="string">'BV1mK4y1C7Bz'</span>))</span><br><span class="line">print(enc(<span class="number">170001</span>))</span><br><span class="line">print(enc(<span class="number">455017605</span>))</span><br><span class="line">print(enc(<span class="number">882584971</span>))</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#170001</span></span><br><span class="line"><span class="comment">#455017605</span></span><br><span class="line"><span class="comment">#882584971</span></span><br><span class="line"><span class="comment">#BV17x411w7KC</span></span><br><span class="line"><span class="comment">#BV1Q541167Qg</span></span><br><span class="line"><span class="comment">#BV1mK4y1C7Bz</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>daily programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/19/hello-world/</url>
    <content><![CDATA[<p>Welcome! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Testing</category>
      </categories>
  </entry>
  <entry>
    <title>guess numbers</title>
    <url>/2020/06/07/guess-numbers/</url>
    <content><![CDATA[<h1 id="guess-numbers-game"><a href="#guess-numbers-game" class="headerlink" title="guess numbers game"></a>guess numbers game</h1><p>The computer will choose 4 numbers randomly and in a random order. You can input to guess the numbers and the order.</p>
<p>If your numbers/number are/is included but not the same order, you will get “o”; if your numbers/number are/is the same order as the original one, you will get “△”‘</p>
<p>Computer will record the times you guess.</p>
<p>If you want to stop and know the answer, please input “0000”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#instruction</span></span><br><span class="line">print(<span class="string">'The computer will choose 4 numbers randomly and in a random order. You can input to guess the numbers and the order.'</span></span><br><span class="line">      <span class="string">'If your numbers/number are/is included but not the same order, you will get "o"; if your numbers/number are/is the same order as the original one, you will get "△"'</span></span><br><span class="line">     <span class="string">'Computer will record the times you guess.'</span></span><br><span class="line">     <span class="string">'If you want to stop and know the answer, please input "0000"'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#create the number</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">a=str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">b=str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line"><span class="keyword">while</span> a==b:</span><br><span class="line">    b=str(random.randint(<span class="number">0</span>,<span class="number">9</span>)) <span class="comment">#if the numbers are the same, change the number</span></span><br><span class="line">    </span><br><span class="line">c=str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line"><span class="keyword">while</span> a==c <span class="keyword">or</span> b==c:</span><br><span class="line">    c=str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    d=str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line">    <span class="keyword">if</span>  a!=d <span class="keyword">and</span> b!=d <span class="keyword">and</span> c!=d:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">#input the guessing number and start to record the times</span></span><br><span class="line">number=list(input())</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#check whether the numbers are in or have the same order</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> number[<span class="number">0</span>] == <span class="string">'0'</span> <span class="keyword">and</span> number[<span class="number">1</span>] == <span class="string">'0'</span> <span class="keyword">and</span> number[<span class="number">2</span>] == <span class="string">'0'</span> <span class="keyword">and</span> number[<span class="number">3</span>] == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> a == number[<span class="number">0</span>] <span class="keyword">and</span> b == number[<span class="number">1</span>] <span class="keyword">and</span> c == number[<span class="number">2</span>] <span class="keyword">and</span> d == number[<span class="number">3</span>]:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    triangle=<span class="number">0</span></span><br><span class="line">    circle=<span class="number">0</span>      <span class="comment">#if it is right, jump out of the loop</span></span><br><span class="line">    <span class="keyword">if</span> a <span class="keyword">in</span> number:</span><br><span class="line">        <span class="keyword">if</span> a == number[<span class="number">0</span>]:</span><br><span class="line">            triangle=triangle+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            circle=circle+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> b <span class="keyword">in</span> number:</span><br><span class="line">        <span class="keyword">if</span> b == number[<span class="number">1</span>]:</span><br><span class="line">            triangle=triangle+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            circle=circle+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">in</span> number:</span><br><span class="line">        <span class="keyword">if</span> c == number[<span class="number">2</span>]:</span><br><span class="line">            triangle=triangle+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            circle=circle+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> d <span class="keyword">in</span> number:</span><br><span class="line">        <span class="keyword">if</span> d == number[<span class="number">3</span>]:</span><br><span class="line">            triangle=triangle+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            circle=circle+<span class="number">1</span></span><br><span class="line">    <span class="comment">#show the result and allow the user to input again        </span></span><br><span class="line">    print(<span class="string">'△：'</span>,triangle,<span class="string">'o：'</span>,circle)</span><br><span class="line">    number=list(input())</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line"><span class="comment">#show the right one and the times used</span></span><br><span class="line"><span class="keyword">if</span> number[<span class="number">0</span>] == <span class="string">'0'</span> <span class="keyword">and</span> number[<span class="number">1</span>] == <span class="string">'0'</span> <span class="keyword">and</span> number[<span class="number">2</span>] == <span class="string">'0'</span> <span class="keyword">and</span> number[<span class="number">3</span>] == <span class="string">'0'</span>:</span><br><span class="line">    print(<span class="string">'sorry, it is'</span>,a,b,c,d,<span class="string">', you used'</span>,i,<span class="string">'times.'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'you are right, it is'</span>,a,b,c,d,<span class="string">', you used'</span>,i,<span class="string">'times.'</span>)</span><br></pre></td></tr></table></figure>

<p>example:</p>
<p>The computer will choose 4 numbers randomly and in a random order. You can input to guess the numbers and the order.If your numbers/number are/is included but not the same order, you will get “o”; if your numbers/number are/is the same order as the original one, you will get “△”Computer will record the times you guess.<br>1234<br>△： 0 o： 1<br>5678<br>△： 0 o： 3<br>6781<br>△： 0 o： 2<br>8762<br>△： 1 o： 2<br>2567<br>you are right, it is 2 5 6 7 , you used 5 times.</p>
]]></content>
      <categories>
        <category>daily programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>VB小游戏game</title>
    <url>/2020/05/05/VB%E5%B0%8F%E6%B8%B8%E6%88%8Fgame/</url>
    <content><![CDATA[<h1 id="VB-simple-game-model"><a href="#VB-simple-game-model" class="headerlink" title="VB simple game model"></a>VB simple game model</h1><p>the flying bird</p>
<p> <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1588693844451&di=f1e5e33b94ba3a3aa019b3a8d1a81129&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180714%2F0f2f7766a90a4614b3c1783e3cad10b5.jpeg" alt="点击查看源网页"> </p>
<p>Although I can’ t copy the picture, showing the way how to do it is a good way to both understand the game and learn the programming language.</p>
<h2 id="the-code"><a href="#the-code" class="headerlink" title="the code"></a>the code</h2><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Command1_Click()   <span class="comment">'press botton</span></span><br><span class="line">    Label1.Top = Label1.Top - <span class="number">700</span> <span class="comment">'700 is the distance the 'bird' moves for once</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Command2_Click()   <span class="comment">'reset botton</span></span><br><span class="line">Label1.Left = <span class="number">375</span> <span class="comment">'let the 'bird' get to the original position</span></span><br><span class="line">Label1.Top = <span class="number">2280</span></span><br><span class="line">Timer1.Enabled = <span class="literal">True</span>   <span class="comment">'reset the timer and the command</span></span><br><span class="line">Command1.Enabled = <span class="literal">True</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Timer1_Timer()     <span class="comment">'timer</span></span><br><span class="line">Label1.Top = Label1.Top + <span class="number">40</span>   <span class="comment">'40 is the speed it falls</span></span><br><span class="line">Label1.Left = Label1.Left + <span class="number">20</span>  <span class="comment">'20 is the speed it moves forward</span></span><br><span class="line"><span class="keyword">If</span> Label1.Left &gt; Text1.Left - Label1.Width <span class="keyword">And</span> Label1.Left &lt; Text1.Left + Text1.Width <span class="keyword">Then</span>  <span class="comment">'when the 'bird' moves into the given area</span></span><br><span class="line">    <span class="keyword">If</span> Label1.Top &lt; Text1.Height <span class="keyword">Or</span> Label1.Top &gt; Text2.Top <span class="keyword">Then</span> <span class="comment">'when the 'bird' touch the wall</span></span><br><span class="line">        Timer1.Enabled = <span class="literal">False</span></span><br><span class="line">        Command1.Enabled = <span class="literal">False</span></span><br><span class="line">        Print <span class="string">"you lost!"</span>  <span class="comment">'stop all, and show that you have lost</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">If</span> Label1.Left &gt; Text1.Left + Text1.Width + <span class="number">1000</span> <span class="keyword">Then</span>   <span class="comment">'when the 'bird' get to the final point</span></span><br><span class="line">    Print <span class="string">"you win!"</span>     <span class="comment">'show you win and stop all</span></span><br><span class="line">    Timer1.Enabled = <span class="literal">False</span></span><br><span class="line">    Command1.Enabled = <span class="literal">False</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>the situation that the ‘bird’ touch the wall:</p>
<p><img src="https://s1.ax1x.com/2020/05/05/Ykpgf0.png" alt="Ykpgf0.png"></p>
<p>the situation that the ‘bird’ get to the final point:</p>
<p><img src="https://s1.ax1x.com/2020/05/05/YkCaqg.png" alt="YkCaqg.png"></p>
<h2 id="showing-as-video"><a href="#showing-as-video" class="headerlink" title="showing as video"></a>showing as video</h2><video id="video" controls="" preload="none">
    <source id="mp4" src="C:/Users/Administrator/Desktop/作业/vb/鸟.mp4" type="video/mp4">
</video>
]]></content>
      <categories>
        <category>daily programming</category>
      </categories>
      <tags>
        <tag>-VB</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy2</title>
    <url>/2020/07/08/numpy2/</url>
    <content><![CDATA[<h1 id="NumPy-Introduction-2"><a href="#NumPy-Introduction-2" class="headerlink" title="NumPy Introduction 2"></a>NumPy Introduction 2</h1><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">np.random.seed(<span class="number">0</span>)  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_reciprocals</span><span class="params">(values)</span>:</span>  </span><br><span class="line">    output = np.empty(len(values))  <span class="comment">#set up a new array</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(len(values)):  </span><br><span class="line">		output[i] = <span class="number">1.0</span> / values[i]  <span class="comment">#put 1/value into it</span></span><br><span class="line">		<span class="keyword">return</span> output  </span><br><span class="line">values = np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=<span class="number">5</span>)  </span><br><span class="line">compute_reciprocals(values)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:array([ 0.16666667, 1. , 0.25 , 0.25 , 0.125 ])</span></span><br></pre></td></tr></table></figure>

<p><strong>A faster way</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">big_array = np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=<span class="number">1000000</span>)  </span><br><span class="line">%timeit compute_reciprocals(big_array)</span><br><span class="line"><span class="comment">#out:1 loop, best of 3: 2.91 s per loop</span></span><br></pre></td></tr></table></figure>

<p>prove:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(compute_reciprocals(values)) </span><br><span class="line">print(<span class="number">1.0</span> / values)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">[ 0.16666667 1. 0.25 0.25 0.125 ] </span></span><br><span class="line"><span class="string">[ 0.16666667 1. 0.25 0.25 0.125 ]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>*arange calculation</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">5</span>) / np.arange(<span class="number">1</span>, <span class="number">6</span>)  <span class="comment">#[0 1 2 3 4] [1 2 3 4 5]</span></span><br><span class="line"><span class="comment">#Out: array([ 0. , 0.5 , 0.66666667, 0.75 , 0.8 ])</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>))  </span><br><span class="line"><span class="number">2</span> ** x  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: array([[ 1, 2, 4], </span></span><br><span class="line"><span class="string">			[ 8, 16, 32],  </span></span><br><span class="line"><span class="string">			[ 64, 128, 256]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>add,subtract,multiply,divide</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">4</span>)  </span><br><span class="line">print(<span class="string">"x ="</span>, x)  </span><br><span class="line">print(<span class="string">"x + 5 ="</span>, x + <span class="number">5</span>)  </span><br><span class="line">print(<span class="string">"x - 5 ="</span>, x - <span class="number">5</span>)  </span><br><span class="line">print(<span class="string">"x * 2 ="</span>, x * <span class="number">2</span>)  </span><br><span class="line">print(<span class="string">"x / 2 ="</span>, x / <span class="number">2</span>)  </span><br><span class="line">print(<span class="string">"x // 2 ="</span>, x // <span class="number">2</span>) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">x = [0 1 2 3]  </span></span><br><span class="line"><span class="string">x + 5 = [5 6 7 8]  </span></span><br><span class="line"><span class="string">x - 5 = [-5 -4 -3 -2]  </span></span><br><span class="line"><span class="string">x * 2 = [0 2 4 6]  </span></span><br><span class="line"><span class="string">x / 2 = [ 0. 0.5 1. 1.5]  </span></span><br><span class="line"><span class="string">x // 2 = [0 0 1 1]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>others</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"-x = "</span>, -x)  </span><br><span class="line">print(<span class="string">"x ** 2 = "</span>, x ** <span class="number">2</span>)  </span><br><span class="line">print(<span class="string">"x % 2 = "</span>, x % <span class="number">2</span>)  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">-x = [ 0 -1 -2 -3]  </span></span><br><span class="line"><span class="string">x ** 2 = [0 1 4 9]  </span></span><br><span class="line"><span class="string">x % 2 = [0 1 0 1]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>get them together</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> -(<span class="number">0.5</span>*x + <span class="number">1</span>) ** <span class="number">2</span>  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: array([-1. , -2.25, -4. , -6.25])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>.add()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.add(x, <span class="number">2</span>)  <span class="comment">#add 2 to every value</span></span><br><span class="line"><span class="comment">#Out: array([2, 3, 4, 5])</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>运算符</th>
<th>对应的通用函数</th>
<th>描述</th>
<th>example</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>np.add</td>
<td>加法运算</td>
<td>（即 1 + 1 = 2）</td>
</tr>
<tr>
<td>-</td>
<td>np.subtract</td>
<td>减法运算</td>
<td>（即 3 - 2 = 1）</td>
</tr>
<tr>
<td>-</td>
<td>np.negative</td>
<td>负数运算</td>
<td>（即 -2）</td>
</tr>
<tr>
<td>*</td>
<td>np.multiply</td>
<td>乘法运算</td>
<td>（即 2 * 3 = 6）</td>
</tr>
<tr>
<td>/</td>
<td>np.divide</td>
<td>除法运算</td>
<td>（即 3 / 2 = 1.5）</td>
</tr>
<tr>
<td>//</td>
<td>np.floor_divide</td>
<td>地板除法运算</td>
<td>（flfloor division，即 3 // 2 = 1）</td>
</tr>
<tr>
<td>**</td>
<td>np.power</td>
<td>指数运算</td>
<td>（即 2 ** 3 = 8）</td>
</tr>
<tr>
<td>%</td>
<td>np.mod</td>
<td>模 / 余数</td>
<td>（即 9 % 4 = 1）</td>
</tr>
</tbody></table>
<p> abs()   absolute()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])  </span><br><span class="line">abs(x)  </span><br><span class="line"><span class="comment">#Out: array([2, 1, 0, 1, 2])</span></span><br><span class="line"></span><br><span class="line">np.absolute(x) </span><br><span class="line"><span class="comment">#Out[12]: array([2, 1, 0, 1, 2])</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta = np.linspace(<span class="number">0</span>, np.pi, <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line"> print(<span class="string">"theta = "</span>, theta) </span><br><span class="line"> print(<span class="string">"sin(theta) = "</span>, np.sin(theta)) </span><br><span class="line"> print(<span class="string">"cos(theta) = "</span>, np.cos(theta)) </span><br><span class="line"> print(<span class="string">"tan(theta) = "</span>, np.tan(theta))</span><br><span class="line">  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">theta = [ 0. 1.57079633 3.14159265] </span></span><br><span class="line"><span class="string">sin(theta) = [ 0.00000000e+00 1.00000000e+00 1.22464680e-16] </span></span><br><span class="line"><span class="string">cos(theta) = [ 1.00000000e+00 6.12323400e-17 -1.00000000e+00] </span></span><br><span class="line"><span class="string">tan(theta) = [ 0.00000000e+00 1.63312394e+16 -1.22464680e-16]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>reverse:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]  </span><br><span class="line">print(<span class="string">"x = "</span>, x)  </span><br><span class="line">print(<span class="string">"arcsin(x) = "</span>, np.arcsin(x))  </span><br><span class="line">print(<span class="string">"arccos(x) = "</span>, np.arccos(x))  </span><br><span class="line">print(<span class="string">"arctan(x) = "</span>, np.arctan(x))  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">x = [-1, 0, 1]  </span></span><br><span class="line"><span class="string">arcsin(x) = [-1.57079633 0. 1.57079633]  </span></span><br><span class="line"><span class="string">arccos(x) = [ 3.14159265 1.57079633 0. ]  </span></span><br><span class="line"><span class="string">arctan(x) = [-0.78539816 0. 0.78539816]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>log and ln</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  </span><br><span class="line">print(<span class="string">"x ="</span>, x)  </span><br><span class="line">print(<span class="string">"e^x ="</span>, np.exp(x))  </span><br><span class="line">print(<span class="string">"2^x ="</span>, np.exp2(x))  </span><br><span class="line">print(<span class="string">"3^x ="</span>, np.power(<span class="number">3</span>, x))  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">x = [1, 2, 3]  </span></span><br><span class="line"><span class="string">e^x = [ 2.71828183 7.3890561 20.08553692]  </span></span><br><span class="line"><span class="string">2^x = [ 2. 4. 8.]  </span></span><br><span class="line"><span class="string">3^x = [ 3 9 27]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>] </span><br><span class="line"> print(<span class="string">"x ="</span>, x) </span><br><span class="line"> print(<span class="string">"ln(x) ="</span>, np.log(x)) </span><br><span class="line"> print(<span class="string">"log2(x) ="</span>, np.log2(x)) </span><br><span class="line"> print(<span class="string">"log10(x) ="</span>, np.log10(x)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">x = [1, 2, 4, 10] </span></span><br><span class="line"><span class="string">ln(x) = [ 0. 0.69314718 1.38629436 2.30258509] </span></span><br><span class="line"><span class="string">log2(x) = [ 0. 1. 2. 3.32192809] </span></span><br><span class="line"><span class="string">log10(x) = [ 0. 0.30103 0.60205999 1. ]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#It can be very accurate</span></span><br><span class="line">x = [<span class="number">0</span>, <span class="number">0.001</span>, <span class="number">0.01</span>, <span class="number">0.1</span>] </span><br><span class="line">print(<span class="string">"exp(x) - 1 ="</span>, np.expm1(x)) </span><br><span class="line">print(<span class="string">"log(1 + x) ="</span>, np.log1p(x)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">exp(x) - 1 = [ 0. 0.0010005 0.01005017 0.10517092] </span></span><br><span class="line"><span class="string">log(1 + x) = [ 0. 0.0009995 0.00995033 0.09531018]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>



<h2 id="more-advanced"><a href="#more-advanced" class="headerlink" title="more advanced"></a>more advanced</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">5</span>)  <span class="comment">#from 0 to 4</span></span><br><span class="line">y = np.empty(<span class="number">5</span>)  </span><br><span class="line">np.multiply(x, <span class="number">10</span>, out=y)  </span><br><span class="line">print(y)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#[ 0. 10. 20. 30. 40.]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y = np.zeros(<span class="number">10</span>) </span><br><span class="line">np.power(<span class="number">2</span>, x, out=y[::<span class="number">2</span>]) </span><br><span class="line">print(y) </span><br><span class="line"></span><br><span class="line"><span class="comment">#[ 1. 0. 2. 0. 4. 0. 8. 0. 16. 0.]</span></span><br><span class="line"></span><br><span class="line">y[::<span class="number">2</span>] = <span class="number">2</span> ** x</span><br><span class="line">y</span><br><span class="line"><span class="comment">#array([ 1.,  0.,  2.,  0.,  4.,  0.,  8.,  0., 16.,  0.])</span></span><br></pre></td></tr></table></figure>

<p>reduce()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)  <span class="comment">#[1 2 3 4 5]</span></span><br><span class="line">np.add.reduce(x)  <span class="comment">#1+2+3+4+5</span></span><br><span class="line"><span class="comment">#Out: 15</span></span><br><span class="line"></span><br><span class="line">np.add.accumulate(x) <span class="comment">#show all the steps</span></span><br><span class="line"><span class="comment">#Out: array([ 1, 3, 6, 10, 15]) </span></span><br><span class="line">np.multiply.accumulate(x) </span><br><span class="line"><span class="comment">#Out: array([ 1, 2, 6, 24, 120])</span></span><br></pre></td></tr></table></figure>

<p>outer()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)  </span><br><span class="line">np.multiply.outer(x, x)  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Out: </span></span><br><span class="line"><span class="string">array([[ 1, 2, 3, 4, 5],  </span></span><br><span class="line"><span class="string">	   [ 2, 4, 6, 8, 10],  </span></span><br><span class="line"><span class="string">       [ 3, 6, 9, 12, 15],  </span></span><br><span class="line"><span class="string">       [ 4, 8, 12, 16, 20],  </span></span><br><span class="line"><span class="string">       [ 5, 10, 15, 20, 25]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>sum() </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = np.random.random(<span class="number">100</span>)  </span><br><span class="line">sum(L)  </span><br><span class="line"><span class="comment">#Out: 55.61209116604941</span></span><br><span class="line"></span><br><span class="line">np.sum(L) </span><br><span class="line"><span class="comment">#Out: 55.612091166049424</span></span><br></pre></td></tr></table></figure>

<p>*faster way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">big_array = np.random.rand(<span class="number">1000000</span>)  </span><br><span class="line">%timeit sum(big_array)  </span><br><span class="line">%timeit np.sum(big_array)</span><br></pre></td></tr></table></figure>

<p>python has its own function min and max, but numpy’s is faster.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.min(big_array), np.max(big_array)  </span><br><span class="line"><span class="comment">#Out: (1.1717128136634614e-06, 0.9999976784968716)</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M = np.random.random((<span class="number">3</span>, <span class="number">4</span>))  </span><br><span class="line">print(M)  </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">[[ 0.8967576 0.03783739 0.75952519 0.06682827]  </span></span><br><span class="line"><span class="string"> [ 0.8354065 0.99196818 0.19544769 0.43447084]  </span></span><br><span class="line"><span class="string"> [ 0.66859307 0.15038721 0.37911423 0.6687194]]</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line"></span><br><span class="line">M.sum()</span><br><span class="line"><span class="comment">#Out: 6.0850555667307118</span></span><br><span class="line"></span><br><span class="line">M.min(axis=<span class="number">0</span>) <span class="comment">#perpendicular is 0</span></span><br><span class="line"><span class="comment">#Out: array([ 0.66859307, 0.03783739, 0.19544769, 0.06682827])</span></span><br><span class="line"></span><br><span class="line">M.max(axis=<span class="number">1</span>) </span><br><span class="line"><span class="comment">#Out: array([ 0.8967576 , 0.99196818, 0.6687194])</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/07/11/Ul4gOS.png" alt="Ul4gOS.png"></p>
<p>example: (USA presidents’ height)</p>
<p>data: (.csv)</p>
<p>order,name,height(cm)  </p>
<p>1,George Washington,189  </p>
<p>2,John Adams,170  </p>
<p>3,Thomas Jefferson,189</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment">#pandas is used to deal with csv files</span></span><br><span class="line">data = pd.read_csv(<span class="string">'C:\\Users\\huawei\\ipy\\president_heights.csv'</span>) </span><br><span class="line">heights = np.array(data[<span class="string">'height(cm)'</span>])  <span class="comment">#put height in array</span></span><br><span class="line">print(heights)</span><br><span class="line"></span><br><span class="line"><span class="comment">#[189 170 189 163 183 171 185 168 173 183 173 173 175 178 183 193 178 173 174 183 183 168 170 178 182 180 183 178 182 188 175 179 183 193 182 183 177 185 188 188 182 185]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#find different factors in the data</span></span><br><span class="line">print(<span class="string">"Mean height: "</span>, heights.mean()) </span><br><span class="line">print(<span class="string">"Standard deviation:"</span>, heights.std()) </span><br><span class="line">print(<span class="string">"Minimum height: "</span>, heights.min()) </span><br><span class="line">print(<span class="string">"Maximum height: "</span>, heights.max())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Mean height: 179.738095238 </span></span><br><span class="line"><span class="string">Standard deviation: 6.93184344275 </span></span><br><span class="line"><span class="string">Minimum height: 163 </span></span><br><span class="line"><span class="string">Maximum height: 193</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"25th percentile: "</span>, np.percentile(heights, <span class="number">25</span>)) </span><br><span class="line">print(<span class="string">"Median: "</span>, np.median(heights)) </span><br><span class="line">print(<span class="string">"75th percentile: "</span>, np.percentile(heights, <span class="number">75</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">25th percentile:  174.25</span></span><br><span class="line"><span class="string">Median:  182.0</span></span><br><span class="line"><span class="string">75th percentile:  183.0</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">%matplotlib inline  <span class="comment">#matplotlib is used to plot graghs</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn; seaborn.set() <span class="comment"># 设置绘图风格</span></span><br><span class="line">plt.hist(heights) <span class="comment">#choose histogram to plot heights</span></span><br><span class="line">plt.title(<span class="string">'Height Distribution of US Presidents'</span>) <span class="comment">#print the title</span></span><br><span class="line">plt.xlabel(<span class="string">'height (cm)'</span>)  <span class="comment">#print labels</span></span><br><span class="line">plt.ylabel(<span class="string">'number'</span>);</span><br></pre></td></tr></table></figure>

<img src="https://s1.ax1x.com/2020/07/11/UlH7lR.png" alt="UlH7lR.png" style="zoom:150%;" />]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-NumPy</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习7</title>
    <url>/2020/07/05/python%E5%AD%A6%E4%B9%A07/</url>
    <content><![CDATA[<h1 id="Python-Import-files"><a href="#Python-Import-files" class="headerlink" title="Python-Import files"></a>Python-Import files</h1><p>Every file has own path to access.</p>
<p>e.g.</p>
<p><img src="https://s1.ax1x.com/2020/07/05/UpDp6K.png" alt="UpDp6K.png"></p>
<p>C:\Users\asweigart\Documents\project.docx</p>
<p>When comes to OS X and Linux, we use / to separate.</p>
<p><em>在 OS X 上，它们表示为新的文件夹，在/Volumes 文件夹下。在 Linux 上，它们表示为新的</em> </p>
<p><em>文件夹，在/mnt（”mount”）文件夹下。同时也要注意，虽然文件夹名称和文件名在</em> </p>
<p><em>Windows 和 OS X 上是不区分大小写的，但在 Linux 上是区分大小写的。</em></p>
<h2 id="import-files"><a href="#import-files" class="headerlink" title="import files"></a>import files</h2><h3 id="os-path-join"><a href="#os-path-join" class="headerlink" title="os.path.join()"></a>os.path.join()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.path.join(<span class="string">'usr'</span>, <span class="string">'bin'</span>, <span class="string">'spam'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:'usr\\bin\\spam'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myFiles = [<span class="string">'accounts.txt'</span>, <span class="string">'details.csv'</span>, <span class="string">'invite.docx'</span>]</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> myFiles: <span class="comment">#add diferent filename after the same route as they are in the same folder</span></span><br><span class="line">	print(os.path.join(<span class="string">'C:\\Users\\asweigart'</span>, filename)) </span><br><span class="line"></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#C:\Users\asweigart\accounts.txt </span></span><br><span class="line"><span class="comment">#C:\Users\asweigart\details.csv </span></span><br><span class="line"><span class="comment">#C:\Users\asweigart\invite.docx</span></span><br></pre></td></tr></table></figure>

<h3 id="current-folder"><a href="#current-folder" class="headerlink" title="current folder:"></a>current folder:</h3><p>getcwd() : check which folder is the process in</p>
<p>chdir() :change the current folder (the folder must exist)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getcwd()</span><br><span class="line"><span class="comment">#out:'C:\\Python34' </span></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">'C:\\Windows\\System32'</span>)</span><br><span class="line">os.getcwd()</span><br><span class="line"><span class="comment">#out:'C:\\Windows\\System32'</span></span><br></pre></td></tr></table></figure>

<h3 id="create-new-folder-os-makedirs"><a href="#create-new-folder-os-makedirs" class="headerlink" title="create new folder:os.makedirs()"></a>create new folder:os.makedirs()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.makedirs(<span class="string">'C:\\delicious\\walnut\\waffles'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="AP-absolute-path-and-relative-path"><a href="#AP-absolute-path-and-relative-path" class="headerlink" title="AP(absolute path)  and relative path"></a>AP(absolute path)  and relative path</h3><p><img src="https://s1.ax1x.com/2020/07/05/UpyNct.png" alt="UpyNct.png"></p>
<h3 id="processing-with-absolute-path-and-relative-path"><a href="#processing-with-absolute-path-and-relative-path" class="headerlink" title="processing with absolute path  and relative path"></a>processing with absolute path  and relative path</h3><p>os.path.abspath():show the absolute path(if something in the blanket,add it to the end of the absolute path, which means to open one folder or file in the original folder)</p>
<p>os.path.isabs():check wether it is absolute path</p>
<p>os.path.relpath(path,start):find the relative path from the start</p>
<p>os.path.dirname(path):return the string after the last \</p>
<p>os.path.split():separate the dirname and the basename by the last \</p>
<p>split() can also be used</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.abspath(<span class="string">'.'</span>)</span><br><span class="line"><span class="comment">#out:'C:\\Python34' </span></span><br><span class="line"></span><br><span class="line">os.path.abspath(<span class="string">'.\\Scripts'</span>)</span><br><span class="line"><span class="comment">#out:'C:\\Python34\\Scripts' </span></span><br><span class="line"></span><br><span class="line">os.path.isabs(<span class="string">'.'</span>)</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"></span><br><span class="line">os.path.isabs(os.path.abspath(<span class="string">'.'</span>))</span><br><span class="line"><span class="comment">#out:True</span></span><br><span class="line"></span><br><span class="line">os.path.relpath(<span class="string">'C:\\Windows'</span>, <span class="string">'C:\\'</span>)</span><br><span class="line"><span class="comment">#out:'Windows'</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">'C:\\Windows\\System32\\calc.exe'</span></span><br><span class="line">os.path.basename(path)</span><br><span class="line"><span class="comment">#out:'calc.exe'</span></span><br><span class="line"></span><br><span class="line">calcFilePath = <span class="string">'C:\\Windows\\System32\\calc.exe'</span></span><br><span class="line">os.path.split(calcFilePath)</span><br><span class="line"><span class="comment">#out:('C:\\Windows\\System32', 'calc.exe')</span></span><br><span class="line"></span><br><span class="line">(os.path.dirname(calcFilePath), os.path.basename(calcFilePath))</span><br><span class="line"><span class="comment">#out:('C:\\Windows\\System32', 'calc.exe')</span></span><br><span class="line"></span><br><span class="line">calcFilePath.split(os.path.sep)</span><br><span class="line"><span class="comment">#out:['C:', 'Windows', 'System32', 'calc.exe']</span></span><br><span class="line"></span><br><span class="line"><span class="string">'/usr/bin'</span>.split(os.path.sep)</span><br><span class="line"><span class="comment">#out:['', 'usr', 'bin']</span></span><br></pre></td></tr></table></figure>

<p>others:</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">os.path.abspath(path)</td>
<td align="left">返回绝对路径</td>
</tr>
<tr>
<td align="left">os.path.basename(path)</td>
<td align="left">返回文件名</td>
</tr>
<tr>
<td align="left">os.path.commonprefix(list)</td>
<td align="left">返回list(多个路径)中，所有path共有的最长的路径</td>
</tr>
<tr>
<td align="left">os.path.dirname(path)</td>
<td align="left">返回文件路径</td>
</tr>
<tr>
<td align="left">os.path.exists(path)</td>
<td align="left">如果路径 path 存在，返回 True；如果路径 path 不存在，返回 False。</td>
</tr>
<tr>
<td align="left">os.path.lexists</td>
<td align="left">路径存在则返回True,路径损坏也返回True</td>
</tr>
<tr>
<td align="left">os.path.expanduser(path)</td>
<td align="left">把path中包含的”<del>“和”</del>user”转换成用户目录</td>
</tr>
<tr>
<td align="left">os.path.expandvars(path)</td>
<td align="left">根据环境变量的值替换path中包含的”$name”和”${name}”</td>
</tr>
<tr>
<td align="left">os.path.getatime(path)</td>
<td align="left">返回最近访问时间（浮点型秒数）</td>
</tr>
<tr>
<td align="left">os.path.getmtime(path)</td>
<td align="left">返回最近文件修改时间</td>
</tr>
<tr>
<td align="left">os.path.getctime(path)</td>
<td align="left">返回文件 path 创建时间</td>
</tr>
<tr>
<td align="left">os.path.getsize(path)</td>
<td align="left">返回文件大小，如果文件不存在就返回错误</td>
</tr>
<tr>
<td align="left">os.path.isabs(path)</td>
<td align="left">判断是否为绝对路径</td>
</tr>
<tr>
<td align="left">os.path.isfile(path)</td>
<td align="left">判断路径是否为文件</td>
</tr>
<tr>
<td align="left">os.path.isdir(path)</td>
<td align="left">判断路径是否为目录</td>
</tr>
<tr>
<td align="left">os.path.islink(path)</td>
<td align="left">判断路径是否为链接</td>
</tr>
<tr>
<td align="left">os.path.ismount(path)</td>
<td align="left">判断路径是否为挂载点</td>
</tr>
<tr>
<td align="left">os.path.join(path1[, path2[, …]])</td>
<td align="left">把目录和文件名合成一个路径</td>
</tr>
<tr>
<td align="left">os.path.normcase(path)</td>
<td align="left">转换path的大小写和斜杠</td>
</tr>
<tr>
<td align="left">os.path.normpath(path)</td>
<td align="left">规范path字符串形式</td>
</tr>
<tr>
<td align="left">os.path.realpath(path)</td>
<td align="left">返回path的真实路径</td>
</tr>
<tr>
<td align="left">os.path.relpath(path[, start])</td>
<td align="left">从start开始计算相对路径</td>
</tr>
<tr>
<td align="left">os.path.samefile(path1, path2)</td>
<td align="left">判断目录或文件是否相同</td>
</tr>
<tr>
<td align="left">os.path.sameopenfile(fp1, fp2)</td>
<td align="left">判断fp1和fp2是否指向同一文件</td>
</tr>
<tr>
<td align="left">os.path.samestat(stat1, stat2)</td>
<td align="left">判断stat tuple stat1和stat2是否指向同一个文件</td>
</tr>
<tr>
<td align="left">os.path.split(path)</td>
<td align="left">把路径分割成 dirname 和 basename，返回一个元组</td>
</tr>
<tr>
<td align="left">os.path.splitdrive(path)</td>
<td align="left">一般用在 windows 下，返回驱动器名和路径组成的元组</td>
</tr>
<tr>
<td align="left">os.path.splitext(path)</td>
<td align="left">分割路径，返回路径名和文件扩展名的元组</td>
</tr>
<tr>
<td align="left">os.path.splitunc(path)</td>
<td align="left">把路径分割为加载点与文件</td>
</tr>
<tr>
<td align="left">os.path.walk(path, visit, arg)</td>
<td align="left">遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数</td>
</tr>
<tr>
<td align="left">os.path.supports_unicode_filenames</td>
<td align="left">设置是否支持unicode路径名</td>
</tr>
</tbody></table>
<h3 id="check-the-size-and-name"><a href="#check-the-size-and-name" class="headerlink" title="check the size and name"></a>check the size and name</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.getsize(<span class="string">'C:\\Windows\\System32\\calc.exe'</span>)</span><br><span class="line"><span class="comment">#out:776192</span></span><br><span class="line"></span><br><span class="line">os.listdir(<span class="string">'C:\\Windows\\System32'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:['0409', '12520437.cpx', '12520850.cpx', '5U877.ax', 'aaclient.dll', 'xwtpdui.dll', 'xwtpw32.dll', 'zh-CN', 'zh-HK', 'zh-TW', 'zipfldr.dll']</span></span><br><span class="line"></span><br><span class="line">totalSize = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">'C:\\Windows\\System32'</span>):</span><br><span class="line">totalSize = totalSize + os.path.getsize(os.path.join(<span class="string">'C:\\Windows\\System32'</span>, filename))</span><br><span class="line">print(totalSize)</span><br><span class="line"><span class="comment">#out:1117846456</span></span><br></pre></td></tr></table></figure>



<p>os.path.exists(path): check whether it exists</p>
<p>os.path.isfile(path): check whether it is a file</p>
<p>os.path.isdir(path): check whether it is a folder</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.exists(<span class="string">'C:\\Windows'</span>)</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"></span><br><span class="line">os.path.exists(<span class="string">'C:\\some_made_up_folder'</span>)</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"></span><br><span class="line">os.path.isdir(<span class="string">'C:\\Windows\\System32'</span>)</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"></span><br><span class="line">os.path.isfile(<span class="string">'C:\\Windows\\System32'</span>)</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"></span><br><span class="line">os.path.isdir(<span class="string">'C:\\Windows\\System32\\calc.exe'</span>)</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"></span><br><span class="line">os.path.isfile(<span class="string">'C:\\Windows\\System32\\calc.exe'</span>)</span><br><span class="line"><span class="comment">#out:True</span></span><br></pre></td></tr></table></figure>



<h2 id="read-the-file"><a href="#read-the-file" class="headerlink" title="read the file"></a>read the file</h2><h3 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h3><p>windows:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">helloFile = open(<span class="string">'C:\\Users\\your_home_folder\\hello.txt'</span>)</span><br></pre></td></tr></table></figure>

<p>OS X</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">helloFile = open(<span class="string">'/Users/your_home_folder/hello.txt'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">helloContent = helloFile.read()</span><br><span class="line">helloContent</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:'Hello world!'</span></span><br></pre></td></tr></table></figure>



<p>When, in disgrace with fortune and men’s eyes, </p>
<p>I all alone beweep my outcast state,</p>
<p>And trouble deaf heaven with my bootless cries, </p>
<p>And look upon myself and curse my fate,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sonnetFile = open(<span class="string">'sonnet29.txt'</span>)</span><br><span class="line">sonnetFile.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#[When, in disgrace with fortune and men's eyes,\n', ' I all alone beweep my outcast #state,\n', And trouble deaf heaven with my bootless cries,\n', And look upon myself and #curse my fate,']</span></span><br></pre></td></tr></table></figure>

<h3 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">baconFile = open(<span class="string">'bacon.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">baconFile.write(<span class="string">'Hello world!\n'</span>)</span><br><span class="line"><span class="comment">#out:13 </span></span><br><span class="line"></span><br><span class="line">baconFile.close()</span><br><span class="line">baconFile = open(<span class="string">'bacon.txt'</span>, <span class="string">'a'</span>)</span><br><span class="line">baconFile.write(<span class="string">'Bacon is not a vegetable.'</span>)</span><br><span class="line"><span class="comment">#out:25 </span></span><br><span class="line"></span><br><span class="line">baconFile.close()</span><br><span class="line">baconFile = open(<span class="string">'bacon.txt'</span>)</span><br><span class="line">content = baconFile.read()</span><br><span class="line">baconFile.close()</span><br><span class="line">print(content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#Hello world! </span></span><br><span class="line"><span class="comment">#Bacon is not a vegetable.</span></span><br></pre></td></tr></table></figure>

<h2 id="shelve"><a href="#shelve" class="headerlink" title="shelve"></a>shelve</h2><p>在交互环境下 under interactive environment</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shelve</span><br><span class="line">shelfFile = shelve.open(<span class="string">'mydata'</span>)</span><br><span class="line">cats = [<span class="string">'Zophie'</span>, <span class="string">'Pooka'</span>, <span class="string">'Simon'</span>]</span><br><span class="line">shelfFile[<span class="string">'cats'</span>] = cats</span><br><span class="line">shelfFile.close()<span class="comment">#don't forget to close the file</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shelfFile = shelve.open(<span class="string">'mydata'</span>)</span><br><span class="line">type(shelfFile)</span><br><span class="line"><span class="comment">#out:&lt;class 'shelve.DbfilenameShelf'&gt; </span></span><br><span class="line"></span><br><span class="line">shelfFile[<span class="string">'cats'</span>]</span><br><span class="line"><span class="comment">#out:['Zophie', 'Pooka', 'Simon'] </span></span><br><span class="line"></span><br><span class="line">shelfFile.close()</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shelfFile = shelve.open(<span class="string">'mydata'</span>)</span><br><span class="line">list(shelfFile.keys())</span><br><span class="line"><span class="comment">#out:['cats'] </span></span><br><span class="line"></span><br><span class="line">list(shelfFile.values())</span><br><span class="line"><span class="comment">#out:[['Zophie', 'Pooka', 'Simon']] </span></span><br><span class="line"></span><br><span class="line">shelfFile.close()</span><br></pre></td></tr></table></figure>



<h2 id="pprint-pformat"><a href="#pprint-pformat" class="headerlink" title="pprint.pformat()"></a>pprint.pformat()</h2><p>to show the content but not print</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line">cats = [&#123;<span class="string">'name'</span>: <span class="string">'Zophie'</span>, <span class="string">'desc'</span>: <span class="string">'chubby'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'Pooka'</span>, <span class="string">'desc'</span>: <span class="string">'fluffy'</span>&#125;]</span><br><span class="line">pprint.pformat(cats)</span><br><span class="line"><span class="comment">#out:"[&#123;'desc': 'chubby', 'name': 'Zophie'&#125;, &#123;'desc': 'fluffy', 'name': 'Pooka'&#125;]" </span></span><br><span class="line"></span><br><span class="line">fileObj = open(<span class="string">'myCats.py'</span>, <span class="string">'w'</span>)</span><br><span class="line">fileObj.write(<span class="string">'cats = '</span> + pprint.pformat(cats) + <span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#out:83 </span></span><br><span class="line"></span><br><span class="line">fileObj.close()</span><br></pre></td></tr></table></figure>

<p>import can be used toimport files</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> myCats</span><br><span class="line">myCats.cats</span><br><span class="line"><span class="comment">#out:[&#123;'name': 'Zophie', 'desc': 'chubby'&#125;, &#123;'name': 'Pooka', 'desc': 'fluffy'&#125;] </span></span><br><span class="line"></span><br><span class="line">myCats.cats[<span class="number">0</span>]</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Zophie'</span>, <span class="string">'desc'</span>: <span class="string">'chubby'</span>&#125; </span><br><span class="line">myCats.cats[<span class="number">0</span>][<span class="string">'name'</span>]</span><br><span class="line"><span class="comment">#out:'Zophie'</span></span><br></pre></td></tr></table></figure>



<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>You want to create 35 different quiz files for 35 students tocheck their knowledge about sates and their capitals in America. Every quiz should include 50 multiple choice questions, and they should be in different order.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># randomQuizGenerator.py - Creates quizzes with questions and answers in</span></span><br><span class="line"><span class="comment"># random order, along with the answer key.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># The quiz data. Keys are states and values are their capitals.</span></span><br><span class="line"></span><br><span class="line">capitals = &#123;<span class="string">'Alabama'</span>: <span class="string">'Montgomery'</span>, <span class="string">'Alaska'</span>: <span class="string">'Juneau'</span>, <span class="string">'Arizona'</span>: <span class="string">'Phoenix'</span>,</span><br><span class="line"><span class="string">'Arkansas'</span>: <span class="string">'Little Rock'</span>, <span class="string">'California'</span>: <span class="string">'Sacramento'</span>, <span class="string">'Colorado'</span>: <span class="string">'Denver'</span>,</span><br><span class="line"><span class="string">'Connecticut'</span>: <span class="string">'Hartford'</span>, <span class="string">'Delaware'</span>: <span class="string">'Dover'</span>, <span class="string">'Florida'</span>: <span class="string">'Tallahassee'</span>,</span><br><span class="line"><span class="string">'Georgia'</span>: <span class="string">'Atlanta'</span>, <span class="string">'Hawaii'</span>: <span class="string">'Honolulu'</span>, <span class="string">'Idaho'</span>: <span class="string">'Boise'</span>, <span class="string">'Illinois'</span>:</span><br><span class="line"><span class="string">'Springfield'</span>, <span class="string">'Indiana'</span>: <span class="string">'Indianapolis'</span>, <span class="string">'Iowa'</span>: <span class="string">'Des Moines'</span>, <span class="string">'Kansas'</span>:</span><br><span class="line"><span class="string">'Topeka'</span>, <span class="string">'Kentucky'</span>: <span class="string">'Frankfort'</span>, <span class="string">'Louisiana'</span>: <span class="string">'Baton Rouge'</span>, <span class="string">'Maine'</span>:</span><br><span class="line"><span class="string">'Augusta'</span>, <span class="string">'Maryland'</span>: <span class="string">'Annapolis'</span>, <span class="string">'Massachusetts'</span>: <span class="string">'Boston'</span>, <span class="string">'Michigan'</span>:</span><br><span class="line"><span class="string">'Lansing'</span>, <span class="string">'Minnesota'</span>: <span class="string">'Saint Paul'</span>, <span class="string">'Mississippi'</span>: <span class="string">'Jackson'</span>, <span class="string">'Missouri'</span>:</span><br><span class="line"><span class="string">'Jefferson City'</span>, <span class="string">'Montana'</span>: <span class="string">'Helena'</span>, <span class="string">'Nebraska'</span>: <span class="string">'Lincoln'</span>, <span class="string">'Nevada'</span>:</span><br><span class="line"><span class="string">'Carson City'</span>, <span class="string">'New Hampshire'</span>: <span class="string">'Concord'</span>, <span class="string">'New Jersey'</span>: <span class="string">'Trenton'</span>, </span><br><span class="line"><span class="string">'New Mexico'</span>: <span class="string">'Santa Fe'</span>, <span class="string">'New York'</span>: <span class="string">'Albany'</span>, <span class="string">'North Carolina'</span>: <span class="string">'Raleigh'</span>,</span><br><span class="line"><span class="string">'North Dakota'</span>: <span class="string">'Bismarck'</span>, <span class="string">'Ohio'</span>: <span class="string">'Columbus'</span>, <span class="string">'Oklahoma'</span>: <span class="string">'Oklahoma City'</span>,</span><br><span class="line"><span class="string">'Oregon'</span>: <span class="string">'Salem'</span>, <span class="string">'Pennsylvania'</span>: <span class="string">'Harrisburg'</span>, <span class="string">'Rhode Island'</span>: <span class="string">'Providence'</span>,</span><br><span class="line"><span class="string">'South Carolina'</span>: <span class="string">'Columbia'</span>, <span class="string">'South Dakota'</span>: <span class="string">'Pierre'</span>, <span class="string">'Tennessee'</span>:</span><br><span class="line"><span class="string">'Nashville'</span>, <span class="string">'Texas'</span>: <span class="string">'Austin'</span>, <span class="string">'Utah'</span>: <span class="string">'Salt Lake City'</span>, <span class="string">'Vermont'</span>:</span><br><span class="line"><span class="string">'Montpelier'</span>, <span class="string">'Virginia'</span>: <span class="string">'Richmond'</span>, <span class="string">'Washington'</span>: <span class="string">'Olympia'</span>, </span><br><span class="line"><span class="string">'West Virginia'</span>: <span class="string">'Charleston'</span>, <span class="string">'Wisconsin'</span>: <span class="string">'Madison'</span>, <span class="string">'Wyoming'</span>: <span class="string">'Cheyenne'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate 35 quiz files.</span></span><br><span class="line"><span class="keyword">for</span> quizNum <span class="keyword">in</span> range(<span class="number">35</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Create the quiz and answer key files.</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Write out the header for the quiz.</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Shuffle the order of the states.</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Loop through all 50 states, making a question for each.</span></span><br><span class="line"><span class="comment"># Create the quiz and answer key files.</span></span><br><span class="line"></span><br><span class="line">    quizFile = open(<span class="string">'capitalsquiz%s.txt'</span> % (quizNum + <span class="number">1</span>), <span class="string">'w'</span>)</span><br><span class="line">    answerKeyFile = open(<span class="string">'capitalsquiz_answers%s.txt'</span> % (quizNum + <span class="number">1</span>), <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write out the header for the quiz.</span></span><br><span class="line"></span><br><span class="line">    quizFile.write(<span class="string">'Name:\n\nDate:\n\nPeriod:\n\n'</span>)</span><br><span class="line">    quizFile.write((<span class="string">' '</span> * <span class="number">20</span>) + <span class="string">'State Capitals Quiz (Form %s)'</span> % (quizNum + <span class="number">1</span>))</span><br><span class="line">    quizFile.write(<span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shuffle the order of the states.</span></span><br><span class="line"></span><br><span class="line">    states = list(capitals.keys())</span><br><span class="line">    random.shuffle(states)<span class="comment">#change the order of the list in random</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Loop through all 50 states, making a question for each.</span></span><br><span class="line"><span class="comment"># Loop through all 50 states, making a question for each.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> questionNum <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get right and wrong answers.</span></span><br><span class="line"></span><br><span class="line">        correctAnswer = capitals[states[questionNum]]</span><br><span class="line">        wrongAnswers = list(capitals.values())</span><br><span class="line">        <span class="keyword">del</span> wrongAnswers[wrongAnswers.index(correctAnswer)] <span class="comment">#delete the correct answer</span></span><br><span class="line">        wrongAnswers = random.sample(wrongAnswers, <span class="number">3</span>) <span class="comment">#get three of them randomly</span></span><br><span class="line">        answerOptions = wrongAnswers + [correctAnswer]</span><br><span class="line">        random.shuffle(answerOptions) <span class="comment">#change the order of the options randomly</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Write the question and answer options to the quiz file.</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Write the answer key to a file.</span></span><br><span class="line"><span class="comment"># Loop through all 50 states, making a question for each.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> questionNum <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write the question and the answer options to the quiz file.</span></span><br><span class="line"></span><br><span class="line">        quizFile.write(<span class="string">'%s. What is the capital of %s?\n'</span> % (questionNum + <span class="number">1</span>,states[questionNum]))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            quizFile.write(<span class="string">' %s. %s\n'</span> % (<span class="string">'ABCD'</span>[i], answerOptions[i]))</span><br><span class="line">        quizFile.write(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write the answer key to a file.</span></span><br><span class="line"></span><br><span class="line">        answerKeyFile.write(<span class="string">'%s. %s\n'</span> % (questionNum + <span class="number">1</span>, <span class="string">'ABCD'</span>[answerOptions.index(correctAnswer)]))</span><br><span class="line">    quizFile.close()</span><br><span class="line">    answerKeyFile.close()</span><br></pre></td></tr></table></figure>

<p>Name: </p>
<p>Date: </p>
<p>Period: </p>
<p>​                    State Capitals Quiz (Form 1) </p>
<ol>
<li>What is the capital of West Virginia? </li>
</ol>
<p>A. Hartford </p>
<p>B. Santa Fe </p>
<p>C. Harrisburg </p>
<p>D. Charleston </p>
<ol start="2">
<li>What is the capital of Colorado? </li>
</ol>
<p>A. Raleigh </p>
<p>B. Harrisburg </p>
<p>C. Denver </p>
<p>D. Lincoln</p>
<p>… …</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy1</title>
    <url>/2020/02/21/numpy1/</url>
    <content><![CDATA[<h1 id="NumPy-Introduction-1"><a href="#NumPy-Introduction-1" class="headerlink" title="NumPy Introduction 1"></a>NumPy Introduction 1</h1><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="First-step-Import-numpy"><a href="#First-step-Import-numpy" class="headerlink" title="First step: Import numpy"></a>First step: Import numpy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Multi-dimensions-array"><a href="#Multi-dimensions-array" class="headerlink" title="Multi-dimensions array"></a>Multi-dimensions array</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array([range(i,i+<span class="number">3</span>)<span class="keyword">for</span> i <span class="keyword">in</span>[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">Out[<span class="number">2</span>]:array([[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">              [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">              [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Creating-repeated-array"><a href="#Creating-repeated-array" class="headerlink" title="Creating repeated array"></a>Creating repeated array</h3><h4 id="create-an-array-with-length10-and-all-the-values-are-0"><a href="#create-an-array-with-length10-and-all-the-values-are-0" class="headerlink" title="create an array with length10,and all the values are 0."></a>create an array with length10,and all the values are 0.</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>,dtype=int)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">3</span>]:array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-which-is-3x5-type-is-float-and-all-the-values-are-1"><a href="#create-an-array-which-is-3x5-type-is-float-and-all-the-values-are-1" class="headerlink" title="create an array which is 3x5,type is float,and all the values are 1."></a>create an array which is 3x5,type is float,and all the values are 1.</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones((<span class="number">3</span>,<span class="number">5</span>),dtype=float)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">5</span>]:array([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">              [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">              [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-which-is-3x5-and-all-the-values-are-3-14"><a href="#create-an-array-which-is-3x5-and-all-the-values-are-3-14" class="headerlink" title="create an array which is 3x5,and all the values are 3.14."></a>create an array which is 3x5,and all the values are 3.14.</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.full((<span class="number">3</span>,<span class="number">5</span>),<span class="number">3.14</span>)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">6</span>]:array([[<span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>],</span><br><span class="line">              [<span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>],</span><br><span class="line">              [<span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">3.14</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-with-5-numbers-from-0-1-uniformly"><a href="#create-an-array-with-5-numbers-from-0-1-uniformly" class="headerlink" title="create an array with 5 numbers from 0~1 uniformly"></a>create an array with 5 numbers from 0~1 uniformly</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">7</span>]:array([<span class="number">0.</span>  , <span class="number">0.25</span>, <span class="number">0.5</span> , <span class="number">0.75</span>, <span class="number">1.</span>  ])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-which-is-3x3-with-random-number"><a href="#create-an-array-which-is-3x3-with-random-number" class="headerlink" title="create an array which is 3x3 with random number"></a>create an array which is 3x3 with random number</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.random((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"> <span class="comment"># 创建一个3×3的、均值为0、方差为1的</span></span><br><span class="line"> <span class="comment"># 正态分布的随机数数组</span></span><br><span class="line">Out[<span class="number">8</span>]:array([[<span class="number">0.47224148</span>, <span class="number">0.23125945</span>, <span class="number">0.95002522</span>],</span><br><span class="line">              [<span class="number">0.09738343</span>, <span class="number">0.88182864</span>, <span class="number">0.38184937</span>],</span><br><span class="line">              [<span class="number">0.99395495</span>, <span class="number">0.42838151</span>, <span class="number">0.92674988</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-which-is-3x3-with-random-normal-number-from-0-1"><a href="#create-an-array-which-is-3x3-with-random-normal-number-from-0-1" class="headerlink" title="create an array which is 3x3 with random normal number from 0~1"></a>create an array which is 3x3 with random normal number from 0~1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.normal(<span class="number">0</span>,<span class="number">1</span>,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">Out[<span class="number">9</span>]:array([[<span class="number">-0.55049464</span>, <span class="number">-0.35293695</span>,  <span class="number">0.75417556</span>],</span><br><span class="line">              [<span class="number">-0.63125306</span>,  <span class="number">0.31639634</span>, <span class="number">-2.24209815</span>],</span><br><span class="line">              [ <span class="number">1.44175974</span>, <span class="number">-0.69736733</span>,  <span class="number">0.30666294</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-which-is-3x3-with-random-integer-between1and-10"><a href="#create-an-array-which-is-3x3-with-random-integer-between1and-10" class="headerlink" title="create an array which is 3x3 with random integer between1and 10"></a>create an array which is 3x3 with random integer between1and 10</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">Out[<span class="number">10</span>]:array([[<span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>],</span><br><span class="line">               [<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">               [<span class="number">6</span>, <span class="number">3</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-which-is-4x4-its-numbers-have-only-one-digit"><a href="#create-an-array-which-is-4x4-its-numbers-have-only-one-digit" class="headerlink" title="create an array which is 4x4 ,its numbers have only one digit"></a>create an array which is 4x4 ,its numbers have only one digit</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.eye(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">11</span>]:array([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">               [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">               [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">               [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="create-an-array-with-3-random-number-from-the-storage"><a href="#create-an-array-with-3-random-number-from-the-storage" class="headerlink" title="create an array with 3 random number from the storage"></a>create an array with 3 random number from the storage</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.empty(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">12</span>]:array([<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>])</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="The-factors-of-array"><a href="#The-factors-of-array" class="headerlink" title="The factors of array"></a>The factors of array</h3><h4 id="ndim-the-dimension-shape-and-size"><a href="#ndim-the-dimension-shape-and-size" class="headerlink" title="ndim(the dimension),shape and size"></a>ndim(the dimension),shape and size</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">x1=np.random.randint(<span class="number">10</span>,size=<span class="number">6</span>)</span><br><span class="line">x2=np.random.randint(<span class="number">10</span>,size=(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">x3=np.random.randint(<span class="number">10</span>,size=(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">x1.ndim</span><br><span class="line"></span><br><span class="line">Out[<span class="number">13</span>]:<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">print(<span class="string">'x3 ndim: '</span>, x3.ndim)</span><br><span class="line">print(<span class="string">'x3 shape: '</span>, x3.shape)</span><br><span class="line">print(<span class="string">'x3.size: '</span> , x3.size)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">14</span>]:x3 ndim:  <span class="number">3</span></span><br><span class="line">        x3 shape:  (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        x3.size:  <span class="number">60</span></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">print(<span class="string">'dtype: '</span>,x3.dtype)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">15</span>]:dtype:  int32</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Get-one-element"><a href="#Get-one-element" class="headerlink" title="Get one element"></a>Get one element</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1</span><br><span class="line"></span><br><span class="line">Out[<span class="number">16</span>]:array([<span class="number">5</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x1[0]</span><br><span class="line"></span><br><span class="line">Out[17]:5</span><br></pre></td></tr></table></figure>

<h4 id="From-the-end"><a href="#From-the-end" class="headerlink" title="From the end"></a>From the end</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">Out[<span class="number">18</span>]:<span class="number">9</span></span><br></pre></td></tr></table></figure>

<h4 id="Use-the-comma"><a href="#Use-the-comma" class="headerlink" title="Use the comma"></a>Use the comma</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x2</span><br><span class="line"></span><br><span class="line">Out[<span class="number">19</span>]:array([[<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">               [<span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>],</span><br><span class="line">               [<span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>]])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x2[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">Out[<span class="number">20</span>]:<span class="number">3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x2[<span class="number">2</span>,<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">Out[<span class="number">21</span>]:<span class="number">7</span></span><br></pre></td></tr></table></figure>

<h4 id="Change-element-x1-（-5-0-3-3-7-9-）"><a href="#Change-element-x1-（-5-0-3-3-7-9-）" class="headerlink" title="Change element(x1=（[5, 0, 3, 3, 7, 9]）)"></a>Change element(x1=（[5, 0, 3, 3, 7, 9]）)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1[<span class="number">0</span>]=<span class="number">3.14</span></span><br><span class="line">x1</span><br><span class="line"></span><br><span class="line">Out[<span class="number">22</span>]:array([<span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>]) <span class="comment">#float-&gt;integer</span></span><br></pre></td></tr></table></figure>

<h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)  </span><br><span class="line">x  </span><br><span class="line"><span class="comment">#Out: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])  </span></span><br><span class="line"></span><br><span class="line">x[:<span class="number">5</span>] <span class="comment"># 前五个元素 </span></span><br><span class="line"><span class="comment">#Out:array([0, 1, 2, 3, 4])  </span></span><br><span class="line"></span><br><span class="line">x[<span class="number">5</span>:] <span class="comment"># 索引五之后的元素 </span></span><br><span class="line"><span class="comment">#Out:array([5, 6, 7, 8, 9])  </span></span><br><span class="line"></span><br><span class="line">x[<span class="number">4</span>:<span class="number">7</span>] <span class="comment"># 中间的子数组 </span></span><br><span class="line"><span class="comment">#Out:array([4, 5, 6])  </span></span><br><span class="line"></span><br><span class="line">x[::<span class="number">2</span>] <span class="comment"># 每隔一个元素 </span></span><br><span class="line"><span class="comment">#Out:array([0, 2, 4, 6, 8])  </span></span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>::<span class="number">2</span>] <span class="comment"># 每隔一个元素，从索引1开始 </span></span><br><span class="line"><span class="comment">#Out:array([1, 3, 5, 7, 9])</span></span><br></pre></td></tr></table></figure>

<p>multi-dimension:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x2=array([[<span class="number">12</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>],  </span><br><span class="line">		  [ <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>],  </span><br><span class="line">          [ <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>]])  </span><br><span class="line">x2[:<span class="number">2</span>, :<span class="number">3</span>] <span class="comment"># 两行，三列 </span></span><br><span class="line"><span class="comment">#Out:array([[12, 5, 2],  </span></span><br><span class="line"><span class="comment">#			[ 7, 6, 8]])  </span></span><br><span class="line"></span><br><span class="line">x2[:<span class="number">3</span>, ::<span class="number">2</span>] <span class="comment"># 所有行，每隔一列 </span></span><br><span class="line"><span class="comment">#Out:array([[12, 2],  </span></span><br><span class="line"><span class="comment">#   		[ 7, 8],  </span></span><br><span class="line"><span class="comment">#    		[ 1, 7]])</span></span><br><span class="line"></span><br><span class="line">x2[::<span class="number">-1</span>, ::<span class="number">-1</span>] </span><br><span class="line"><span class="comment">#Out:array([[ 7, 7, 6, 1], </span></span><br><span class="line"><span class="comment">#		    [ 8, 8, 6, 7], </span></span><br><span class="line"><span class="comment">#           [ 4, 2, 5, 12]])</span></span><br></pre></td></tr></table></figure>

<h4 id="copy"><a href="#copy" class="headerlink" title=".copy()"></a>.copy()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x2_sub_copy = x2[:<span class="number">2</span>, :<span class="number">2</span>].copy()  </span><br><span class="line">print(x2_sub_copy)  </span><br><span class="line"><span class="comment">#out:[[99 5]  </span></span><br><span class="line"><span class="comment">#     [ 7 6]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x2_sub_copy[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">42</span> </span><br><span class="line">print(x2_sub_copy) </span><br><span class="line"><span class="comment">#out:[[42 5] </span></span><br><span class="line"><span class="comment">#     [ 7 6]]</span></span><br></pre></td></tr></table></figure>

<h4 id="reshape"><a href="#reshape" class="headerlink" title=".reshape()"></a>.reshape()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grid = np.arange(<span class="number">1</span>, <span class="number">10</span>).reshape((<span class="number">3</span>, <span class="number">3</span>))  </span><br><span class="line">print(grid)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#out:[[1 2 3]  </span></span><br><span class="line"><span class="comment">#     [4 5 6]  </span></span><br><span class="line"><span class="comment">#     [7 8 9]]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 通过变形获得的行向量 </span></span><br><span class="line">x.reshape((<span class="number">1</span>, <span class="number">3</span>))  </span><br><span class="line"><span class="comment">#Out:array([[1, 2, 3]])  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过newaxis获得的行向量 </span></span><br><span class="line">x[np.newaxis, :]  </span><br><span class="line"><span class="comment">#Out:array([[1, 2, 3]])  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过变形获得的列向量 </span></span><br><span class="line">x.reshape((<span class="number">3</span>, <span class="number">1</span>))  </span><br><span class="line"><span class="comment">#Out:array([[1],  </span></span><br><span class="line"><span class="comment">#			[2],  </span></span><br><span class="line"><span class="comment">#			[3]])  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过newaxis获得的列向量 </span></span><br><span class="line">x[:, np.newaxis]  </span><br><span class="line"><span class="comment">#Out:array([[1],  </span></span><br><span class="line"><span class="comment">#			[2],  </span></span><br><span class="line"><span class="comment">#			[3]])</span></span><br></pre></td></tr></table></figure>

<h4 id="concatenate-combine-arrays"><a href="#concatenate-combine-arrays" class="headerlink" title=".concatenate() (combine arrays)"></a>.concatenate() (combine arrays)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  </span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])  </span><br><span class="line">np.concatenate([x, y])  </span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:array([1, 2, 3, 3, 2, 1])</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = [<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>]  </span><br><span class="line">print(np.concatenate([x, y, z]))  </span><br><span class="line"><span class="comment">#out:[ 1 2 3 3 2 1 99 99 99] </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#two dimension</span></span><br><span class="line">grid = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],  </span><br><span class="line">				 [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])  </span><br><span class="line"><span class="comment"># 沿着第一个轴拼接 </span></span><br><span class="line">np.concatenate([grid, grid])  </span><br><span class="line"><span class="comment">#Out:array([[1, 2, 3],  </span></span><br><span class="line"><span class="comment">#			[4, 5, 6],  </span></span><br><span class="line"><span class="comment">#			[1, 2, 3],  </span></span><br><span class="line"><span class="comment">#			[4, 5, 6]])  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 沿着第二个轴拼接（从0开始索引） </span></span><br><span class="line">np.concatenate([grid, grid], axis=<span class="number">1</span>)  </span><br><span class="line"><span class="comment">#out: array([[1, 2, 3, 1, 2, 3],  </span></span><br><span class="line"><span class="comment">#            [4, 5, 6, 4, 5, 6]]) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#np.vstack（垂直栈）和 np.hstack（水平栈）</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  </span><br><span class="line">grid = np.array([[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>],  </span><br><span class="line">				 [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]])  </span><br><span class="line"><span class="comment"># 垂直栈数组 </span></span><br><span class="line">np.vstack([x, grid])  </span><br><span class="line"><span class="comment">#Out:array([[1, 2, 3],  </span></span><br><span class="line"><span class="comment">#           [9, 8, 7],  </span></span><br><span class="line"><span class="comment">#           [6, 5, 4]])   </span></span><br><span class="line"></span><br><span class="line">y = np.array([[<span class="number">99</span>],  </span><br><span class="line">              [<span class="number">99</span>]])  </span><br><span class="line">np.hstack([grid, y])  </span><br><span class="line"><span class="comment">#out: array([[ 9, 8, 7, 99],  </span></span><br><span class="line"><span class="comment">#            [ 6, 5, 4, 99]])</span></span><br></pre></td></tr></table></figure>

<h4 id="split"><a href="#split" class="headerlink" title=".split()"></a>.split()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]  </span><br><span class="line">x1, x2, x3 = np.split(x, [<span class="number">3</span>, <span class="number">5</span>])  </span><br><span class="line">print(x1, x2, x3)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#out:[1 2 3] [99 99] [3 2 1]</span></span><br></pre></td></tr></table></figure>

<p>np.hsplit &amp; np.vsplit</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grid = np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>))  </span><br><span class="line">grid  </span><br><span class="line"><span class="comment">#Out:array([[ 0, 1, 2, 3],  </span></span><br><span class="line"><span class="comment">#			[ 4, 5, 6, 7],  </span></span><br><span class="line"><span class="comment">#			[ 8, 9, 10, 11],  </span></span><br><span class="line"><span class="comment">#			[12, 13, 14, 15]])  </span></span><br><span class="line"></span><br><span class="line">upper, lower = np.vsplit(grid, [<span class="number">2</span>])  </span><br><span class="line">print(upper)  </span><br><span class="line">print(lower)  </span><br><span class="line"><span class="comment">#out:[[0 1 2 3]  </span></span><br><span class="line"><span class="comment">#	  [4 5 6 7]]  </span></span><br><span class="line"><span class="comment">#	 [[ 8 9 10 11]  </span></span><br><span class="line"><span class="comment">#     [12 13 14 15]]  </span></span><br><span class="line"></span><br><span class="line">left, right = np.hsplit(grid, [<span class="number">2</span>])  </span><br><span class="line">print(left)  </span><br><span class="line">print(right)  </span><br><span class="line"><span class="comment">#out:[[ 0 1]  </span></span><br><span class="line"><span class="comment">#     [ 4 5]  </span></span><br><span class="line"><span class="comment">#     [ 8 9]  </span></span><br><span class="line"><span class="comment">#     [12 13]]  </span></span><br><span class="line"><span class="comment">#    [[ 2 3]  </span></span><br><span class="line"><span class="comment">#     [ 6 7]  </span></span><br><span class="line"><span class="comment">#     [10 11]  </span></span><br><span class="line"><span class="comment">#     [14 15]]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-NumPy</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习5</title>
    <url>/2020/06/26/python%E5%AD%A6%E4%B9%A05/</url>
    <content><![CDATA[<h1 id="Python-dictionary"><a href="#Python-dictionary" class="headerlink" title="Python-dictionary"></a>Python-dictionary</h1><h2 id="dictionary-and-import"><a href="#dictionary-and-import" class="headerlink" title="dictionary and import"></a>dictionary and import</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=&#123;<span class="string">'name'</span>:<span class="string">'Zophie'</span>,<span class="string">'age'</span>:<span class="number">7</span>&#125;</span><br><span class="line">spam[<span class="string">'name'</span>]</span><br><span class="line"><span class="comment">#out:'Zophie'</span></span><br></pre></td></tr></table></figure>

<p><code>values</code>&amp;<code>keys</code>&amp;<code>items</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=&#123;<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'age'</span>:<span class="string">'42'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> spam.values():</span><br><span class="line">    print(v)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> spam.keys():</span><br><span class="line">    print(k)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> spam.items():</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>out:</p>
<p>red </p>
<p>42 </p>
<p>color </p>
<p>age </p>
<p>(‘color’, ‘red’)</p>
<p>(‘age’, ‘42’)</p>
<h2 id="use-the-factor-in-dictionary-to-form-list"><a href="#use-the-factor-in-dictionary-to-form-list" class="headerlink" title="use the factor in dictionary to form list"></a>use the factor in dictionary to form list</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=&#123;<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'age'</span>:<span class="string">'42'</span>&#125;</span><br><span class="line">list(spam.keys())</span><br><span class="line"><span class="comment">#out:['color', 'age']</span></span><br></pre></td></tr></table></figure>



<p>use the factors in <code>items</code> at the same time</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=&#123;<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'age'</span>:<span class="string">'42'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> spam.items():</span><br><span class="line">    print(<span class="string">'Key: '</span>+k+<span class="string">' Value: '</span>+str(v))</span><br></pre></td></tr></table></figure>

<p>out:</p>
<p>Key: color Value: red<br>Key: age Value: 42</p>
<p>use the <code>keys</code> to find the <code>values</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers=&#123;<span class="string">'one'</span>:<span class="number">1</span>,<span class="string">'two'</span>:<span class="number">2</span>,<span class="string">'three'</span>:<span class="number">3</span>&#125;</span><br><span class="line">print(numbers[<span class="string">'two'</span>])</span><br><span class="line"><span class="comment">#out:2</span></span><br></pre></td></tr></table></figure>

<p>but <code>values</code> can’t be used to find <code>keys</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers=&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">print</span> (numbers[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">KeyError                                  Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-1-d797711df7b1&gt; in &lt;module&gt;</span><br><span class="line">      1 numbers&#x3D;&#123;&quot;one&quot;: 1, &quot;two&quot;: 2&#125;</span><br><span class="line">----&gt; 2 print (numbers[2])</span><br><span class="line"></span><br><span class="line">KeyError: 2</span><br></pre></td></tr></table></figure>

<p>use with <code>sort</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers=&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: [<span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>], <span class="string">"three"</span>: <span class="number">3</span>&#125;</span><br><span class="line">x = (numbers[<span class="string">"two"</span>])</span><br><span class="line">print(x)</span><br><span class="line">x.sort()</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<p>out:</p>
<p>[4, 6, 3]<br>[3, 4, 6]</p>
<p>use <code>pop</code> to delete items</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers=&#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>:<span class="number">4</span>&#125;</span><br><span class="line">numbers.pop(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (numbers)</span><br><span class="line"><span class="comment">#out:&#123;1: 2&#125;</span></span><br></pre></td></tr></table></figure>



<p>use <code>get</code> to get  values</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=&#123;<span class="string">"uno"</span>:[<span class="string">"one"</span>,<span class="number">1</span>],<span class="string">"dos"</span>:[<span class="string">"two"</span>,<span class="number">2</span>]&#125;</span><br><span class="line">d.get(<span class="string">"uno"</span>)</span><br><span class="line"><span class="comment">#out:['one', 1]</span></span><br></pre></td></tr></table></figure>

<p>if there is no key </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=&#123;<span class="string">"uno"</span>:[<span class="string">"one"</span>,<span class="number">1</span>],<span class="string">"dos"</span>:[<span class="string">"two"</span>,<span class="number">2</span>]&#125;</span><br><span class="line"><span class="keyword">print</span> (d.get(<span class="number">3</span>,<span class="string">'cat'</span>))</span><br><span class="line"><span class="comment">#out:cat</span></span><br></pre></td></tr></table></figure>



<p>example for dictionary</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k=input()</span><br><span class="line">v1=int(input())</span><br><span class="line">v2=int(input())</span><br><span class="line">v3=int(input())</span><br><span class="line">d=&#123;k:(v1,v2,v3)&#125;</span><br><span class="line"><span class="keyword">if</span> v1&gt;=<span class="number">78</span> <span class="keyword">and</span> v2&gt;=<span class="number">78</span> <span class="keyword">and</span> v3&gt;=<span class="number">78</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> d.items():</span><br><span class="line">        print(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'not pass'</span>)</span><br></pre></td></tr></table></figure>

<p>out:</p>
<table>
<thead>
<tr>
<th>Jim</th>
<th>Jim</th>
</tr>
</thead>
<tbody><tr>
<td>78</td>
<td>90</td>
</tr>
<tr>
<td>76</td>
<td>78</td>
</tr>
<tr>
<td>90</td>
<td>80</td>
</tr>
<tr>
<td>not pass</td>
<td>(‘Jim’, (90, 78, 80))</td>
</tr>
</tbody></table>
<h2 id="use-setdefault-to-add-items-to-dictionary"><a href="#use-setdefault-to-add-items-to-dictionary" class="headerlink" title="use setdefault to add items to dictionary"></a>use <code>setdefault</code> to add items to dictionary</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam=&#123;<span class="string">'name'</span>:<span class="string">'Pooka'</span>,<span class="string">'age'</span>:<span class="number">5</span>&#125;</span><br><span class="line">spam.setdefault(<span class="string">'color'</span>,<span class="string">'black'</span>)</span><br><span class="line">spam</span><br><span class="line">spam.setdefault(<span class="string">'color'</span>,<span class="string">'white'</span>)</span><br><span class="line">spam</span><br></pre></td></tr></table></figure>

<p>out: {‘name’: ‘Pooka’, ‘age’: 5, ‘color’: ‘black’}</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message=<span class="string">'It was a bright cold day in April,and the clocks were striking thirtheen.'</span></span><br><span class="line">count=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> message:</span><br><span class="line">    count.setdefault(character,<span class="number">0</span>)<span class="comment">#creat the items for counting the number</span></span><br><span class="line">    count[character]=count[character]+<span class="number">1</span><span class="comment">#add one more to count</span></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure>

<p>out: {‘I’: 1, ‘t’: 6, ‘ ‘: 12, ‘w’: 2, ‘a’: 4, ‘s’: 3, ‘b’: 1, ‘r’: 5, ‘i’: 6, ‘g’: 2, ‘h’: 4, ‘c’: 3, ‘o’: 2, ‘l’: 3, ‘d’: 3, ‘y’: 1, ‘n’: 4, ‘A’: 1, ‘p’: 1, ‘,’: 1, ‘e’: 5, ‘k’: 2, ‘.’: 1}</p>
<p>use of <code>pprint</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line">score=[<span class="number">90</span>,<span class="number">89</span>,<span class="number">80</span>,<span class="number">77</span>,<span class="number">89</span>,<span class="number">77</span>,<span class="number">90</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">76</span>,<span class="number">89</span>]</span><br><span class="line">result=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> score:</span><br><span class="line">    <span class="keyword">if</span> i&gt;=<span class="number">90</span>:</span><br><span class="line">        result.setdefault(<span class="string">'A*'</span>,<span class="number">0</span>) <span class="comment">#if there is no value, the value is 0</span></span><br><span class="line">        result[<span class="string">'A*'</span>]=result[<span class="string">'A*'</span>]+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i&gt;=<span class="number">75</span> <span class="keyword">and</span> i&lt;<span class="number">90</span>:</span><br><span class="line">        result.setdefault(<span class="string">'A'</span>,<span class="number">0</span>)</span><br><span class="line">        result[<span class="string">'A'</span>]=result[<span class="string">'A'</span>]+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i&gt;=<span class="number">60</span> <span class="keyword">and</span> i&lt;<span class="number">75</span>:</span><br><span class="line">        result.setdefault(<span class="string">'B'</span>,<span class="number">0</span>)</span><br><span class="line">        result[<span class="string">'B'</span>]=result[<span class="string">'B'</span>]+<span class="number">1</span></span><br><span class="line">pprint.pprint(result)</span><br></pre></td></tr></table></figure>

<p>out:{‘A’: 9, ‘A*’: 2}</p>
<h2 id="used-in-game"><a href="#used-in-game" class="headerlink" title="used in game:"></a>used in game:</h2><p>create background</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theBoard = &#123;<span class="string">'top-L'</span>: <span class="string">' '</span>, <span class="string">'top-M'</span>: <span class="string">' '</span>, <span class="string">'top-R'</span>: <span class="string">' '</span>,</span><br><span class="line">            <span class="string">'mid-L'</span>: <span class="string">' '</span>, <span class="string">'mid-M'</span>: <span class="string">' '</span>, <span class="string">'mid-R'</span>: <span class="string">' '</span>,</span><br><span class="line">            <span class="string">'low-L'</span>: <span class="string">' '</span>, <span class="string">'low-M'</span>: <span class="string">' '</span>, <span class="string">'low-R'</span>: <span class="string">' '</span>&#125; <span class="comment">#create dictionary to record the value</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printBoard</span><span class="params">(board)</span>:</span></span><br><span class="line">    print(board[<span class="string">'top-L'</span>] + <span class="string">'|'</span> + board[<span class="string">'top-M'</span>] + <span class="string">'|'</span> + board[<span class="string">'top-R'</span>]) <span class="comment">#put the records in the background</span></span><br><span class="line">    print(<span class="string">'-+-+-'</span>) <span class="comment">#separate the rows</span></span><br><span class="line">    print(board[<span class="string">'mid-L'</span>] + <span class="string">'|'</span> + board[<span class="string">'mid-M'</span>] + <span class="string">'|'</span> + board[<span class="string">'mid-R'</span>])</span><br><span class="line">    print(<span class="string">'-+-+-'</span>)</span><br><span class="line">    print(board[<span class="string">'low-L'</span>] + <span class="string">'|'</span> + board[<span class="string">'low-M'</span>] + <span class="string">'|'</span> + board[<span class="string">'low-R'</span>])</span><br><span class="line">printBoard(theBoard)</span><br></pre></td></tr></table></figure>

<p> | |<br>-+-+-<br> | |<br>-+-+-<br> | | </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theBoard = &#123;<span class="string">'top-L'</span>: <span class="string">'O'</span>, <span class="string">'top-M'</span>: <span class="string">'O'</span>, <span class="string">'top-R'</span>: <span class="string">'O'</span>, <span class="string">'mid-L'</span>: <span class="string">'X'</span>, <span class="string">'mid-M'</span>:</span><br><span class="line"><span class="string">'X'</span>, <span class="string">'mid-R'</span>: <span class="string">' '</span>, <span class="string">'low-L'</span>: <span class="string">' '</span>, <span class="string">'low-M'</span>: <span class="string">' '</span>, <span class="string">'low-R'</span>: <span class="string">'X'</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printBoard</span><span class="params">(board)</span>:</span> <span class="comment">#make the printing processes a function</span></span><br><span class="line">    print(board[<span class="string">'top-L'</span>] + <span class="string">'|'</span> + board[<span class="string">'top-M'</span>] + <span class="string">'|'</span> + board[<span class="string">'top-R'</span>])</span><br><span class="line">    print(<span class="string">'-+-+-'</span>)</span><br><span class="line">    print(board[<span class="string">'mid-L'</span>] + <span class="string">'|'</span> + board[<span class="string">'mid-M'</span>] + <span class="string">'|'</span> + board[<span class="string">'mid-R'</span>])</span><br><span class="line">    print(<span class="string">'-+-+-'</span>)</span><br><span class="line">    print(board[<span class="string">'low-L'</span>] + <span class="string">'|'</span> + board[<span class="string">'low-M'</span>] + <span class="string">'|'</span> + board[<span class="string">'low-R'</span>])</span><br><span class="line">printBoard(theBoard)</span><br></pre></td></tr></table></figure>

<p>O|O|O<br>-+-+-<br>X|X|<br>-+-+-<br> | |X</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">turn = <span class="string">'X'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    printBoard(theBoard) <span class="comment">#the function</span></span><br><span class="line">    print(<span class="string">'Turn for '</span> + turn + <span class="string">'. Move on which space?'</span>)</span><br><span class="line">    move = input()</span><br><span class="line">    theBoard[move] = turn</span><br><span class="line">    <span class="keyword">if</span> turn == <span class="string">'X'</span>:</span><br><span class="line">        turn = <span class="string">'O'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        turn = <span class="string">'X'</span></span><br><span class="line">printBoard(theBoard)</span><br></pre></td></tr></table></figure>

<p>O|O|O<br>-+-+-<br>X|X|<br>-+-+-<br> | |X<br>Turn for X. Move on which space?<br>top-L<br>X|O|O<br>-+-+-<br>X|X|<br>-+-+-<br> | |X</p>
<p>… …</p>
<p>another example to record the number:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">allGuests=&#123;<span class="string">'Alice'</span>:&#123;<span class="string">'apples'</span>:<span class="number">5</span>,<span class="string">'pretzels'</span>:<span class="number">12</span>&#125;,</span><br><span class="line">          <span class="string">'Bob'</span>:&#123;<span class="string">'ham sandwiches'</span>:<span class="number">3</span>,<span class="string">'apples'</span>:<span class="number">2</span>&#125;,</span><br><span class="line">          <span class="string">'Carol'</span>:&#123;<span class="string">'cups'</span>:<span class="number">3</span>,<span class="string">'apple pies'</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">totalBrought</span><span class="params">(guests,item)</span>:</span></span><br><span class="line">    numBrought=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> guests.items():</span><br><span class="line">        numBrought=numBrought+v.get(item,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> numBrought</span><br><span class="line">print(<span class="string">'Number of things being brought:'</span>)</span><br><span class="line">print(<span class="string">' - Apples '</span> + str(totalBrought(allGuests, <span class="string">'apples'</span>)))</span><br><span class="line">print(<span class="string">' - Cups '</span> + str(totalBrought(allGuests, <span class="string">'cups'</span>)))</span><br><span class="line">print(<span class="string">' - Cakes '</span> + str(totalBrought(allGuests, <span class="string">'cakes'</span>)))</span><br><span class="line">print(<span class="string">' - Ham Sandwiches '</span> + str(totalBrought(allGuests, <span class="string">'ham sandwiches'</span>)))</span><br><span class="line">print(<span class="string">' - Apple Pies '</span> + str(totalBrought(allGuests, <span class="string">'apple pies'</span>)))</span><br></pre></td></tr></table></figure>

<p>Number of things being brought:</p>
<ul>
<li>Apples 7</li>
<li>Cups 3</li>
<li>Cakes 0</li>
<li>Ham Sandwiches 3</li>
<li>Apple Pies 1</li>
</ul>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib学习</title>
    <url>/2020/06/19/matplotlib%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>matplotlib   </p>
<p>‘.scatter()’  ,   ‘.text()’  ,  ‘savefig()’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.scatter(x, y,                              <span class="comment">#坐标</span></span><br><span class="line">           s=df_solar.moon_diameter_km/<span class="number">1.5</span>,   <span class="comment">#图形大小</span></span><br><span class="line">           facecolor=<span class="string">'w'</span>, edgecolor=<span class="string">'k'</span>, </span><br><span class="line">           marker=<span class="string">'o'</span>,                        <span class="comment">#形状                          </span></span><br><span class="line">           alpha=<span class="number">0.5</span>)                         <span class="comment">#透明度</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.text(x,y,                      <span class="comment">#坐标                       </span></span><br><span class="line">        <span class="string">'%s (%s)'</span> % (row.moon_name, row.planet_name[<span class="number">0</span>]), </span><br><span class="line">        ha=<span class="string">'center'</span>, va=<span class="string">'center'</span>) <span class="comment">#图形中位置</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.savefig(<span class="string">'x'</span>,                   <span class="comment">#文件名称</span></span><br><span class="line">        bbox_inches=<span class="string">'tight'</span>)     <span class="comment">#图片裁剪</span></span><br></pre></td></tr></table></figure>



<p>Seaborn：’sns.set()’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.set(context=<span class="string">'notebook'</span>,                      </span><br><span class="line">        style=<span class="string">'whitegrid'</span>,    <span class="comment">#背景风格</span></span><br><span class="line">        palette=sns.color_palette(<span class="string">'Paired'</span>, <span class="number">12</span>))</span><br><span class="line"><span class="comment">#context 代表风格</span></span><br><span class="line"><span class="comment">#font_scale 为字体大小</span></span><br><span class="line"><span class="comment">#lines.linewidth 指定了线宽</span></span><br><span class="line"><span class="comment">#color_palette()能传入任何Matplotlib所支持的颜色</span></span><br><span class="line"><span class="comment">#color_palette()不写参数则默认颜色</span></span><br><span class="line"><span class="comment">#set_palette()设置所有图的颜色</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.drop_duplicates() <span class="comment">#去除重复项</span></span><br></pre></td></tr></table></figure>



<p>sns.distplot</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.distplot(df.groupby([<span class="string">'YEAR'</span>, <span class="string">'MONTH'</span>]).sum().PRCP, </span><br><span class="line">             color=<span class="string">'b'</span>, bins=<span class="number">50</span>,   <span class="comment">#50个柱形</span></span><br><span class="line">             hist=<span class="literal">True</span>,            <span class="comment">#开启直方图</span></span><br><span class="line">             rug=<span class="literal">True</span>, kde=<span class="literal">True</span>)   <span class="comment">#开启细线，曲线</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>python学习6</title>
    <url>/2020/06/27/python%E5%AD%A6%E4%B9%A06/</url>
    <content><![CDATA[<h1 id="Python-字符串"><a href="#Python-字符串" class="headerlink" title="Python-字符串"></a>Python-字符串</h1><h3 id="双引号-“-“-表string"><a href="#双引号-“-“-表string" class="headerlink" title="双引号 “ “ 表string"></a>双引号 “ “ 表string</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">"That is Alice's cat."</span></span><br><span class="line"><span class="comment">#out: That is Alice's cat.</span></span><br></pre></td></tr></table></figure>

<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><table>
<thead>
<tr>
<th>转义字符</th>
<th>打印为</th>
</tr>
</thead>
<tbody><tr>
<td>```&#39;</td>
<td>单引号</td>
</tr>
<tr>
<td>```&quot;</td>
<td>双引号</td>
</tr>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>``` \</td>
<td>倒斜杠</td>
</tr>
</tbody></table>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Hello there!\nHow are you?\nI\'m doing fine."</span>)</span><br><span class="line"><span class="comment">#Hello there!</span></span><br><span class="line"><span class="comment">#How are you?</span></span><br><span class="line"><span class="comment">#I'm doing fine.</span></span><br></pre></td></tr></table></figure>

<h3 id="开头加r，表示全部为字符串"><a href="#开头加r，表示全部为字符串" class="headerlink" title="开头加r，表示全部为字符串"></a>开头加r，表示全部为字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">r'That is Carol\'s cat.'</span>)</span><br><span class="line"><span class="comment">#out:That is Carol\'s cat.</span></span><br></pre></td></tr></table></figure>

<h3 id="‘’’-‘’’中加段落"><a href="#‘’’-‘’’中加段落" class="headerlink" title="‘’’ ‘’’中加段落"></a>‘’’ ‘’’中加段落</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'''Dear Alice, </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Eve's cat has been arrested for catnapping, cat burglary, and extortion. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Sincerely, </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Bob'''</span>)</span><br></pre></td></tr></table></figure>

<p>out：</p>
<p>Dear Alice, </p>
<p>Eve’s cat has been arrested for catnapping, cat burglary, and extortion. </p>
<p>Sincerely, </p>
<p>Bob</p>
<h3 id="“””-“””中加注释："><a href="#“””-“””中加注释：" class="headerlink" title="“”” “””中加注释："></a>“”” “””中加注释：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""This is a test Python program. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Written by Al Sweigart al@inventwithpython.com </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This program was designed for Python 3, not Python 2.  # annotation </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span> </span><br><span class="line"></span><br><span class="line"><span class="string">"""This is a multiline comment to help </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">explain what the spam() function does."""</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">'Hello!'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="下标与切片-Subscript-and-slice"><a href="#下标与切片-Subscript-and-slice" class="headerlink" title="下标与切片  Subscript and slice"></a>下标与切片  Subscript and slice</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">'Hello world!'</span></span><br><span class="line">spam[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#out：'H' </span></span><br><span class="line">spam[<span class="number">4</span>]</span><br><span class="line"><span class="comment">#out：'o' </span></span><br><span class="line">spam[<span class="number">-1</span>]</span><br><span class="line"><span class="comment">#out：'!' </span></span><br><span class="line">spam[<span class="number">0</span>:<span class="number">5</span>] </span><br><span class="line"><span class="comment">#out：'Hello' </span></span><br><span class="line">spam[:<span class="number">5</span>] </span><br><span class="line"><span class="comment">#out：'Hello' </span></span><br><span class="line">spam[<span class="number">6</span>:]</span><br><span class="line"><span class="comment">#out：'world!'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">'Hello world!'</span></span><br><span class="line">fizz = spam[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">fizz</span><br><span class="line"><span class="comment">#out：'Hello'</span></span><br></pre></td></tr></table></figure>

<h3 id="in-and-not-in"><a href="#in-and-not-in" class="headerlink" title="in and not in"></a>in and not in</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello'</span> <span class="keyword">in</span> <span class="string">'Hello World'</span></span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'Hello'</span> <span class="keyword">in</span> <span class="string">'Hello'</span></span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'HELLO'</span> <span class="keyword">in</span> <span class="string">'Hello World'</span></span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"><span class="string">''</span> <span class="keyword">in</span> <span class="string">'spam'</span></span><br><span class="line"><span class="comment">#out:True</span></span><br><span class="line"><span class="string">'cats'</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'cats and dogs'</span></span><br><span class="line"><span class="comment">#out:False</span></span><br></pre></td></tr></table></figure>

<h2 id="upper-、lower-、isupper-和-islower"><a href="#upper-、lower-、isupper-和-islower" class="headerlink" title="upper()、lower()、isupper()和 islower()"></a>upper()、lower()、isupper()和 islower()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">'Hello world!'</span></span><br><span class="line">spam = spam.upper()</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:'HELLO WORLD!' </span></span><br><span class="line">spam = spam.lower()</span><br><span class="line">spam</span><br><span class="line"><span class="comment">#out:'hello world!'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'How are you?'</span>) </span><br><span class="line">feeling = input() </span><br><span class="line"><span class="keyword">if</span> feeling.lower() == <span class="string">'great'</span>: </span><br><span class="line">	print(<span class="string">'I feel great too.'</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">	print(<span class="string">'I hope the rest of your day is good.'</span>)</span><br></pre></td></tr></table></figure>

<p>out：</p>
<p>How are you? </p>
<p><strong>GREat</strong> </p>
<p>I feel great too.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">'Hello world!'</span></span><br><span class="line">spam.islower()</span><br><span class="line"><span class="comment">#out：False </span></span><br><span class="line">spam.isupper() </span><br><span class="line"><span class="comment">#out：False </span></span><br><span class="line"><span class="string">'HELLO'</span>.isupper()</span><br><span class="line"><span class="comment">#out：True </span></span><br><span class="line"><span class="string">'abc12345'</span>.islower()</span><br><span class="line"><span class="comment">#out：True </span></span><br><span class="line"><span class="string">'12345'</span>.islower()</span><br><span class="line"><span class="comment">#out：False </span></span><br><span class="line"><span class="string">'12345'</span>.isupper()</span><br><span class="line"><span class="comment">#out：False</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello'</span>.upper()</span><br><span class="line"><span class="comment">#out：'HELLO' </span></span><br><span class="line"><span class="string">'Hello'</span>.upper().lower()</span><br><span class="line"><span class="comment">#out：'hello' </span></span><br><span class="line"><span class="string">'Hello'</span>.upper().lower().upper()</span><br><span class="line"><span class="comment">#out：'HELLO' </span></span><br><span class="line"><span class="string">'HELLO'</span>.lower()</span><br><span class="line"><span class="comment">#out：'hello' </span></span><br><span class="line"><span class="string">'HELLO'</span>.lower().islower()</span><br><span class="line"><span class="comment">#out：True</span></span><br></pre></td></tr></table></figure>

<h2 id="isX-字符串方法"><a href="#isX-字符串方法" class="headerlink" title="isX 字符串方法"></a>isX 字符串方法</h2><ul>
<li><p>isalpha()返回 True，如果字符串只包含字母，并且非空； </p>
</li>
<li><p>isalnum()返回 True，如果字符串只包含字母和数字，并且非空； </p>
</li>
<li><p>isdecimal()返回 True，如果字符串只包含数字字符，并且非空； </p>
</li>
<li><p>isspace()返回 True，如果字符串只包含空格、制表符和换行，并且非空； </p>
</li>
<li><p>istitle()返回 True，如果字符串仅包含以大写字母开头、后面都是小写字母的单词。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'hello'</span>.isalpha()</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'hello123'</span>.isalpha()</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"><span class="string">'hello123'</span>.isalnum()</span><br><span class="line"><span class="comment">#out:True</span></span><br><span class="line"><span class="string">'hello'</span>.isalnum()</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'123'</span>.isdecimal()</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">' '</span>.isspace()</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'This Is Title Case'</span>.istitle()</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'This Is Title Case 123'</span>.istitle()</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'This Is not Title Case'</span>.istitle()</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"><span class="string">'This Is NOT Title Case Either'</span>.istitle()</span><br><span class="line"><span class="comment">#out:False</span></span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">	print(<span class="string">'Enter your age:'</span>) </span><br><span class="line">	age = input() </span><br><span class="line">	<span class="keyword">if</span> age.isdecimal(): </span><br><span class="line">		<span class="keyword">break</span> </span><br><span class="line">	print(<span class="string">'Please enter a number for your age.'</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">	print(<span class="string">'Select a new password (letters and numbers only):'</span>) </span><br><span class="line">    password = input() </span><br><span class="line">    <span class="keyword">if</span> password.isalnum(): </span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line">    print(<span class="string">'Passwords can only have letters and numbers.'</span>)</span><br></pre></td></tr></table></figure>

<p>Enter your age: </p>
<p>forty two </p>
<p>Please enter a number for your age. </p>
<p>Enter your age: </p>
<p>42 </p>
<p>Select a new password (letters and numbers only): </p>
<p>secr3t! </p>
<p>Passwords can only have letters and numbers. </p>
<p>Select a new password (letters and numbers only): </p>
<p>secr3t</p>
<h2 id="startswith-和-endswith"><a href="#startswith-和-endswith" class="headerlink" title="startswith()和 endswith()"></a>startswith()和 endswith()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello world!'</span>.startswith(<span class="string">'Hello'</span>)</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'Hello world!'</span>.endswith(<span class="string">'world!'</span>)</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'abc123'</span>.startswith(<span class="string">'abcdef'</span>)</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"><span class="string">'abc123'</span>.endswith(<span class="string">'12'</span>)</span><br><span class="line"><span class="comment">#out:False </span></span><br><span class="line"><span class="string">'Hello world!'</span>.startswith(<span class="string">'Hello world!'</span>)</span><br><span class="line"><span class="comment">#out:True </span></span><br><span class="line"><span class="string">'Hello world!'</span>.endswith(<span class="string">'Hello world!'</span>)</span><br><span class="line"><span class="comment">#out:True</span></span><br></pre></td></tr></table></figure>

<h2 id="join-和-split"><a href="#join-和-split" class="headerlink" title="join()和 split()"></a>join()和 split()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">', '</span>.join([<span class="string">'cats'</span>, <span class="string">'rats'</span>, <span class="string">'bats'</span>])</span><br><span class="line"><span class="string">'cats, rats, bats'</span> </span><br><span class="line"><span class="string">' '</span>.join([<span class="string">'My'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'Simon'</span>])</span><br><span class="line"><span class="string">'My name is Simon'</span> </span><br><span class="line"><span class="string">'ABC'</span>.join([<span class="string">'My'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'Simon'</span>])</span><br><span class="line"><span class="string">'MyABCnameABCisABCSimon'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'My name is Simon'</span>.split() <span class="comment">#默认以空格分隔</span></span><br><span class="line"><span class="comment">#out：['My', 'name', 'is', 'Simon']</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'MyABCnameABCisABCSimon'</span>.split(<span class="string">'ABC'</span>)</span><br><span class="line"><span class="comment">#out：['My', 'name', 'is', 'Simon'] </span></span><br><span class="line"><span class="string">'My name is Simon'</span>.split(<span class="string">'m'</span>)</span><br><span class="line"><span class="comment">#out：['My na', 'e is Si', 'on']</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">'''Dear Alice,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">How have you been? I am fine.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">There is a container in the fridge</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">that is labeled "Milk Experiment".</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please do not drink it.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Sincerely,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Bob'''</span></span><br><span class="line">spam.split(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#out：['Dear Alice,', 'How have you been? I am fine.', 'There is a container in the #fridge', 'that is labeled "Milk Experiment".', '', 'Please do not drink it.', </span></span><br><span class="line"><span class="comment">#'Sincerely,', 'Bob']</span></span><br></pre></td></tr></table></figure>

<h2 id="rjust-、ljust-和-center"><a href="#rjust-、ljust-和-center" class="headerlink" title="rjust()、ljust()和 center()"></a>rjust()、ljust()和 center()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello'</span>.rjust(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#out:'          Hello' </span></span><br><span class="line"><span class="string">'Hello'</span>.rjust(<span class="number">20</span>)</span><br><span class="line"><span class="comment">#out:'                    Hello' </span></span><br><span class="line"><span class="string">'Hello World'</span>.rjust(<span class="number">20</span>)</span><br><span class="line"><span class="comment">#out:'          Hello World' </span></span><br><span class="line"><span class="string">'Hello'</span>.ljust(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#out:'Hello          '</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello'</span>.rjust(<span class="number">20</span>, <span class="string">'\*'</span>)</span><br><span class="line"><span class="comment">#out:'***************Hello' </span></span><br><span class="line"><span class="string">'Hello'</span>.ljust(<span class="number">20</span>, <span class="string">'-'</span>)</span><br><span class="line"><span class="comment">#out:'Hello---------------'</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello'</span>.center(<span class="number">20</span>)</span><br><span class="line"><span class="comment">#out:' Hello ' </span></span><br><span class="line"><span class="string">'Hello'</span>.center(<span class="number">20</span>, <span class="string">'='</span>)</span><br><span class="line"><span class="comment">#out:'=======Hello========'</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printPicnic</span><span class="params">(itemsDict, leftWidth, rightWidth)</span>:</span> </span><br><span class="line">	print(<span class="string">'PICNIC ITEMS'</span>.center(leftWidth + rightWidth, <span class="string">'-'</span>)) </span><br><span class="line">	<span class="keyword">for</span> k, v <span class="keyword">in</span> itemsDict.items(): </span><br><span class="line">		print(k.ljust(leftWidth, <span class="string">'.'</span>) + str(v).rjust(rightWidth)) </span><br><span class="line"></span><br><span class="line">picnicItems = &#123;<span class="string">'sandwiches'</span>: <span class="number">4</span>, <span class="string">'apples'</span>: <span class="number">12</span>, <span class="string">'cups'</span>: <span class="number">4</span>, <span class="string">'cookies'</span>: <span class="number">8000</span>&#125; </span><br><span class="line">printPicnic(picnicItems, <span class="number">12</span>, <span class="number">5</span>) </span><br><span class="line">printPicnic(picnicItems, <span class="number">20</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<p>—PICNIC ITEMS– </p>
<p>sandwiches.. 4 </p>
<p>apples…… 12 </p>
<p>cups…….. 4 </p>
<p>cookies….. 8000 </p>
<p>——-PICNIC ITEMS——- </p>
<p>sandwiches………. 4 </p>
<p>apples………….. 12 </p>
<p>cups……………. 4 </p>
<p>cookies…………. 8000</p>
<h2 id="strip-、rstrip-和-lstrip-删除空白字符"><a href="#strip-、rstrip-和-lstrip-删除空白字符" class="headerlink" title="strip()、rstrip()和 lstrip()删除空白字符"></a>strip()、rstrip()和 lstrip()删除空白字符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">' Hello World '</span></span><br><span class="line">spam.strip()</span><br><span class="line"><span class="comment">#out:'Hello World' </span></span><br><span class="line">spam.lstrip()</span><br><span class="line"><span class="comment">#out:'Hello World ' </span></span><br><span class="line">spam.rstrip()</span><br><span class="line"><span class="comment">#out:' Hello World'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="string">'SpamSpamBaconSpamEggsSpamSpam'</span></span><br><span class="line">spam.strip(<span class="string">'ampS'</span>)</span><br><span class="line"><span class="comment">#out:'BaconSpamEggs'</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>‘star’</title>
    <url>/2020/05/05/%E2%80%98star%E2%80%99/</url>
    <content><![CDATA[<p>列举所有六角星，使每条线上的数字和为26，数字取1-12，不可重复使用。</p>
<p> Enumerate all hexagon stars, make the sum of the Numbers on each line 26. Irreusable numbers are from 1-12. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">        <span class="keyword">if</span> a!=b:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                <span class="keyword">if</span> a!=c <span class="keyword">and</span> b!=c:</span><br><span class="line">                    <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                        <span class="keyword">if</span> a!=d <span class="keyword">and</span> b!=d <span class="keyword">and</span> c!=d:</span><br><span class="line">                            <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                <span class="keyword">if</span> a!=e <span class="keyword">and</span> b!=e <span class="keyword">and</span> c!=e <span class="keyword">and</span> d!=e:</span><br><span class="line">                                    <span class="keyword">for</span> f <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                        <span class="keyword">if</span> a!=f <span class="keyword">and</span> b!= f <span class="keyword">and</span> c!=f <span class="keyword">and</span> d!=f <span class="keyword">and</span> e!=f:</span><br><span class="line">                                            <span class="keyword">for</span> g <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                                <span class="keyword">if</span> a!=g <span class="keyword">and</span> b!= g <span class="keyword">and</span> c!=g <span class="keyword">and</span> d!=g <span class="keyword">and</span> e!=g <span class="keyword">and</span> f!=g:</span><br><span class="line">                                                    <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                                        <span class="keyword">if</span> a!=h <span class="keyword">and</span> b!=h <span class="keyword">and</span> c!=h <span class="keyword">and</span> d!=h <span class="keyword">and</span> e!=h <span class="keyword">and</span> f!=h <span class="keyword">and</span> g!=h:</span><br><span class="line">                                                            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                                                 <span class="keyword">if</span> a!=i <span class="keyword">and</span> b!=i <span class="keyword">and</span> c!=i <span class="keyword">and</span> d!=i <span class="keyword">and</span> e!=i <span class="keyword">and</span> f!=i <span class="keyword">and</span> g!=i <span class="keyword">and</span> h!=i:</span><br><span class="line">                                                                        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                                                             <span class="keyword">if</span> a!=j <span class="keyword">and</span> b!=j <span class="keyword">and</span> c!=j <span class="keyword">and</span> d!=j <span class="keyword">and</span> e!=j <span class="keyword">and</span> f!=j <span class="keyword">and</span> g!=j <span class="keyword">and</span> h!=j <span class="keyword">and</span> i!=j:</span><br><span class="line">                                                                                    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                                                                        <span class="keyword">if</span> a!=k <span class="keyword">and</span> b!=k <span class="keyword">and</span> c!=k <span class="keyword">and</span> d!=k <span class="keyword">and</span> e!=k <span class="keyword">and</span> f!=k <span class="keyword">and</span> g!=k <span class="keyword">and</span> h!=k <span class="keyword">and</span> i!=k <span class="keyword">and</span> j!=k:</span><br><span class="line">                                                                                            <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">                                                                                                <span class="keyword">if</span> a!=l <span class="keyword">and</span> b!=l <span class="keyword">and</span> c!=l <span class="keyword">and</span> d!=l <span class="keyword">and</span> e!=l <span class="keyword">and</span> f!=l <span class="keyword">and</span> g!=l <span class="keyword">and</span> h!=l <span class="keyword">and</span> i!=l <span class="keyword">and</span> j!=k <span class="keyword">and</span> k!=l:</span><br><span class="line">                                                                                                    <span class="keyword">if</span> a+c+f+h==<span class="number">26</span> <span class="keyword">and</span> a+d+g+k==<span class="number">26</span> <span class="keyword">and</span> h+i+j+k==<span class="number">26</span> <span class="keyword">and</span> b+c+d+e==<span class="number">26</span> <span class="keyword">and</span> b+f+i+l==<span class="number">26</span> <span class="keyword">and</span> e+g+j+l==<span class="number">26</span>:</span><br><span class="line">                                                                                                        print(<span class="string">'    '</span>,a)</span><br><span class="line">                                                                                                        print(b,<span class="string">''</span>,c,<span class="string">''</span>,d,<span class="string">''</span>,e)</span><br><span class="line">                                                                                                        print(<span class="string">' '</span>,f,<span class="string">'  '</span>,g)</span><br><span class="line">                                                                                                        print(h,<span class="string">''</span>,i,<span class="string">''</span>,j,<span class="string">''</span>,k)</span><br><span class="line">                                                                                                        print(<span class="string">'    '</span>,l)</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/05/05/YkVNfH.png" alt="YkVNfH.png"></p>
]]></content>
      <categories>
        <category>daily programming</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>我的视频测试文章</title>
    <url>/2020/02/13/%E6%88%91%E7%9A%84%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h3 id="我的视频测试文章"><a href="#我的视频测试文章" class="headerlink" title="我的视频测试文章"></a>我的视频测试文章</h3><p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"> </span><br><span class="line">&lt;div style&#x3D;&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;</span><br><span class="line">    &lt;iframe src&#x3D;&quot;&#x2F;&#x2F;player.bilibili.com&#x2F;player.html?aid&#x3D;76306723&amp;cid&#x3D;130524568&amp;page&#x3D;1&quot; scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot; style&#x3D;&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;&gt;</span><br><span class="line">    &lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>


<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=76306723&cid=130524568&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">
    </iframe>
</div>

]]></content>
      <categories>
        <category>Testing</category>
      </categories>
  </entry>
  <entry>
    <title>有关海华AI比赛</title>
    <url>/2020/02/25/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B1/</url>
    <content><![CDATA[<h1 id="Something-about-the-machine-learning"><a href="#Something-about-the-machine-learning" class="headerlink" title="Something about the machine learning"></a>Something about the machine learning</h1><p>(code by karbon)</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="Learning-with-supervision"><a href="#Learning-with-supervision" class="headerlink" title="Learning with  supervision:"></a>Learning with  supervision:</h3><h4 id="Input-and-output-are-known-The-machine-finds-the-relation-between-the-input-and-the-output-then-predicts-what-the-next-input-would-be-e-g-classification-regression"><a href="#Input-and-output-are-known-The-machine-finds-the-relation-between-the-input-and-the-output-then-predicts-what-the-next-input-would-be-e-g-classification-regression" class="headerlink" title="Input and output are known. The machine finds the relation between the input and the output, then predicts what the next input would be. e.g. classification, regression"></a>Input and output are known. The machine finds the relation between the input and the output, then predicts what the next input would be. e.g. classification, regression</h4><h3 id="Learning-without-supervision"><a href="#Learning-without-supervision" class="headerlink" title="Learning without supervision:"></a>Learning without supervision:</h3><h4 id="The-machine-finds-the-structure-from-the-data-e-g-cluster-the-difference-between-classification-and-cluster-is-classification-needs-a-definition-while-cluster-requires-the-machine-to-find-the-features-themselves"><a href="#The-machine-finds-the-structure-from-the-data-e-g-cluster-the-difference-between-classification-and-cluster-is-classification-needs-a-definition-while-cluster-requires-the-machine-to-find-the-features-themselves" class="headerlink" title="The machine finds the structure from the data. e.g. cluster(the difference between classification and cluster is: classification needs a definition while cluster requires the machine to find the features themselves. )"></a>The machine finds the structure from the data. e.g. cluster(the difference between classification and cluster is: classification needs a definition while cluster requires the machine to find the features themselves. )</h4><hr>
<h2 id="An-example-of-Linear-regression-with-one-variable"><a href="#An-example-of-Linear-regression-with-one-variable" class="headerlink" title="An example of  Linear regression with one variable"></a>An example of  Linear regression with one variable</h2><h6 id="use-the-method-of-Gradient-Descent"><a href="#use-the-method-of-Gradient-Descent" class="headerlink" title="use the method of Gradient Descent"></a>use the method of <strong>Gradient Descent</strong></h6><p>Imagine you are the CEO of a restaurant chain and you are considering opening a store in a new city. Suppose that your group’s data analysis department finds that there is a strong correlation between the amount of profit made in a city and the population of that city, so you get data on the amount of profit made in the cities where you have set up shop and the population of those cities .</p>
<p><img src="https://s2.ax1x.com/2020/02/25/3YLMx1.png" alt="3YLMx1.png"></p>
<h4 id="The-specific-steps"><a href="#The-specific-steps" class="headerlink" title="The specific steps:"></a>The specific steps:</h4><p>import:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> csv  <span class="comment">#read the data</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment">#plot the graph</span></span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declare lists for storing trainset of population and profit</span></span><br><span class="line">population = np.array([])</span><br><span class="line">profit = np.array([])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load trainset from csv file, add the data to the lists</span></span><br><span class="line">reader = csv.reader(open(<span class="string">'./dataForCEO.csv'</span>,<span class="string">'r'</span>))</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">    population = np.append(population, float(row[<span class="number">0</span>])) <span class="comment">#append:add value into list</span></span><br><span class="line">    profit = np.append(profit, float(row[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<p>Plot the diagram</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotData</span><span class="params">(x, y, t0=None, t1=None)</span>:</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>)) <span class="comment">#plot the background</span></span><br><span class="line">    plt.scatter(x.tolist(), y.tolist(), marker=<span class="string">'x'</span>) <span class="comment">#plot the scatter graph</span></span><br><span class="line">    <span class="keyword">if</span> (t0 != <span class="literal">None</span>) <span class="keyword">and</span> (t1 != <span class="literal">None</span>):</span><br><span class="line">        tempx = np.linspace(<span class="number">5</span>, <span class="number">22.5</span>, <span class="number">50</span>)</span><br><span class="line">        tempy = t0 + tempx * t1</span><br><span class="line">        plt.plot(tempx, tempy, color=<span class="string">'red'</span>, linestyle=<span class="string">'--'</span>) <span class="comment">#find the trend</span></span><br><span class="line">    plt.xlabel(<span class="string">'Population of City in 10000'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Profit in $10000'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">plotData(population, profit)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">(x, theta0, theta1)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> theta0 + theta1 * x</span><br></pre></td></tr></table></figure>

<p>The formula:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeCost</span><span class="params">(x, y, theta0, theta1)</span>:</span></span><br><span class="line">    m = len(y)</span><br><span class="line">    J = <span class="number">1</span>/(<span class="number">2</span>*m) * sum((h(x,theta0,theta1) - y) ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> J</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradientDescent</span><span class="params">(x, y, theta0, theta1, alpha, iterTimes)</span>:</span></span><br><span class="line">    m = len(y)</span><br><span class="line">    temp0 = theta0 - alpha*(<span class="number">1</span>/m) * sum((h(x, theta0, theta1) - y));  </span><br><span class="line">    temp1 = theta1 - alpha*(<span class="number">1</span>/m) * sum((h(x, theta0, theta1) - y) * x);  </span><br><span class="line">    iterTimes = iterTimes + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> temp0, temp1, iterTimes</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta0 = random.uniform(<span class="number">-10</span>,<span class="number">10</span>)</span><br><span class="line">theta1 = random.uniform(<span class="number">-10</span>,<span class="number">10</span>)</span><br><span class="line">alpha = <span class="number">0.001</span> <span class="comment">#the smaller the alpha, the more accurate the result can achieve</span></span><br><span class="line">iterTimes = <span class="number">0</span> <span class="comment"># times of iteration</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):  <span class="comment">#repeat for 1000 within one click to make the process faster</span></span><br><span class="line">    theta0, theta1, iterTimes = gradientDescent(population, profit, theta0, theta1, alpha, iterTimes)</span><br><span class="line">print(<span class="string">"After %d iterations:"</span>%(iterTimes))</span><br><span class="line">print(<span class="string">"h(x) = %f + %fx"</span>%((theta0, theta1)))  </span><br><span class="line">print(<span class="string">"Cost is %f now."</span>%(computeCost(population, profit, theta0, theta1)))</span><br><span class="line">plotData(population, profit, theta0, theta1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Out(the first time):After 0 iterations:          (times)</span></span><br><span class="line"><span class="comment">#                    h(x) = -9.955209 + 2.422265x (relationship)</span></span><br><span class="line"><span class="comment">#                    Cost is 23.558595 now.       (difference to the real value)</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/25/3Yjdz9.png" alt="3Yjdz9.png"></p>
<p> final result: ℎ(𝑥) = −3.895781 + 1.193034𝑥</p>
<p>the cost: 𝐶𝑜𝑠𝑡 = 4.476971 (the difference between the real value and the predicted value)</p>
<hr>
<h2 id="Digital-image-processing"><a href="#Digital-image-processing" class="headerlink" title="Digital image processing"></a>Digital image processing</h2><p><img src="https://s2.ax1x.com/2020/02/25/3YvVyR.png" alt="3YvVyR.png"></p>
<p><img src="https://s2.ax1x.com/2020/02/25/3YvG6A.png" alt="3YvG6A.png"></p>
<h2 id="Some-simple-examples-of-digital-image-processing"><a href="#Some-simple-examples-of-digital-image-processing" class="headerlink" title="Some simple examples of digital image processing"></a>Some simple examples of digital image processing</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import packages</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2  <span class="comment">#read the picture</span></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pictureRaw = cv2.imread(<span class="string">"/picture.jpg"</span>)</span><br><span class="line">print(type(pictureRaw))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:&lt;class 'numpy.ndarray'&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(pictureRaw.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:(995, 1079, 3)   (the graph is 995x1079 and has 3 color channels)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.imshow(cv2.cvtColor(pictureRaw, cv2.COLOR_BGR2RGB))<span class="comment">#plot the picture</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/25/3YxvV0.png" alt="3YxvV0.png"></p>
<h3 id="1-Grayscale-image"><a href="#1-Grayscale-image" class="headerlink" title="1. Grayscale image:"></a>1. Grayscale image:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pictureRaw2 = cv2.imread(<span class="string">"/picture.jpg"</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">print(pictureRaw2.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:(995, 1079) #The picture only contains black and white so the shape is 2-dimensional</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.imshow(cv2.cvtColor(pictureRaw2, cv2.COLOR_GRAY2RGB))</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/25/3tptgg.png" alt="3tptgg.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig1 = pictureRaw <span class="comment"># This line is a WRONG operation. </span></span><br><span class="line"><span class="comment"># If you directly assign an image to a new variable like above, you will unable to modify them seperately.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You should create a copy and assign it to fig1 variable, like the following line.</span></span><br><span class="line">fig1 = pictureRaw.copy() </span><br><span class="line"></span><br><span class="line"><span class="comment"># Slicing fig1 and assign the sliced part to fig2.</span></span><br><span class="line">fig2 = fig1[ <span class="number">200</span>:<span class="number">900</span>,<span class="number">350</span>:<span class="number">700</span>, :]  </span><br><span class="line"><span class="comment"># Slicing fig2 and assign the sliced part to fig3.</span></span><br><span class="line">fig3 = fig2[<span class="number">50</span>:<span class="number">150</span>, <span class="number">140</span>:<span class="number">230</span>, :] </span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw yellow rectangles in copies of fig1 and fig2 to show the part you sliced.</span></span><br><span class="line">fig1 = cv2.rectangle(fig1.copy(),(<span class="number">350</span>,<span class="number">200</span>),(<span class="number">700</span>,<span class="number">900</span>), color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),thickness = <span class="number">2</span>)</span><br><span class="line">fig2 = cv2.rectangle(fig2.copy(),(<span class="number">140</span>,<span class="number">50</span>),(<span class="number">230</span>,<span class="number">140</span>), color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),thickness = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show the images.</span></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">10</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>) <span class="comment">#subplot:multi-graph in one page</span></span><br><span class="line">plt.imshow(cv2.cvtColor(fig1, cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(fig2, cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(fig3, cv2.COLOR_BGR2RGB))</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/25/3t90Qe.png" alt="3t90Qe.png"></p>
<h3 id="2-Print-the-matrix-of-image"><a href="#2-Print-the-matrix-of-image" class="headerlink" title="2. Print the matrix of image"></a>2. Print the matrix of image</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(fig3.shape)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n Blue channel:"</span>)</span><br><span class="line">print(fig3[:, :, <span class="number">0</span>])</span><br><span class="line">print(<span class="string">"\n Green channel:"</span>)</span><br><span class="line">print(fig3[:, :, <span class="number">1</span>])</span><br><span class="line">print(<span class="string">"\n Red channel:"</span>)</span><br><span class="line">print(fig3[:, :, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:(100, 90, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Blue channel:</span></span><br><span class="line"><span class="comment">#[[ 51  46  49 ...  47  48  45]</span></span><br><span class="line"><span class="comment"># [ 61  55  52 ...  47  51  50]</span></span><br><span class="line"><span class="comment"># [ 64  63  61 ...  47  52  50]</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># [172 171 171 ... 238 238 232]</span></span><br><span class="line"><span class="comment"># [176 175 170 ... 242 237 228]</span></span><br><span class="line"><span class="comment">#[170 175 167 ... 239 238 233]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Green channel:</span></span><br><span class="line"><span class="comment">#[[ 45  40  44 ...  41  42  39]</span></span><br><span class="line"><span class="comment"># [ 55  50  46 ...  43  47  46]</span></span><br><span class="line"><span class="comment"># [ 57  57  55 ...  43  48  46]</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># [170 169 170 ... 230 230 224]</span></span><br><span class="line"><span class="comment"># [174 173 169 ... 231 226 217]</span></span><br><span class="line"><span class="comment"># [168 173 166 ... 225 224 219]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Red channel:</span></span><br><span class="line"><span class="comment">#[[ 62  59  65 ...  46  47  44]</span></span><br><span class="line"><span class="comment"># [ 74  71  69 ...  49  53  52]</span></span><br><span class="line"><span class="comment"># [ 78  80  80 ...  49  54  52]</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># [176 175 174 ... 231 231 225]</span></span><br><span class="line"><span class="comment"># [180 179 173 ... 233 228 219]</span></span><br><span class="line"><span class="comment"># [174 179 170 ... 226 225 220]]</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Binary-image"><a href="#3-Binary-image" class="headerlink" title="3. Binary image"></a>3. Binary image</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import image</span></span><br><span class="line">pictureRaw3 = cv2.imread(<span class="string">"/picture.jpg"</span>)</span><br><span class="line"><span class="comment"># create a grayscale copy</span></span><br><span class="line">picGray0 = cv2.cvtColor(picyureRaw3.copy(), cv2.COLOR_BGR2GRAY) <span class="comment">#turn gray</span></span><br><span class="line"><span class="comment"># set threshold</span></span><br><span class="line">threshold = <span class="number">127</span> <span class="comment">#the middle point to divide black or white</span></span><br></pre></td></tr></table></figure>

<p>traditional way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Common loop</span></span><br><span class="line">picGray1 = cv2.cvtColor(pictureRaw3.copy(), cv2.COLOR_BGR2GRAY)</span><br><span class="line">height = picGray1.shape[<span class="number">0</span>]  </span><br><span class="line">width = picGray1.shape[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">0</span>, height):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">0</span>, width):</span><br><span class="line">        <span class="keyword">if</span> picGray1[r][c] &gt; threshold:</span><br><span class="line">            picGray1[r][c] = <span class="number">255</span> <span class="comment">#if the value&gt;127 it's black</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            picGray1[r][c] = <span class="number">0</span>   <span class="comment">#vice versa</span></span><br></pre></td></tr></table></figure>

<p>faster way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Vectorization: A faster method</span></span><br><span class="line">picGray2 = cv2.cvtColor(pictureRaw3.copy(), cv2.COLOR_BGR2GRAY)</span><br><span class="line">picGray2[picGray2&gt;threshold] = <span class="number">255</span></span><br><span class="line">picGray2[picGray2&lt;=threshold] = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>plot the result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>) </span><br><span class="line">plt.imshow(cv2.cvtColor(garbageRaw, cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(garGray0, cv2.COLOR_GRAY2RGB))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)  <span class="comment">#the traditional way</span></span><br><span class="line">plt.imshow(cv2.cvtColor(garGray1, cv2.COLOR_GRAY2RGB))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)  <span class="comment">#the faster way</span></span><br><span class="line">plt.imshow(cv2.cvtColor(garGray2, cv2.COLOR_GRAY2RGB))</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/25/3tmNx1.png" alt="3tmNx1.png"></p>
<h3 id="4-Edge-detection"><a href="#4-Edge-detection" class="headerlink" title="4. Edge detection"></a>4. Edge detection</h3><p>One implementation of edge detection is through convolution.</p>
<p>Convolution is a mathematical operation. The following is an example of convolution in 2D image.</p>
<p> Convolution A∗BA*B can be described as the following gif image.  </p>
<p><img src="https://s2.ax1x.com/2020/02/25/3tn9JJ.gif" alt="3tn9JJ.gif"></p>
<p>example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw = cv2.imread(<span class="string">"./images/NanjingShizhangJiangdaqiao.jpg"</span>, cv2.IMREAD_COLOR)</span><br><span class="line"></span><br><span class="line">gray = cv2.cvtColor(raw, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Laplace Operator</span></span><br><span class="line">laplace = np.array(</span><br><span class="line">    [[<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>],</span><br><span class="line">     [<span class="number">-1</span>, <span class="number">4</span>, <span class="number">-1</span>],</span><br><span class="line">     [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>]]</span><br><span class="line">)</span><br><span class="line"><span class="comment"># convolution</span></span><br><span class="line">aft1 = cv2.filter2D(gray, <span class="number">-1</span>, laplace)</span><br><span class="line">aft2 = cv2.filter2D(gray, <span class="number">-1</span>, laplace)</span><br><span class="line">aft3 = cv2.filter2D(gray, <span class="number">-1</span>, laplace)</span><br><span class="line"></span><br><span class="line"><span class="comment"># binarize, different thresholds can get different results</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarize</span><span class="params">(img, threshold)</span>:</span></span><br><span class="line">    b = img.copy()</span><br><span class="line">    b[b&gt;threshold] = <span class="number">255</span></span><br><span class="line">    b[b&lt;=threshold] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">aft1 = binarize(aft1, <span class="number">5</span>)</span><br><span class="line">aft2 = binarize(aft2, <span class="number">10</span>)</span><br><span class="line">aft3 = binarize(aft3, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">9</span>))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(gray, cv2.COLOR_GRAY2RGB))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(aft1, cv2.COLOR_GRAY2RGB))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(aft2, cv2.COLOR_GRAY2RGB))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(aft3, cv2.COLOR_GRAY2RGB))</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/02/25/3tn3OP.png" alt="3tn3OP.png"></p>
]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关海华AI比赛4</title>
    <url>/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B4/</url>
    <content><![CDATA[<h1 id="CNN-based-Handwritten-Digit-Recognition"><a href="#CNN-based-Handwritten-Digit-Recognition" class="headerlink" title="CNN-based Handwritten Digit Recognition"></a>CNN-based Handwritten Digit Recognition</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function, unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="comment"># TensorFlow and tf.keras</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">print(tf.__version__)</span><br></pre></td></tr></table></figure>

<h2 id="Import-MNIST-dataset"><a href="#Import-MNIST-dataset" class="headerlink" title="Import MNIST dataset"></a>Import MNIST dataset</h2><p> This guide uses the <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">MNIST</a> dataset which contains 70,000 grayscale images in 10 categories. MNIST  stands for Mixed National Institute of Standards and Technology  database.<br>The MNIST dataset is often used as the “Hello, World” of  machine learning programs for computer vision. It contains images of  handwritten digits (0, 1, 2, etc.).<br>Here, 60,000 images are used to  train the network and 10,000 images to evaluate how accurately the  network learned to classify images. You can access MNIST directly from  TensorFlow. Import and load MNIST data directly from TensorFlow: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mnist = keras.datasets.mnist</span><br><span class="line"></span><br><span class="line">(train_images, train_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># grayscale image has only 1 channal</span></span><br><span class="line"><span class="keyword">if</span> K.image_data_format() == <span class="string">'channels_first'</span>:</span><br><span class="line">    train_images = train_images.reshape(train_images.shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">    test_images = test_images.reshape(test_images.shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">    input_shape = (<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    train_images = train_images.reshape(train_images.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    test_images = test_images.reshape(test_images.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    input_shape = (<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Explore-the-data"><a href="#Explore-the-data" class="headerlink" title="Explore the data"></a>Explore the data</h2><p> Let’s explore the format of the dataset before training the model. The  following shows there are 60,000 images in the training set, with each  image represented as 28 x 28 pixels: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_images.shape</span><br><span class="line"><span class="comment">#out:(60000, 28, 28, 1) #the shape of the trainset</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Likewise, there are 60,000 labels in the training set:</span></span><br><span class="line">len(train_labels)</span><br><span class="line"><span class="comment">#out:60000</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Each label is an integer between 0 and 9:</span></span><br><span class="line">train_labels</span><br><span class="line"><span class="comment">#out:array([5, 0, 4, ..., 5, 6, 8], dtype=uint8)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Each label is an integer between 0 and 9:</span></span><br><span class="line">test_images.shape</span><br><span class="line"><span class="comment">#out:(10000, 28, 28, 1)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#And the test set contains 10,000 images labels:</span></span><br><span class="line">len(test_labels)</span><br><span class="line"><span class="comment">#out:10000</span></span><br></pre></td></tr></table></figure>

<h2 id="Preprocess-the-data"><a href="#Preprocess-the-data" class="headerlink" title="Preprocess the data"></a>Preprocess the data</h2><p>The data must be preprocessed before training the network. If you  inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.imshow(train_images[<span class="number">0</span>,:,:,<span class="number">0</span>])<span class="comment">#choose the first one in the set</span></span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.grid(<span class="literal">False</span>)<span class="comment">#no grid line #plt.grid(linestyle=":", color="r")</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p> <img src="https://s1.ax1x.com/2020/03/12/8VH5Eq.png" alt="8VH5Eq.png"></p>
<p>Scale these values to a range of 0 to 1 before feeding them to the  neural network model. To do so, divide the values by 255. It’s important that the <em>training set</em> and the <em>testing set</em> be preprocessed in the same way.<br>In addition, encode labels using one-hot encoding. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_images_normed = train_images / <span class="number">255.0</span> <span class="comment">#make the value between 1 and 0</span></span><br><span class="line"></span><br><span class="line">test_images_normed = test_images / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">train_labels_onehot = keras.utils.to_categorical(train_labels, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">test_labels_onehot = keras.utils.to_categorical(test_labels, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p> To verify that the data is in the correct format and that you’re ready  to build and train the network, let’s display the first 25 images from  the <em>training set</em> and display the class name below each image. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>): <span class="comment">#choose 25 sample and put them in 5x5 graph</span></span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">5</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    plt.grid(<span class="literal">False</span>)</span><br><span class="line">    plt.imshow(train_images[i,:,:,<span class="number">0</span>], cmap=plt.cm.binary)</span><br><span class="line">    plt.xlabel(train_labels[i])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/12/8VbS56.png" alt="8VbS56.png"></p>
<h2 id="Build-the-model"><a href="#Build-the-model" class="headerlink" title="Build the model"></a>Build the model</h2><p>Building the neural network requires configuring the layers of the model, then compiling the model.<br>This example is <a href="http://yann.lecun.com/exdb/lenet/" target="_blank" rel="noopener">LeNet-5</a>, you can modify the model as you like.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = keras.Sequential([</span><br><span class="line">    keras.layers.Conv2D(<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">                 activation=<span class="string">'relu'</span>,</span><br><span class="line">                 input_shape=input_shape),</span><br><span class="line">    keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    keras.layers.Conv2D(<span class="number">16</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    keras.layers.Flatten(),</span><br><span class="line">    keras.layers.Dense(<span class="number">120</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">84</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p> Observe the summary. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/12/8Vb8qs.png" alt="8Vb8qs.png"></p>
<p> Define the process you train the model. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.compile(loss=keras.losses.categorical_crossentropy,</span><br><span class="line">              optimizer=keras.optimizers.Adam(),</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br></pre></td></tr></table></figure>

<h2 id="Train-the-model"><a href="#Train-the-model" class="headerlink" title="Train the model"></a>Train the model</h2><h3 id="Feed-the-model"><a href="#Feed-the-model" class="headerlink" title="Feed the model"></a>Feed the model</h3><p>To start training,  call the <code>model.fit</code> method—so called because it “fits” the model to the training data:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.fit(train_images_normed, train_labels_onehot, batch_size=<span class="number">100</span>, epochs=<span class="number">6</span>)</span><br><span class="line"><span class="comment"># It may need more than one minute</span></span><br></pre></td></tr></table></figure>

<p>As the model trains, the loss and accuracy metrics are displayed. </p>
<h3 id="Evaluate-accuracy"><a href="#Evaluate-accuracy" class="headerlink" title="Evaluate accuracy"></a>Evaluate accuracy</h3><p>Next, compare how the model performs on the test dataset:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_loss, test_acc = model.evaluate(test_images_normed, test_labels_onehot, verbose=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\nTest accuracy:'</span>, test_acc)Make predictions</span><br></pre></td></tr></table></figure>

<h3 id="Make-predictions"><a href="#Make-predictions" class="headerlink" title="Make predictions"></a>Make predictions</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predictions = model.predict(test_images_normed)</span><br></pre></td></tr></table></figure>

<p> Here, the model has predicted the label for each image in the testing set. Let’s take a look at the first prediction: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predictions[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p> A prediction is an array of 10 numbers. They represent the model’s  “confidence” that the image corresponds to each of the 10 different  articles of clothing. You can see which label has the highest confidence value: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.argmax(predictions[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#out:7</span></span><br></pre></td></tr></table></figure>

<p> So, the model is most confident that this image is 7. Examining the test label shows that this classification is correct: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_labels[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#out:7</span></span><br></pre></td></tr></table></figure>

<p> Graph this to look at the full set of 10 class predictions. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_image</span><span class="params">(i, predictions_array, true_label, img)</span>:</span></span><br><span class="line">    predictions_array, true_label, img = predictions_array, true_label[i], img[i,:,:,<span class="number">0</span>]</span><br><span class="line">    plt.grid(<span class="literal">False</span>)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line"></span><br><span class="line">    plt.imshow(img, cmap=plt.cm.binary)</span><br><span class="line"></span><br><span class="line">    predicted_label = np.argmax(predictions_array)</span><br><span class="line">    <span class="keyword">if</span> predicted_label == true_label:</span><br><span class="line">        color = <span class="string">'blue'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        color = <span class="string">'red'</span></span><br><span class="line"></span><br><span class="line">    plt.xlabel(<span class="string">"Pred:&#123;&#125; &#123;:2.0f&#125;% (GT:&#123;&#125;)"</span>.format(predicted_label,</span><br><span class="line">                                <span class="number">100</span>*np.max(predictions_array),</span><br><span class="line">                                true_label),</span><br><span class="line">                                color=color)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_value_array</span><span class="params">(i, predictions_array, true_label)</span>:</span></span><br><span class="line">    predictions_array, true_label = predictions_array, true_label[i]</span><br><span class="line">    plt.grid(<span class="literal">False</span>)</span><br><span class="line">    plt.xticks(range(<span class="number">10</span>))</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    thisplot = plt.bar(range(<span class="number">10</span>), predictions_array, color=<span class="string">"#777777"</span>)</span><br><span class="line">    plt.ylim([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    predicted_label = np.argmax(predictions_array)</span><br><span class="line"></span><br><span class="line">    thisplot[predicted_label].set_color(<span class="string">'red'</span>)</span><br><span class="line">    thisplot[true_label].set_color(<span class="string">'blue'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Verify-predictions"><a href="#Verify-predictions" class="headerlink" title="Verify predictions"></a>Verify predictions</h3><p>With the model trained, you can use it to make predictions about some images.</p>
<p>Let’s look at the 0th image, predictions, and prediction array. Correct  prediction labels are blue and incorrect prediction labels are red. The  number gives the percentage (out of 100) for the predicted label.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">3</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plot_image(i, predictions[i], test_labels, test_images)<span class="comment">#show the original one</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plot_value_array(i, predictions[i],  test_labels)<span class="comment">#show the predicted one</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/12/8VbRJK.png" alt="8VbRJK.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">12</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">3</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plot_image(i, predictions[i], test_labels, test_images)</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plot_value_array(i, predictions[i],  test_labels)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p> <img src="https://s1.ax1x.com/2020/03/12/8VbWRO.png" alt="8VbWRO.png"></p>
<p>Let’s plot several images with their predictions. Note that the model can be wrong even when very confident. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Plot random 25 test images, their predicted labels, and the true labels.</span></span><br><span class="line"><span class="comment"># Color correct predictions in blue and incorrect predictions in red.</span></span><br><span class="line">h = set()</span><br><span class="line"><span class="keyword">while</span>(len(h)&lt;<span class="number">25</span>):</span><br><span class="line">    h.add(random.randint(<span class="number">0</span>, <span class="number">9999</span>))</span><br><span class="line">    </span><br><span class="line">num_rows = <span class="number">5</span></span><br><span class="line">num_cols = <span class="number">3</span></span><br><span class="line">num_images = num_rows*num_cols</span><br><span class="line">plt.figure(figsize=(<span class="number">2</span>*<span class="number">2</span>*num_cols, <span class="number">2</span>*num_rows))</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> h:</span><br><span class="line">    plt.subplot(num_rows, <span class="number">2</span>*num_cols, <span class="number">2</span>*i+<span class="number">1</span>)</span><br><span class="line">    plot_image(p, predictions[p], test_labels, test_images)</span><br><span class="line">    plt.title(<span class="string">"Index:&#123;&#125;"</span>.format(p))</span><br><span class="line">    plt.subplot(num_rows, <span class="number">2</span>*num_cols, <span class="number">2</span>*i+<span class="number">2</span>)</span><br><span class="line">    plot_value_array(p, predictions[p], test_labels)</span><br><span class="line">    plt.title(<span class="string">"Scores"</span>)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/12/8Vq9wn.png" alt="8Vq9wn.png"></p>
]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关海华AI比赛2</title>
    <url>/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B2/</url>
    <content><![CDATA[<h1 id="NN-based-Regression"><a href="#NN-based-Regression" class="headerlink" title="NN-based Regression"></a>NN-based Regression</h1><h2 id="1-Observe-the-data-from-statistical-department"><a href="#1-Observe-the-data-from-statistical-department" class="headerlink" title="1 Observe the data from statistical department"></a>1 Observe the data from statistical department</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#load the dataimport csvimport numpy as np# Declare lists for storing datasetoperationCost = np.array([])profit = np.array([])# Load dataset from csv filereader = csv.reader(open('./dataForCEO-cost&amp;profit.csv','r'))for row in reader: #put two dataset into to row, the type is float    operationCost = np.append(operationCost, float(row[0]))#row 1    profit = np.append(profit, float(row[1]))#row 2</span></span><br></pre></td></tr></table></figure>

<p>plot the trainset</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">%matplotlib inlineimport matplotlib.pyplot <span class="keyword">as</span> pltdef plotData(x, y, color=<span class="literal">None</span>): <span class="comment">#set rhe function    plt.scatter(x.tolist(), y.tolist(), marker='x', color=color)#tolist:turn from dataframe to list    plt.xlabel('Operation Cost in $')  #the label on the graph    plt.ylabel('Profit in $')    #plot itplt.figure(figsize=(6,4)) #plot the backgroundplotData(operationCost, profit) plt.show() #show:plot the data</span></span><br></pre></td></tr></table></figure>

<p><a href="https://s2.ax1x.com/2020/03/08/3z8Ap9.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3z8Ap9.png" alt="3z8Ap9.png"></a></p>
<h2 id="2-Divide-dataset-and-preprocess-dataset"><a href="#2-Divide-dataset-and-preprocess-dataset" class="headerlink" title="2 Divide dataset and preprocess dataset"></a>2 Divide dataset and preprocess dataset</h2><h3 id="2-1-Divide-dataset"><a href="#2-1-Divide-dataset" class="headerlink" title="2.1 Divide dataset"></a>2.1 Divide dataset</h3><p>First, you should divide the dataset into <strong>a trainset and a testset</strong>. As an example, we can define 80%80% of the raw dataset is trainset and the other 20%20% is testset.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dataset_x = operationCost dataset_y = profit num = len(dataset_x)<span class="comment">#find the length of the dataset_xsplitLine = int(0.8*num)# generate a random list to select data randomlyindex = [i for i in range(0, num)]import randomrandom.shuffle(index)# divide into trainset and testsettrain_x = dataset_x[index[0:splitLine]] #get from index from 0 to splitlinetrain_y = dataset_y[index[0:splitLine]] test_x = dataset_x[index[splitLine:num]]test_y = dataset_y[index[splitLine:num]]</span></span><br></pre></td></tr></table></figure>

<p> observe the trainset and testset in different color</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>))plotData(train_x, train_y) <span class="comment">#plotData(x-axis,y-axis)plotData(test_x, test_y)plt.legend(["Trainset","Testset"])plt.show()</span></span><br></pre></td></tr></table></figure>

<p><a href="https://s2.ax1x.com/2020/03/08/3zGOrq.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3zGOrq.png" alt="3zGOrq.png"></a></p>
<h2 id="2-2-Preprocess-dataset"><a href="#2-2-Preprocess-dataset" class="headerlink" title="2.2 Preprocess dataset"></a>2.2 Preprocess dataset</h2><p>Before training, we need to <strong>preprocess</strong> our trainset.<br>Because the values in dataset are too big, computation of loss may be difficult. So, one method of preprocessing is <strong>normalization</strong>.<br>In this case, we can do normalization by </p>
<p>Normalized Value=RawValue/NormalizeFactor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">normFactor = np.mean(train_y) <span class="comment"># for exampledef normalize(val):    return val / normFactor #the functionnormedTrain_x = normalize(train_x)normedTrain_y = normalize(train_y)normedTest_x = normalize(test_x)normedTest_y = normalize(test_y)plt.figure(figsize=(6,4))plt.scatter(normedTrain_x, normedTrain_y, marker='x')plt.scatter(normedTest_x, normedTest_y, marker='x')plt.legend(["Normalized Trainset","Normalized Testset"])plt.show()</span></span><br></pre></td></tr></table></figure>

<p><a href="https://s2.ax1x.com/2020/03/08/3zGOrq.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3zGOrq.png" alt="3zGOrq.png"></a></p>
<h2 id="3-Describe-your-neural-network"><a href="#3-Describe-your-neural-network" class="headerlink" title="3 Describe your neural network"></a>3 Describe your neural network</h2><p>import tensorflow as tf<br>from tensorflow import keras<br>from tensorflow.keras import layers</p>
<h3 id="describe-the-model"><a href="#describe-the-model" class="headerlink" title="describe the model"></a>describe the model</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tffrom tensorflow <span class="keyword">import</span> kerasfrom tensorflow.keras <span class="keyword">import</span> layers<span class="comment"># describe the modelmodel = keras.Sequential([    layers.Dense(16, activation='relu', input_shape=(1,)), #create layers    layers.Dense(16, activation='relu'),    layers.Dense(1)])model.summary()</span></span><br><span class="line"></span><br><span class="line">Model: <span class="string">"sequential_1"</span>_________________________________________________________________Layer (type)                 Output Shape              Param <span class="comment">#   =================================================================dense_3 (Dense)              (None, 16)                32        _________________________________________________________________dense_4 (Dense)              (None, 16)                272       _________________________________________________________________dense_5 (Dense)              (None, 1)                 17        =================================================================Total params: 321Trainable params: 321Non-trainable params: 0_________________________________________________________________</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#We can use Mean Square Error (MSE) as loss function, and use Stochastic Gradient Descent (SGD) as the process we train the model (i.e. "optimizer").model.compile(loss='mse', optimizer='sgd')#compile(source, filename, mode[, flags[, dont_inherit]])</span></span><br></pre></td></tr></table></figure>

<h2 id="4-Training"><a href="#4-Training" class="headerlink" title="4 Training"></a>4 Training</h2><p>We declare a variable to record the number of iteration.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">iters = <span class="number">0</span><span class="comment"># actual trainingfor i in range(1000):    iters = iters + 1#count the times    cost = model.train_on_batch(normedTrain_x, normedTrain_y)    if iters % 100 == 0: #show every 100 times        print("After %d iteration(s), train cost = %f "%(iters, cost))#show how many times# plot resultplt.figure(figsize=(6,4))plt.scatter(normedTrain_x, normedTrain_y, marker='x')temp = np.arange(min(normedTrain_x), max(normedTrain_x), 0.01)plt.plot(temp, model.predict(temp),color = 'cyan')plt.legend(["Model Prediction Now", "Normalized Trainset"])#the label on the topplt.show()</span></span><br></pre></td></tr></table></figure>

<p><a href="https://s2.ax1x.com/2020/03/08/3zBQSK.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3zBQSK.png" alt="3zBQSK.png"></a></p>
<h2 id="5-Evaluation-of-the-trained-model"><a href="#5-Evaluation-of-the-trained-model" class="headerlink" title="5 Evaluation of the trained model"></a>5 Evaluation of the trained model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">cost = model.evaluate(normalize(test_x), normalize(test_y))print(<span class="string">'test cost:'</span>, cost)W, b = model.layers[<span class="number">0</span>].get_weights()<span class="comment">#show the weightsprint('Weights=', W, '\nbiases=', b)W, b = model.layers[1].get_weights()print('Weights=', W, '\nbiases=', b)W, b = model.layers[2].get_weights()print('Weights=', W, '\nbiases=', b)</span></span><br></pre></td></tr></table></figure>

<h2 id="6-Post-processing-and-final-prediction"><a href="#6-Post-processing-and-final-prediction" class="headerlink" title="6 Post-processing and final prediction"></a>6 Post-processing and final prediction</h2><p>Before predicting, we need to <strong>post-process</strong> the output of the trained model.<br>In above, we use normalization to preprocess. So, we use <strong>denormalization</strong> to post-process the output of the trained model and get the final predict results.  </p>
<p>First, we define a function to denormalize.</p>
<p>Prediction=(Normalized Value)×(Normalize Factor)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denormalize</span><span class="params">(val)</span>:</span>    <span class="keyword">return</span> val * normFactortemp = np.arange(min(normedTrain_x), max(normedTrain_x), <span class="number">0.01</span>)pred_y = denormalize(model.predict(temp))pred_xAxis = denormalize(temp)<span class="comment">#plot the graphplt.figure(figsize=(6,4))plotData(train_x, train_y)plotData(test_x, test_y)plt.plot(pred_xAxis, pred_y, color='cyan')plt.legend(["Prediction","Trainset","Testset"])plt.show()</span></span><br></pre></td></tr></table></figure>

<p><a href="https://s2.ax1x.com/2020/03/08/3zDwNR.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3zDwNR.png" alt="3zDwNR.png"></a></p>
]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关海华AI比赛6</title>
    <url>/2020/03/31/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B6/</url>
    <content><![CDATA[<h1 id="06-1-Observe-hidden-layers"><a href="#06-1-Observe-hidden-layers" class="headerlink" title="06.1.Observe hidden layers"></a>06.1.Observe hidden layers</h1><p>Code by <a href="https://github.com/csy-tvgo" target="_blank" rel="noopener">karbon</a><br>This notebook is a modified version of <code>04.2.MNIST and CNN.ipynb</code> in order to observe the hidden layers.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function, unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="comment"># TensorFlow and tf.keras</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">print(tf.__version__)</span><br></pre></td></tr></table></figure>

<h2 id="Import-MNIST-dataset-and-preprocess-the-dataset"><a href="#Import-MNIST-dataset-and-preprocess-the-dataset" class="headerlink" title="Import MNIST dataset and preprocess the dataset"></a>Import MNIST dataset and preprocess the dataset</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mnist = keras.datasets.mnist</span><br><span class="line"></span><br><span class="line">(train_images, train_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># grayscale image has only 1 channal</span></span><br><span class="line"><span class="keyword">if</span> K.image_data_format() == <span class="string">'channels_first'</span>:</span><br><span class="line">    train_images = train_images.reshape(train_images.shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">    test_images = test_images.reshape(test_images.shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">    input_shape = (<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    train_images = train_images.reshape(train_images.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    test_images = test_images.reshape(test_images.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    input_shape = (<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">train_images_normed = train_images / <span class="number">255.0</span></span><br><span class="line">test_images_normed = test_images / <span class="number">255.0</span></span><br><span class="line">train_labels_onehot = keras.utils.to_categorical(train_labels, <span class="number">10</span>)</span><br><span class="line">test_labels_onehot = keras.utils.to_categorical(test_labels, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Build-the-model-and-train"><a href="#Build-the-model-and-train" class="headerlink" title="Build the model and train"></a>Build the model and train</h2><p>This example is <a href="http://yann.lecun.com/exdb/lenet/" target="_blank" rel="noopener">LeNet-5</a>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = keras.Sequential([</span><br><span class="line">    keras.layers.Conv2D(<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">                 activation=<span class="string">'relu'</span>,</span><br><span class="line">                 input_shape=input_shape),</span><br><span class="line">    keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    keras.layers.Conv2D(<span class="number">16</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    keras.layers.Flatten(),</span><br><span class="line">    keras.layers.Dense(<span class="number">120</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">84</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.compile(loss=keras.losses.categorical_crossentropy,</span><br><span class="line">              optimizer=keras.optimizers.Adam(),</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">model.fit(train_images_normed, train_labels_onehot, batch_size=<span class="number">100</span>, epochs=<span class="number">6</span>)</span><br><span class="line"><span class="comment"># It may need more than one minute</span></span><br></pre></td></tr></table></figure>

<h2 id="Make-prediction-and-observe-the-hidden-layers"><a href="#Make-prediction-and-observe-the-hidden-layers" class="headerlink" title="Make prediction and observe the hidden layers"></a>Make prediction and observe the hidden layers</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = random.randint(<span class="number">0</span>, len(test_images))</span><br><span class="line">inputImg = test_images[num]</span><br><span class="line">inputImg = np.expand_dims(inputImg, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">predictions = model.predict(test_images_normed)</span><br><span class="line"></span><br><span class="line">layer1 = Model(inputs=model.input, outputs=model.get_layer(index=<span class="number">0</span>).output)</span><br><span class="line">layer1_output = layer1.predict(inputImg)</span><br><span class="line">layer2 = Model(inputs=model.input, outputs=model.get_layer(index=<span class="number">1</span>).output)</span><br><span class="line">layer2_output = layer2.predict(inputImg)</span><br><span class="line">layer3 = Model(inputs=model.input, outputs=model.get_layer(index=<span class="number">2</span>).output)</span><br><span class="line">layer3_output = layer3.predict(inputImg)</span><br><span class="line">layer4 = Model(inputs=model.input, outputs=model.get_layer(index=<span class="number">3</span>).output)</span><br><span class="line">layer4_output = layer4.predict(inputImg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">18</span>,<span class="number">18</span>))</span><br><span class="line">plt.subplot(<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">plt.imshow(inputImg[<span class="number">0</span>,:,:,<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    img = layer1_output[<span class="number">0</span>, :, :, i]</span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">6</span>,i+<span class="number">7</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    img = layer2_output[<span class="number">0</span>, :, :, i]</span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">6</span>,i+<span class="number">13</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    img = layer3_output[<span class="number">0</span>, :, :, i]</span><br><span class="line">    plt.subplot(<span class="number">10</span>,<span class="number">8</span>,i+<span class="number">49</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    img = layer4_output[<span class="number">0</span>, :, :, i]</span><br><span class="line">    plt.subplot(<span class="number">10</span>,<span class="number">8</span>,i+<span class="number">65</span>)</span><br><span class="line">    plt.imshow(img)</span><br></pre></td></tr></table></figure>

<p>  <img src="https://s1.ax1x.com/2020/03/31/GKN4aV.png" alt="GKN4aV.png"></p>
<h1 id="06-2-Better-training-methods"><a href="#06-2-Better-training-methods" class="headerlink" title="06.2.Better training methods"></a>06.2.Better training methods</h1><p> <strong><em>Attention!</em></strong> Before running this notebook, you need to run <code>05.1.ReadAnnotationsFromJSON.ipynb</code> before </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function, unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="comment"># TensorFlow and tf.keras</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.callbacks <span class="keyword">import</span> LearningRateScheduler</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">print(tf.__version__)</span><br></pre></td></tr></table></figure>

<h2 id="Import-dataset-and-preprocessing"><a href="#Import-dataset-and-preprocessing" class="headerlink" title="Import dataset and preprocessing"></a>Import dataset and preprocessing</h2><p>Because our dataset is a bit large, RAM may not be enough to directly load all images. We can use <code>flow_from_dataframe</code> to load our dataset. (click <a href="https://keras.io/preprocessing/image/" target="_blank" rel="noopener">here</a> to read more about this function)<br>First, load labels from our <code>.csv</code> file. We use <code>pandas.read_csv</code>, it loads csv file to <code>DataFrame</code> format.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"./dataset/resizedFullGarbageDataset/train.csv"</span>, encoding=<span class="string">'gbk'</span>, dtype=str)</span><br><span class="line">df = df.sample(frac=<span class="number">1</span>).reset_index(drop=<span class="literal">True</span>) <span class="comment"># shuffle the datadrame</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<p> Then, use <code>keras.preprocessing.image.ImageDataGenerator</code> to load trainset.<br>You can add data augumentation settings in this function. Read <a href="https://keras.io/preprocessing/image/" target="_blank" rel="noopener">more about this function</a>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">batch_size = <span class="number">32</span> <span class="comment">#number one time</span></span><br><span class="line">sizeX, sizeY = <span class="number">112</span>, <span class="number">112</span> <span class="comment">#size</span></span><br><span class="line">apply_DataAugumentation = <span class="literal">True</span> <span class="comment">#数据增强 change the picture in different way to increase the database</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> apply_DataAugumentation:</span><br><span class="line">    datagen=ImageDataGenerator(rescale=<span class="number">1.</span>/<span class="number">255</span>, </span><br><span class="line">                               validation_split=<span class="number">0.1</span>,</span><br><span class="line">                               rotation_range=<span class="number">15</span>, <span class="comment">#旋转角度 rotation angle</span></span><br><span class="line">                               width_shift_range=<span class="number">0.2</span>, <span class="comment">#大小 size</span></span><br><span class="line">                               height_shift_range=<span class="number">0.2</span>,</span><br><span class="line">                               horizontal_flip=<span class="literal">True</span>, <span class="comment">#水平镜像 reflection</span></span><br><span class="line">                               vertical_flip=<span class="literal">False</span>, <span class="comment">#垂直镜像</span></span><br><span class="line">                               zoom_range=[<span class="number">0.8</span>, <span class="number">1</span>], <span class="comment">#缩放 zoom</span></span><br><span class="line">                               fill_mode=<span class="string">'reflect'</span></span><br><span class="line">                              )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    datagen=ImageDataGenerator(rescale=<span class="number">1.</span>/<span class="number">255</span>, validation_split=<span class="number">0.1</span>) <span class="comment">#10% is test group</span></span><br><span class="line">                          </span><br><span class="line">                          </span><br><span class="line">trainset = datagen.flow_from_dataframe(dataframe=df, directory=<span class="string">'./dataset/resizedFullGarbageDataset/train_resized'</span>,</span><br><span class="line">                                       x_col=<span class="string">'filename'</span>, y_col=<span class="string">'name'</span>, class_mode=<span class="string">'categorical'</span>, target_size=(sizeX,sizeY),</span><br><span class="line">                                       batch_size=batch_size, shuffle=<span class="literal">True</span>, seed=<span class="number">42</span>, subset=<span class="string">'training'</span>)</span><br><span class="line">testset = datagen.flow_from_dataframe(dataframe=df, directory=<span class="string">'./dataset/resizedFullGarbageDataset/train_resized'</span>,</span><br><span class="line">                                      x_col=<span class="string">'filename'</span>, y_col=<span class="string">'name'</span>, class_mode=<span class="string">'categorical'</span>, target_size=(sizeX,sizeY),</span><br><span class="line">                                      batch_size=batch_size, shuffle=<span class="literal">True</span>, seed=<span class="number">42</span>, subset=<span class="string">'validation'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = trainset.class_indices</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getname</span><span class="params">(index)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(names)[index] <span class="comment">#ues numbers to replace the names of different objects</span></span><br><span class="line"></span><br><span class="line">names</span><br></pre></td></tr></table></figure>

<p> <code>trainset[i]</code> has two parts. <code>trainset[i][0]</code> is the i-th batch of image, while <code>trainset[i][1]</code> is one-hot encodings which represents classes. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">8</span>))</span><br><span class="line">n = <span class="number">123</span> <span class="comment"># index of the batch you want to observe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">4</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(trainset[n][<span class="number">0</span>][i])</span><br><span class="line">    index = np.argmax(trainset[n][<span class="number">1</span>][i])</span><br><span class="line">    plt.xlabel(str(index) + <span class="string">':'</span> + getname(index))</span><br></pre></td></tr></table></figure>

<p>example:</p>
<p><img src="https://s1.ax1x.com/2020/03/31/GKB2MF.png" alt="GKB2MF.png"></p>
<h2 id="Import-a-pre-trained-model-without-prediction-layers-as-feature-extractor"><a href="#Import-a-pre-trained-model-without-prediction-layers-as-feature-extractor" class="headerlink" title="Import a pre-trained model without prediction layers as feature extractor"></a>Import a pre-trained model without prediction layers as feature extractor</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_shape = (sizeX, sizeY, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.applications.inception_v3 <span class="keyword">import</span> InceptionV3  <span class="comment"># use InceptionV3 as example </span></span><br><span class="line"><span class="comment">#we can change the model(from Keras documentation)</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.applications.inception_v3 <span class="keyword">import</span> preprocess_input, decode_predictions <span class="comment">#the function in the model </span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.regularizers <span class="keyword">import</span> l2</span><br><span class="line"></span><br><span class="line">base_model = InceptionV3(weights=<span class="string">'imagenet'</span>, include_top=<span class="literal">False</span>, input_shape=input_shape)</span><br><span class="line"><span class="comment">#the setting is according to the Keras Documentation</span></span><br><span class="line">base_model.summary()</span><br></pre></td></tr></table></figure>

<h2 id="Add-prediction-layers"><a href="#Add-prediction-layers" class="headerlink" title="Add prediction layers"></a>Add prediction layers</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = base_model.output</span><br><span class="line">x = keras.layers.AveragePooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))(x)</span><br><span class="line">x = keras.layers.Dropout(<span class="number">.4</span>)(x)</span><br><span class="line">x = keras.layers.Flatten()(x)</span><br><span class="line">x = keras.layers.Dense(<span class="number">198</span>, kernel_initializer=<span class="string">'glorot_uniform'</span>, kernel_regularizer=l2(<span class="number">.0005</span>), activation=<span class="string">'softmax'</span>)(x)</span><br><span class="line"></span><br><span class="line">model_finetune = Model(inputs=base_model.input, outputs=x)</span><br><span class="line"></span><br><span class="line">model_finetune.summary()</span><br></pre></td></tr></table></figure>

<h2 id="Define-optimizer-and-compile-the-model"><a href="#Define-optimizer-and-compile-the-model" class="headerlink" title="Define optimizer and compile the model"></a>Define optimizer and compile the model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">schedule</span><span class="params">(epoch)</span>:</span>   <span class="comment">#change the length of every step according to the epoch</span></span><br><span class="line">    <span class="keyword">if</span> epoch &lt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">.01</span></span><br><span class="line">    <span class="keyword">elif</span> epoch &lt;= <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">.002</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">.0004</span> <span class="comment">#change the step as the epoch change</span></span><br><span class="line">lr_scheduler = LearningRateScheduler(schedule)</span><br><span class="line"></span><br><span class="line">sgd = keras.optimizers.SGD(lr=<span class="number">.01</span>, momentum=<span class="number">.9</span>)</span><br><span class="line"></span><br><span class="line">model_finetune.compile(loss=keras.losses.categorical_crossentropy,</span><br><span class="line">              optimizer=sgd,</span><br><span class="line">              metrics=[<span class="string">"accuracy"</span>])</span><br></pre></td></tr></table></figure>

<h2 id="Start-learning"><a href="#Start-learning" class="headerlink" title="Start learning"></a>Start learning</h2><p>Because the dataset is large, <em>it may take a <strong>very long</strong> time.</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STEP_SIZE_TRAIN=trainset.n//trainset.batch_size</span><br><span class="line">STEP_SIZE_VALID=testset.n//testset.batch_size</span><br><span class="line">print(STEP_SIZE_TRAIN, STEP_SIZE_VALID)</span><br><span class="line"></span><br><span class="line">model_finetune.fit_generator(generator=trainset,</span><br><span class="line">                    steps_per_epoch=STEP_SIZE_TRAIN,</span><br><span class="line">                    validation_data=testset,</span><br><span class="line">                    validation_steps=STEP_SIZE_VALID,</span><br><span class="line">                    epochs=<span class="number">10</span>, <span class="comment">#this control the times it runs, the more the more accurate,but it have a top value</span></span><br><span class="line">                    callbacks=[lr_scheduler]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="Evaluate-the-model"><a href="#Evaluate-the-model" class="headerlink" title="Evaluate the model"></a>Evaluate the model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_finetune.evaluate_generator(testset,verbose=<span class="number">1</span>) <span class="comment">#add more layer</span></span><br></pre></td></tr></table></figure>

<h2 id="Save-the-trained-model"><a href="#Save-the-trained-model" class="headerlink" title="Save the trained model"></a>Save the trained model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">modelname = <span class="string">'finetuneExample0-9964'</span> </span><br><span class="line">model_finetune.save(<span class="string">'./trainedModels/'</span> + modelname + <span class="string">'.h5'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关海华AI比赛3</title>
    <url>/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B3/</url>
    <content><![CDATA[<h1 id="Neural-Network-based-Iris-Flower-Classification"><a href="#Neural-Network-based-Iris-Flower-Classification" class="headerlink" title="Neural-Network-based Iris Flower Classification"></a>Neural-Network-based Iris Flower Classification</h1><h2 id="0-Dataset-Description"><a href="#0-Dataset-Description" class="headerlink" title="0 Dataset Description"></a>0 Dataset Description</h2><p>Description Source: <a href="https://archive.ics.uci.edu/ml/datasets/Iris/" target="_blank" rel="noopener">https://archive.ics.uci.edu/ml/datasets/Iris/</a>  </p>
<p> <strong>Data Set Information:</strong><br>This is perhaps the best known database to be found in the pattern recognition literature. Fisher’s  paper is a classic in the field and is referenced frequently to this  day. (See Duda &amp; Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant.  One class is linearly separable from the other 2; the latter are NOT  linearly separable from each other.<br>Predicted attribute: class of iris plant.<br>This is an exceedingly simple domain.<br><strong>Attribute Information:</strong><br>column 1: sepal length in cm<br>column 2: sepal width in cm<br>column 3: petal length in cm<br>column 4: petal width in cm<br>column 5: class:<br>– Iris Setosa<br>– Iris Versicolour<br>– Iris Virginica   </p>
<h2 id="1-Observe-the-data"><a href="#1-Observe-the-data" class="headerlink" title="1 Observe the data"></a>1 Observe the data</h2><p>Load dataset from csv file.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"><span class="comment"># Declare list for storing dataset</span></span><br><span class="line">sepal_length = np.array([])</span><br><span class="line">sepal_width = np.array([])</span><br><span class="line">petal_length = np.array([])</span><br><span class="line">petal_width = np.array([])</span><br><span class="line">iris_class = np.array([])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dataset from csv file</span></span><br><span class="line">reader = csv.reader(open(<span class="string">'./irisDataset.csv'</span>,<span class="string">'r'</span>))</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> reader:<span class="comment">#to create the dataframe</span></span><br><span class="line">    sepal_length = np.append(sepal_length, float(row[<span class="number">0</span>])) <span class="comment">#separate different values to different rows</span></span><br><span class="line">    sepal_width = np.append(sepal_width, float(row[<span class="number">1</span>]))</span><br><span class="line">    petal_length = np.append(petal_length, float(row[<span class="number">2</span>]))</span><br><span class="line">    petal_width = np.append(petal_width, float(row[<span class="number">3</span>]))</span><br><span class="line">    iris_class = np.append(iris_class, row[<span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<p> Observe the format of data. (Take 10 examples randomly) </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">h =set()</span><br><span class="line"><span class="keyword">while</span>(len(h)&lt;<span class="number">10</span>):</span><br><span class="line">    h.add(random.randint(<span class="number">0</span>, <span class="number">149</span>))<span class="comment">#add the random number</span></span><br><span class="line">    <span class="comment">#choose 10 random example</span></span><br><span class="line">print(<span class="string">"ID \t SEPAL_LENGTH \t SEPAL_WIDTH \t PETAL_LENGTH \t PETAL_WIDTH \t|| CLASS"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> h:</span><br><span class="line">    print(<span class="string">"%d \t %.1f \t\t %.1f \t\t %.1f \t\t %.1f \t\t|| %s"</span> <span class="comment">#print the result</span></span><br><span class="line">          % (i, sepal_length[i], sepal_width[i], petal_length[i], petal_width[i], iris_class[i]))<span class="comment">#print the 10 example</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ID 	 SEPAL_LENGTH 	 SEPAL_WIDTH 	 PETAL_LENGTH 	 PETAL_WIDTH 	|| CLASS</span><br><span class="line">33 	    5.5 		    4.2 		    1.4 		    0.2 		|| setosa</span><br><span class="line">132     6.4 		    2.8 		    5.6 		    2.2 		|| virginica</span><br><span class="line">135     7.7 		    3.0 		    6.1 		    2.3 		|| virginica</span><br><span class="line">77 	    6.7 		    3.0 		    5.0 		    1.7 		|| versicolor</span><br><span class="line">14 	    5.8 		    4.0 		    1.2 		    0.2 		|| setosa</span><br><span class="line">15 	    5.7 		    4.4 		    1.5 		    0.4 		|| setosa</span><br><span class="line">146     6.3 		    2.5 		    5.0 		    1.9 		|| virginica</span><br><span class="line">54 	    6.5 		    2.8 		    4.6 		    1.5 		|| versicolor</span><br><span class="line">58 	    6.6 		    2.9 		    4.6 		    1.3 		|| versicolor</span><br><span class="line">31 	    5.4 		    3.4 		    1.5 		    0.4 		|| setosa</span><br></pre></td></tr></table></figure>

<p> Plot dataset. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#plot 3 kinds of iris, letting width y-axis, length x-axis, and plot the label(using sepal values)</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>) <span class="comment">#plot two background</span></span><br><span class="line">plt.scatter(sepal_length[iris_class==<span class="string">'setosa'</span>], sepal_width[iris_class==<span class="string">'setosa'</span>])</span><br><span class="line">plt.scatter(sepal_length[iris_class==<span class="string">'versicolor'</span>],sepal_width[iris_class==<span class="string">'versicolor'</span>])</span><br><span class="line">plt.scatter(sepal_length[iris_class==<span class="string">'virginica'</span>], sepal_width[iris_class==<span class="string">'virginica'</span>])</span><br><span class="line">plt.legend((<span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,<span class="string">"virginica"</span>)) </span><br><span class="line">plt.xlabel(<span class="string">'sepal_length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'sepal_width'</span>)</span><br><span class="line"><span class="comment">#plot 3 kinds of iris, letting width y-axis, length x-axis, and plot the label(using petal values)</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.scatter(petal_length[iris_class==<span class="string">'setosa'</span>], petal_width[iris_class==<span class="string">'setosa'</span>])</span><br><span class="line">plt.scatter(petal_length[iris_class==<span class="string">'versicolor'</span>], petal_width[iris_class==<span class="string">'versicolor'</span>])</span><br><span class="line">plt.scatter(petal_length[iris_class==<span class="string">'virginica'</span>], petal_width[iris_class==<span class="string">'virginica'</span>])</span><br><span class="line">plt.legend((<span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,<span class="string">"virginica"</span>))</span><br><span class="line">plt.xlabel(<span class="string">'petal_length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'petal_width'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#sepal values can't separate them as gragh1 shows</span></span><br><span class="line"><span class="comment">#petal values can separate the as gragh2 shows,so we choose the petal values</span></span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/3zsonS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3zsonS.png" alt="3zsonS.png"></a></p>
<h2 id="2-Preprocess-dataset-and-Divide-dataset"><a href="#2-Preprocess-dataset-and-Divide-dataset" class="headerlink" title="2 Preprocess dataset and Divide dataset"></a>2 Preprocess dataset and Divide dataset</h2><p>Through observing the figure above, we can find that it’s easier to classify iris flowers by <code>petal_width</code> and <code>petal_length</code>. So, we can simplify the problem by ignoring <code>sepal_width</code> and <code>sepal_length</code>. (This kind of operation may decrease accuracy)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#put the petal values into array</span></span><br><span class="line">dataset_x = np.array((petal_length, petal_width)).T</span><br><span class="line"></span><br><span class="line"><span class="comment">#change differet kinds of iris into 0,1,2, which is easy to be recognized for computer</span></span><br><span class="line">dataset_y = np.zeros(iris_class.shape, dtype=int)</span><br><span class="line">dataset_y[iris_class == <span class="string">'setosa'</span>] = <span class="number">0</span></span><br><span class="line">dataset_y[iris_class == <span class="string">'versicolor'</span>] = <span class="number">1</span></span><br><span class="line">dataset_y[iris_class == <span class="string">'virginica'</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = len(iris_class)</span><br><span class="line">splitLine = int(<span class="number">0.8</span>*num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate a random list to select data randomly</span></span><br><span class="line">index = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, num)]</span><br><span class="line">random.shuffle(index) <span class="comment">#put them in random order</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># divide into trainset and testset</span></span><br><span class="line">train_x = dataset_x[index[<span class="number">0</span>:splitLine]]</span><br><span class="line">train_y = dataset_y[index[<span class="number">0</span>:splitLine]] </span><br><span class="line">test_x = dataset_x[index[splitLine:num]]</span><br><span class="line">test_y = dataset_y[index[splitLine:num]]</span><br></pre></td></tr></table></figure>

<p> Encode the classes into one-hot encoding.<br>For example,<br>0→[1,0,0]<br>1→[0,1,0]<br>2→[0,0,1] </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># One-Hot Encoding</span></span><br><span class="line">train_y_onehot = keras.utils.to_categorical(train_y, <span class="number">3</span>)</span><br><span class="line">test_y_onehot = keras.utils.to_categorical(test_y, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>Let’s observe the trainset and testset in different marker.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#put the trainset and testset in one graph to compare</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line"><span class="comment">#the "+" means trainset</span></span><br><span class="line"><span class="comment">#different colours mean different kinds of iris</span></span><br><span class="line">plt.scatter(train_x[train_y==<span class="number">0</span>, <span class="number">0</span>], train_x[train_y==<span class="number">0</span>, <span class="number">1</span>], marker=<span class="string">'+'</span>, color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(train_x[train_y==<span class="number">1</span>, <span class="number">0</span>], train_x[train_y==<span class="number">1</span>, <span class="number">1</span>], marker=<span class="string">'+'</span>, color=<span class="string">'green'</span>)</span><br><span class="line">plt.scatter(train_x[train_y==<span class="number">2</span>, <span class="number">0</span>], train_x[train_y==<span class="number">2</span>, <span class="number">1</span>], marker=<span class="string">'+'</span>, color=<span class="string">'blue'</span>)</span><br><span class="line"><span class="comment"># "v" means testset</span></span><br><span class="line">plt.scatter(test_x[test_y==<span class="number">0</span>, <span class="number">0</span>], test_x[test_y==<span class="number">0</span>, <span class="number">1</span>], marker=<span class="string">'v'</span>, color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(test_x[test_y==<span class="number">1</span>, <span class="number">0</span>], test_x[test_y==<span class="number">1</span>, <span class="number">1</span>], marker=<span class="string">'v'</span>, color=<span class="string">'green'</span>)</span><br><span class="line">plt.scatter(test_x[test_y==<span class="number">2</span>, <span class="number">0</span>], test_x[test_y==<span class="number">2</span>, <span class="number">1</span>], marker=<span class="string">'v'</span>, color=<span class="string">'blue'</span>)</span><br><span class="line">plt.legend((<span class="string">"train_setosa"</span>,<span class="string">"train_versicolor"</span>,<span class="string">"train_virginica"</span>,<span class="string">"test_setosa"</span>,<span class="string">"test_versicolor"</span>,<span class="string">"test_virginica"</span>)) <span class="comment">#plot the label</span></span><br><span class="line">plt.xlabel(<span class="string">'petal_length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'petal_width'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/03/08/3zc16P.png" alt="3zc16P.png"></p>
<h2 id="3-Describe-your-neural-network"><a href="#3-Describe-your-neural-network" class="headerlink" title="3 Describe your neural network"></a>3 Describe your neural network</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># describe the model</span></span><br><span class="line">model = keras.Sequential([</span><br><span class="line">    layers.Dense(units=<span class="number">64</span>, activation=<span class="string">'relu'</span>, input_shape=(<span class="number">2</span>,)),</span><br><span class="line">    layers.Dense(units=<span class="number">64</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.Dense(units=<span class="number">3</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Model: &quot;sequential_1&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">dense_3 (Dense)              (None, 64)                192       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_4 (Dense)              (None, 64)                4160      </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_5 (Dense)              (None, 3)                 195       </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 4,547</span><br><span class="line">Trainable params: 4,547</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure>

<p> We can use <strong>Mean Square Error (MSE)</strong> as <code>loss</code> function, and use <strong>Stochastic Gradient Descent (SGD)</strong> as the process we train the model (i.e. “<code>optimizer</code>“).<br>(PS: MSE is not so suitable for classification) </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.compile(loss=<span class="string">'mse'</span>, optimizer=<span class="string">'sgd'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="4-Training"><a href="#4-Training" class="headerlink" title="4 Training"></a>4 Training</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.fit(train_x, train_y_onehot, batch_size=<span class="number">4</span>, epochs=<span class="number">100</span>, verbose=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#fit( x, y, batch_size=32, epochs=10, verbose=1, callbacks=None,validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0)</span></span><br></pre></td></tr></table></figure>

<h2 id="5-Evaluation-of-the-trained-model"><a href="#5-Evaluation-of-the-trained-model" class="headerlink" title="5 Evaluation of the trained model"></a>5 Evaluation of the trained model</h2><p>We can use <code>.evaluate</code> to compute <strong>loss</strong> on testset.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cost = model.evaluate(test_x, test_y_onehot)</span><br><span class="line">print(<span class="string">'test cost:'</span>, cost) <span class="comment">#find the cost(difference to the real value)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = model.predict(test_x)<span class="comment">#predict the next five value</span></span><br><span class="line">print(scores)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = np.array([])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> scores:</span><br><span class="line">    results = np.append(results, np.argmax(i))</span><br><span class="line">print(results)</span><br><span class="line"><span class="comment">#out:[0. 2. 0. 2. 1. 2. 1. 1. 2. 2. 2. 2. 0. 0. 1. 2. 2. 0. 2. 0. 2. 2. 1. 1. 0. 2. 2. 1. 1. 1.]</span></span><br></pre></td></tr></table></figure>

<p> Visualize our model of prediction. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># draw ground truth</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">plt.scatter(test_x[test_y==<span class="number">0</span>, <span class="number">0</span>], test_x[test_y==<span class="number">0</span>, <span class="number">1</span>], marker=<span class="string">'v'</span>, color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(test_x[test_y==<span class="number">1</span>, <span class="number">0</span>], test_x[test_y==<span class="number">1</span>, <span class="number">1</span>], marker=<span class="string">'v'</span>, color=<span class="string">'green'</span>)</span><br><span class="line">plt.scatter(test_x[test_y==<span class="number">2</span>, <span class="number">0</span>], test_x[test_y==<span class="number">2</span>, <span class="number">1</span>], marker=<span class="string">'v'</span>, color=<span class="string">'blue'</span>)</span><br><span class="line">plt.legend((<span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,<span class="string">"virginica"</span>))</span><br><span class="line">plt.xlabel(<span class="string">'petal_length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'petal_width'</span>)</span><br><span class="line">plt.title(<span class="string">'Ground Truth of Testset'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># draw prediction</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">plt.scatter(test_x[results==<span class="number">0</span>, <span class="number">0</span>], test_x[results==<span class="number">0</span>, <span class="number">1</span>], color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(test_x[results==<span class="number">1</span>, <span class="number">0</span>], test_x[results==<span class="number">1</span>, <span class="number">1</span>], color=<span class="string">'green'</span>)</span><br><span class="line">plt.scatter(test_x[results==<span class="number">2</span>, <span class="number">0</span>], test_x[results==<span class="number">2</span>, <span class="number">1</span>], color=<span class="string">'blue'</span>)</span><br><span class="line">plt.legend((<span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,<span class="string">"virginica"</span>))</span><br><span class="line">plt.xlabel(<span class="string">'petal_length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'petal_width'</span>)</span><br><span class="line">plt.title(<span class="string">'Prediction of Testset'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># draw classiication areas</span></span><br><span class="line">x = np.arange(min(test_x[:,<span class="number">0</span>]), max(test_x[:,<span class="number">0</span>]), <span class="number">0.05</span>)</span><br><span class="line">y = np.arange(min(test_x[:,<span class="number">1</span>]), max(test_x[:,<span class="number">1</span>]), <span class="number">0.05</span>)</span><br><span class="line">X,Y = np.meshgrid(x,y)</span><br><span class="line">grid = np.array((X.flatten(), Y.flatten())).T</span><br><span class="line">scores_1 = model.predict(grid)</span><br><span class="line">decisions = np.array([])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> scores_1:</span><br><span class="line">    decisions = np.append(decisions, np.argmax(i))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">plt.scatter(grid[decisions==<span class="number">0</span>, <span class="number">0</span>], grid[decisions==<span class="number">0</span>, <span class="number">1</span>], color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(grid[decisions==<span class="number">1</span>, <span class="number">0</span>], grid[decisions==<span class="number">1</span>, <span class="number">1</span>], color=<span class="string">'green'</span>)</span><br><span class="line">plt.scatter(grid[decisions==<span class="number">2</span>, <span class="number">0</span>], grid[decisions==<span class="number">2</span>, <span class="number">1</span>], color=<span class="string">'blue'</span>)</span><br><span class="line">plt.legend((<span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,<span class="string">"virginica"</span>))</span><br><span class="line">plt.xlabel(<span class="string">'petal_length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'petal_width'</span>)</span><br><span class="line">plt.title(<span class="string">'Classification Areas'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2020/03/08/3zgTvq.png" alt="3zgTvq.png"></p>
]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关海华AI比赛5</title>
    <url>/2020/03/23/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9B5/</url>
    <content><![CDATA[<h1 id="05-1-Read-annotations-from-JSON-file"><a href="#05-1-Read-annotations-from-JSON-file" class="headerlink" title="05.1.Read annotations from JSON file"></a>05.1.Read annotations from JSON file</h1><h2 id="Import-packages"><a href="#Import-packages" class="headerlink" title="Import packages"></a>Import packages</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*- </span></span><br><span class="line"><span class="comment"># import packages</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>

<h2 id="Open-JSON-file"><a href="#Open-JSON-file" class="headerlink" title="Open JSON file"></a>Open JSON file</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'./dataset/resizedFullGarbageDataset/train.json'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    train_labels = json.load(f) <span class="comment">#read the file</span></span><br></pre></td></tr></table></figure>

<h2 id="Observe-the-data-format"><a href="#Observe-the-data-format" class="headerlink" title="Observe the data format"></a>Observe the data format</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_labels <span class="comment">#observe the types of the data</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">out:&#123;&#39;info&#39;: None,</span><br><span class="line">     &#39;lincenses&#39;: None,</span><br><span class="line">     &#39;images&#39;: [&#123;&#39;file_name&#39;: &#39;images_withoutrect&#x2F;11003.png&#39;,</span><br><span class="line">     &#39;height&#39;: 1080,</span><br><span class="line">     &#39;width&#39;: 1920,</span><br><span class="line">     &#39;image_id&#39;: 11003&#125;,</span><br><span class="line">     &#123;&#39;file_name&#39;: &#39;images_withoutrect&#x2F;11004.png&#39;,</span><br><span class="line">      &#39;height&#39;: 1080,</span><br><span class="line">      &#39;width&#39;: 1920,</span><br><span class="line">      &#39;image_id&#39;: 11004&#125;,</span><br><span class="line">      ......</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">type(train_labels) <span class="comment">#find the tye of the labels</span></span><br><span class="line"><span class="comment">#out:dict</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_labels.keys()</span><br><span class="line"><span class="comment">#out:dict_keys(['info', 'lincenses', 'images', 'type', 'annotations', 'categories'])</span></span><br></pre></td></tr></table></figure>

<h2 id="Read-categories"><a href="#Read-categories" class="headerlink" title="Read categories"></a>Read categories</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_labels[<span class="string">'categories'</span>] <span class="comment">#print the categories</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">out:[&#123;&#39;id&#39;: 1, &#39;name&#39;: &#39;瓜子壳&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: 2, &#39;name&#39;: &#39;核桃&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: 3, &#39;name&#39;: &#39;花生壳&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: 4, &#39;name&#39;: &#39;毛豆壳&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: 5, &#39;name&#39;: &#39;西瓜子&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: 6, &#39;name&#39;: &#39;枣核&#39;&#125;,</span><br><span class="line">     ......</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">type(train_labels[<span class="string">'categories'</span>])</span><br><span class="line"><span class="comment">#out:list</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_labels[<span class="string">'categories'</span>][<span class="number">0</span>]<span class="comment">#choose the first one</span></span><br><span class="line"><span class="comment">#out:&#123;'id': 1, 'name': '瓜子壳'&#125;</span></span><br></pre></td></tr></table></figure>

<p> Convert to list in order to use easier. <strong>(Attention: <code>id</code> begins at 1, while the index of list begins at 0)</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = []</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> train_labels[<span class="string">'categories'</span>]:</span><br><span class="line">    names.append(label[<span class="string">'name'</span>])</span><br><span class="line">print(names) <span class="comment">#put the categories into a list and show it</span></span><br></pre></td></tr></table></figure>

<p>#out:[‘瓜子壳’, ‘核桃’, ‘花生壳’, ‘毛豆壳’, ‘西瓜子’, ‘枣核’, ‘话梅核’, ‘苹果皮’, ‘柿子皮’, ‘西瓜皮’, ‘香蕉皮’, ‘柚子皮’, ‘荔枝壳’, ‘芒果皮’, ‘苹果核’, ‘干果’, ‘桔子皮’, ‘饼干’, ‘面包’, ‘糖果’, ‘宠物饲料’, ‘风干食品’, ‘蜜饯’, ‘肉干’, ‘冲泡饮料粉’, ‘奶酪’, ‘罐头’, ‘糕饼’, ‘薯片’, ‘树叶’, ‘杂草’, ‘绿植’, ‘鲜花’, ‘豆类’, ‘动物内脏’, ‘绿豆饭’, ‘谷类及加工物’, ‘贝类去硬壳’, ‘虾’, ‘面食’, ‘肉类’, ‘五谷杂粮’, ‘排骨-小肋排’, ‘鸡’, ‘鸡骨头’, ‘螺蛳’, ‘鸭’, ‘鱼’, ‘菜根’, ‘菜叶’, ‘菌菇类’, ‘鱼鳞’, ‘调料’, ‘茶叶渣’, ‘咖啡渣’, ‘粽子’, ‘动物蹄’, ‘小龙虾’, ‘蟹壳’, ‘酱料’, ‘鱼骨头’, ‘蛋壳’, ‘中药材’, ‘中药渣’, ‘镜子’, ‘玻璃制品’, ‘窗玻璃’, ‘碎玻璃片’, ‘化妆品玻璃瓶’, ‘食品及日用品玻璃瓶罐’, ‘保温杯’, ‘玻璃杯’, ‘图书期刊’, ‘报纸’, ‘食品外包装盒’, ‘鞋盒’, ‘利乐包’, ‘广告单’, ‘打印纸’, ‘购物纸袋’, ‘日历’, ‘快递纸袋’, ‘信封’, ‘烟盒’, ‘易拉罐’, ‘金属制品’, ‘吸铁石’, ‘铝制品’, ‘金属瓶罐’, ‘金属工具’, ‘罐头盒’, ‘勺子’, ‘菜刀’, ‘叉子’, ‘锅’, ‘金属筷子’, ‘数据线’, ‘塑料玩具’, ‘矿泉水瓶’, ‘塑料泡沫’, ‘塑料包装’, ‘硬塑料’, ‘一次性塑料餐盒餐具’, ‘电线’, ‘塑料衣架’, ‘密胺餐具’, ‘亚克力板’, ‘PVC管’, ‘插座’, ‘化妆品塑料瓶’, ‘篮球’, ‘足球’, ‘KT板’, ‘食品塑料盒’, ‘食用油桶’, ‘塑料杯’, ‘塑料盆’, ‘一次性餐盒’, ‘废弃衣服’, ‘鞋’, ‘碎布’, ‘书包’, ‘床上用品’, ‘棉被’, ‘丝绸手绢’, ‘枕头’, ‘毛绒玩具’, ‘皮带’, ‘电路板’, ‘充电宝’, ‘木制品’, ‘优盘’, ‘灯管灯泡’, ‘节能灯’, ‘二极管’, ‘纽扣电池’, ‘手机电池’, ‘镍镉电池’, ‘锂电池’, ‘蓄电池’, ‘胶卷’, ‘照片’, ‘指甲油瓶’, ‘X光片’, ‘农药瓶’, ‘杀虫剂及罐’, ‘蜡烛’, ‘墨盒’, ‘染发剂壳’, ‘消毒液瓶’, ‘油漆桶’, ‘药品包装’, ‘药瓶’, ‘废弃针管’, ‘输液管’, ‘口服液瓶’, ‘眼药水瓶’, ‘水银温度计’, ‘水银血压计’, ‘胶囊’, ‘药片’, ‘固体杀虫剂’, ‘甘蔗皮’, ‘坚果壳’, ‘橡皮泥’, ‘毛发’, ‘棉签’, ‘创可贴’, ‘口红’, ‘笔’, ‘纸巾’, ‘胶带’, ‘湿巾’, ‘水彩笔’, ‘打火机’, ‘防碎气泡膜’, ‘榴莲壳’, ‘睫毛膏’, ‘眼影’, ‘仓鼠浴沙’, ‘大骨棒’, ‘旧毛巾’, ‘竹制品’, ‘粉笔’, ‘一次性口罩’, ‘一次性手套’, ‘粉底液’, ‘灰土’, ‘尼龙制品’, ‘尿片’, ‘雨伞’, ‘带胶制品’, ‘牙膏皮’, ‘狗尿布’, ‘椰子壳’, ‘粉扑’, ‘破碗碟’, ‘陶瓷’, ‘卫生纸’, ‘烟头’, ‘假睫毛’, ‘猫砂’, ‘牙刷’, ‘玉米棒’]</p>
<h2 id="Read-annotations"><a href="#Read-annotations" class="headerlink" title="Read annotations"></a>Read annotations</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_labels[<span class="string">'annotations'</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">out:[&#123;&#39;area&#39;: 81909.20209190401,</span><br><span class="line">      &#39;iscrowd&#39;: 0,</span><br><span class="line">      &#39;image_id&#39;: 11003,</span><br><span class="line">      &#39;bbox&#39;: [636.08832, 305.77176, 298.5888, 274.32108000000005],</span><br><span class="line">      &#39;category_id&#39;: 2&#125;,</span><br><span class="line">     &#123;&#39;area&#39;: 105273.393928704,</span><br><span class="line">      &#39;iscrowd&#39;: 0,</span><br><span class="line">      &#39;image_id&#39;: 11004,</span><br><span class="line">      &#39;bbox&#39;: [804.4512, 420.56064, 306.46848, 343.5048],</span><br><span class="line">      &#39;category_id&#39;: 2&#125;,</span><br><span class="line">      ......</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">type(train_labels[<span class="string">'annotations'</span>])</span><br><span class="line"><span class="comment">#out:list</span></span><br></pre></td></tr></table></figure>

<p> As an example, let’s load an image and its annotation. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = random.randint(<span class="number">1</span>, len(train_labels[<span class="string">'annotations'</span>])) <span class="comment"># select the random n-th image as example</span></span><br><span class="line"></span><br><span class="line">image_id = train_labels[<span class="string">'annotations'</span>][n][<span class="string">'image_id'</span>]</span><br><span class="line">category_id = train_labels[<span class="string">'annotations'</span>][n][<span class="string">'category_id'</span>]</span><br><span class="line">category_name = names[category_id - <span class="number">1</span>]  <span class="comment"># ←look here</span></span><br><span class="line"></span><br><span class="line">image = cv2.imread(<span class="string">'./dataset/resizedFullGarbageDataset/train_resized/'</span> + str(image_id) + <span class="string">'.jpg'</span>) <span class="comment">#load the pictures</span></span><br><span class="line"></span><br><span class="line">plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)) <span class="comment">#use cv2 to show the picture</span></span><br><span class="line">print(<span class="string">"Index:%d\nFilename:%d.jpg\nCategory:%d-%s"</span>%(n, image_id, category_id, category_name)) <span class="comment">#\n means changing to another row</span></span><br><span class="line"><span class="comment">#out:Index:47056</span></span><br><span class="line"><span class="comment">#    Filename:265768.jpg</span></span><br><span class="line"><span class="comment">#    Category:122-书包</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/22/8If1PA.png" alt="8If1PA.png"></p>
<p>Observe the distribution of classes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image_ids = []</span><br><span class="line">category_ids = []</span><br><span class="line">category_names = []</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> train_labels[<span class="string">'annotations'</span>]:</span><br><span class="line">    image_ids.append(label[<span class="string">'image_id'</span>]) <span class="comment">#add pictures to the list</span></span><br><span class="line">    category_ids.append(label[<span class="string">'category_id'</span>]) <span class="comment">#add category</span></span><br><span class="line">    category_names.append(names[label[<span class="string">'category_id'</span>] - <span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.hist(category_ids, bins=len(names), density=<span class="number">0</span>)</span><br><span class="line">plt.xlim(<span class="number">1</span>, <span class="number">204</span>)</span><br><span class="line">plt.xlabel(<span class="string">"category_id"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"number"</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/22/8IfBPs.png" alt="8IfBPs.png"></p>
<h2 id="Convert-annotations-into-CSV-format"><a href="#Convert-annotations-into-CSV-format" class="headerlink" title="Convert annotations into CSV format"></a>Convert annotations into CSV format</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'./dataset/resizedFullGarbageDataset/train.csv'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"id,label,name,filename\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(image_ids)):</span><br><span class="line">        f.write(<span class="string">"%s,%s,%s,%s.jpg\n"</span>%(str(image_ids[i]), str(category_ids[i]), names[category_ids[i]<span class="number">-1</span>], str(image_ids[i])))</span><br></pre></td></tr></table></figure>





<h1 id="05-2-Train-a-garbage-classifier"><a href="#05-2-Train-a-garbage-classifier" class="headerlink" title="05.2.Train a garbage classifier"></a>05.2.Train a garbage classifier</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function, unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="comment"># TensorFlow and tf.keras</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.callbacks <span class="keyword">import</span> LearningRateScheduler</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># ← a new package is needed to be install, use &gt; conda install pandas</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">print(tf.__version__)</span><br></pre></td></tr></table></figure>

<h2 id="Import-dataset-and-preprocessing"><a href="#Import-dataset-and-preprocessing" class="headerlink" title="Import dataset and preprocessing"></a>Import dataset and preprocessing</h2><p>Because our dataset is a bit large, RAM may not be enough to directly load all images. We can use <code>flow_from_dataframe</code> to load our dataset. (click <a href="https://keras.io/preprocessing/image/" target="_blank" rel="noopener">here</a> to read more about this function)<br>First, load labels from our <code>.csv</code> file. We use <code>pandas.read_csv</code>, it loads csv file to <code>DataFrame</code> format.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df=pd.read_csv(<span class="string">"./dataset/resizedFullGarbageDataset/train.csv"</span>, encoding=<span class="string">'gbk'</span>, dtype=str)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th>id</th>
<th>label</th>
<th>name</th>
<th>filename</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>11003</td>
<td>2</td>
<td>核桃</td>
<td>11003.jpg</td>
</tr>
<tr>
<td>1</td>
<td>11004</td>
<td>2</td>
<td>核桃</td>
<td>11004.jpg</td>
</tr>
<tr>
<td>2</td>
<td>11005</td>
<td>2</td>
<td>核桃</td>
<td>11005.jpg</td>
</tr>
<tr>
<td>3</td>
<td>11006</td>
<td>2</td>
<td>核桃</td>
<td>11006.jpg</td>
</tr>
<tr>
<td>…</td>
<td>……</td>
<td>……</td>
<td>……</td>
<td>……</td>
</tr>
</tbody></table>
<p> Then, use <code>keras.preprocessing.image.ImageDataGenerator</code> to load trainset.<br>‘catagories’ in the JSON file says, the dataset contains 202 classes, but actually it has only 198 classes. To avoid confusing <code>df[&#39;label&#39;]</code> with index of classifier output, we use <code>df[&#39;name&#39;]</code> as input.<br>75% of images are set as trainset, while 25% of images are set as testset. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">sizeX, sizeY = <span class="number">112</span>, <span class="number">112</span></span><br><span class="line"></span><br><span class="line">datagen=ImageDataGenerator(rescale=<span class="number">1.</span>/<span class="number">255</span>, validation_split=<span class="number">0.25</span>)</span><br><span class="line"><span class="comment">#trainset:</span></span><br><span class="line">trainset = datagen.flow_from_dataframe(dataframe=df, directory=<span class="string">'./dataset/resizedFullGarbageDataset/train_resized'</span>, <span class="comment">#the position of file</span></span><br><span class="line">                                       x_col=<span class="string">'filename'</span>, y_col=<span class="string">'name'</span>, class_mode=<span class="string">'categorical'</span>, target_size=(sizeX,sizeY),</span><br><span class="line">                                       batch_size=batch_size, shuffle=<span class="literal">True</span>, seed=<span class="number">0Xabc123</span>, subset=<span class="string">'training'</span>)</span><br><span class="line"><span class="comment">#testset:</span></span><br><span class="line">testset = datagen.flow_from_dataframe(dataframe=df, directory=<span class="string">'./dataset/resizedFullGarbageDataset/train_resized'</span>,</span><br><span class="line">                                      x_col=<span class="string">'filename'</span>, y_col=<span class="string">'name'</span>, class_mode=<span class="string">'categorical'</span>, target_size=(sizeX,sizeY),</span><br><span class="line">                                      batch_size=batch_size, shuffle=<span class="literal">True</span>, seed=<span class="number">0Xabc123</span>, subset=<span class="string">'validation'</span>)</span><br></pre></td></tr></table></figure>

<p> Correspondingly, we can use <code>.class_indices</code> to see the relationship between <code>name</code> and <code>index</code> before one-hot encoding. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = trainset.class_indices</span><br><span class="line">names</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;KT板&#39;: 0,</span><br><span class="line"> &#39;PVC管&#39;: 1,</span><br><span class="line"> &#39;X光片&#39;: 2,</span><br><span class="line"> &#39;一次性口罩&#39;: 3,</span><br><span class="line"> &#39;一次性塑料餐盒餐具&#39;: 4,</span><br><span class="line"> &#39;一次性手套&#39;: 5,</span><br><span class="line"> ......</span><br></pre></td></tr></table></figure>

<p> We can define a function to get <code>name</code> through <code>index</code>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getname</span><span class="params">(index)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(names)[index]</span><br></pre></td></tr></table></figure>

<p> <code>trainset[i]</code> has two parts. <code>trainset[i][0]</code> is the i-th batch of image, while <code>trainset[i][1]</code> is one-hot encodings which represents classes. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">6</span>))</span><br><span class="line">n = random.randint(<span class="number">0</span>,<span class="number">1874</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">4</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(trainset[n][<span class="number">0</span>][i]) <span class="comment">#plot the pictures</span></span><br><span class="line">    index = np.argmax(trainset[n][<span class="number">1</span>][i])</span><br><span class="line">    plt.xlabel(str(index) + <span class="string">':'</span> + getname(index)) <span class="comment">#show the category</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/23/87h9DP.png" alt="87h9DP.png"></p>
<h2 id="Describe-our-model"><a href="#Describe-our-model" class="headerlink" title="Describe our model"></a>Describe our model</h2><p>As an example, we describe the following model.<br><em>(This example may not have good performance.)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_shape = (sizeX, sizeY, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">model = keras.Sequential([</span><br><span class="line">    keras.layers.Conv2D(<span class="number">16</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">                 activation=<span class="string">'relu'</span>,</span><br><span class="line">                 input_shape=input_shape),</span><br><span class="line">    keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    keras.layers.Conv2D(<span class="number">32</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    keras.layers.Flatten(),</span><br><span class="line">    keras.layers.Dense(<span class="number">120</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">84</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">198</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model.compile(loss=keras.losses.categorical_crossentropy,</span><br><span class="line">              optimizer=keras.optimizers.Adam(),</span><br><span class="line">              metrics=[<span class="string">"accuracy"</span>])</span><br></pre></td></tr></table></figure>

<h2 id="Start-learning"><a href="#Start-learning" class="headerlink" title="Start learning"></a>Start learning</h2><p> Because the dataset is large, <em>it may take a <strong>very long</strong> time.</em> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STEP_SIZE_TRAIN=trainset.n//trainset.batch_size</span><br><span class="line">STEP_SIZE_VALID=testset.n//testset.batch_size</span><br><span class="line">print(STEP_SIZE_TRAIN, STEP_SIZE_VALID)</span><br><span class="line"></span><br><span class="line">model.fit_generator(generator=trainset,</span><br><span class="line">                    steps_per_epoch=STEP_SIZE_TRAIN,</span><br><span class="line">                    validation_data=testset,</span><br><span class="line">                    validation_steps=STEP_SIZE_VALID,</span><br><span class="line">                    epochs=<span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="Evaluate-the-model"><a href="#Evaluate-the-model" class="headerlink" title="Evaluate the model"></a>Evaluate the model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.evaluate_generator(testset,verbose=<span class="number">1</span>) <span class="comment">#predict</span></span><br></pre></td></tr></table></figure>

<h2 id="Save-the-trained-model"><a href="#Save-the-trained-model" class="headerlink" title="Save the trained model"></a>Save the trained model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">modelname = <span class="string">'garbageExample0'</span></span><br><span class="line">model.save(<span class="string">'./TrainedModels/'</span> + modelname + <span class="string">'.h5'</span>)<span class="comment">#create the file and save it</span></span><br></pre></td></tr></table></figure>





<h1 id="05-3-Make-prediction-on-validationset"><a href="#05-3-Make-prediction-on-validationset" class="headerlink" title="05.3.Make prediction on validationset"></a>05.3.Make prediction on validationset</h1><p>from <strong>future</strong> import absolute_import, division, print_function, unicode_literals</p>
<h1 id="TensorFlow-and-tf-keras"><a href="#TensorFlow-and-tf-keras" class="headerlink" title="TensorFlow and tf.keras"></a>TensorFlow and tf.keras</h1><p>import tensorflow as tf<br>from tensorflow import keras<br>from tensorflow.keras import backend as K<br>from tensorflow.keras.preprocessing.image import ImageDataGenerator<br>from tensorflow.keras.callbacks import LearningRateScheduler<br>from tensorflow.keras.preprocessing import image</p>
<h1 id="Helper-libraries"><a href="#Helper-libraries" class="headerlink" title="Helper libraries"></a>Helper libraries</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.rcParams[&#39;font.sans-serif&#39;] &#x3D; [&#39;SimHei&#39;]  # 用来正常显示中文标签</span><br><span class="line">plt.rcParams[&#39;axes.unicode_minus&#39;] &#x3D; False  # 用来正常显示负号</span><br><span class="line">import random</span><br><span class="line">import pandas as pd # ← a new package is needed to be install, use &gt; conda install pandas</span><br><span class="line">import cv2</span><br><span class="line">import os</span><br><span class="line">import json</span><br></pre></td></tr></table></figure>

<h2 id="Load-trained-model"><a href="#Load-trained-model" class="headerlink" title="Load trained model"></a>Load trained model</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">modelname &#x3D; &#39;garbageExample0&#39;</span><br><span class="line">model &#x3D; keras.models.load_model(&#39;.&#x2F;trainedModels&#x2F;&#39; + modelname + &#39;.h5&#39;)</span><br></pre></td></tr></table></figure>

<h2 id="Import-validationset"><a href="#Import-validationset" class="headerlink" title="Import validationset"></a>Import validationset</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">valiset_path = <span class="string">'./dataset/resizedFullGarbageDataset/val_resized'</span></span><br><span class="line">valiset_filenames = os.listdir(valiset_path)</span><br><span class="line">len(valiset_filenames)</span><br><span class="line"><span class="comment">#out:10000</span></span><br></pre></td></tr></table></figure>

<h2 id="Define-getname-function"><a href="#Define-getname-function" class="headerlink" title="Define getname() function"></a>Define <code>getname()</code> function</h2><p>The names is in the order generated by <code>flow_from_dataframe</code> before training.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = &#123;<span class="string">'KT板'</span>: <span class="number">0</span>, <span class="string">'PVC管'</span>: <span class="number">1</span>, <span class="string">'X光片'</span>: <span class="number">2</span>, <span class="string">'一次性口罩'</span>: <span class="number">3</span>, <span class="string">'一次性塑料餐盒餐具'</span>: <span class="number">4</span>, <span class="string">'一次性手套'</span>: <span class="number">5</span>,</span><br><span class="line">         <span class="string">'一次性餐盒'</span>: <span class="number">6</span>, <span class="string">'丝绸手绢'</span>: <span class="number">7</span>, <span class="string">'中药材'</span>: <span class="number">8</span>, <span class="string">'中药渣'</span>: <span class="number">9</span>, <span class="string">'书包'</span>: <span class="number">10</span>,</span><br><span class="line">         <span class="string">'二极管'</span>: <span class="number">11</span>, <span class="string">'五谷杂粮'</span>: <span class="number">12</span>, <span class="string">'亚克力板'</span>: <span class="number">13</span>, <span class="string">'仓鼠浴沙'</span>: <span class="number">14</span>, <span class="string">'优盘'</span>: <span class="number">15</span>,</span><br><span class="line">          <span class="string">'保温杯'</span>: <span class="number">16</span>, <span class="string">'信封'</span>: <span class="number">17</span>, <span class="string">'假睫毛'</span>: <span class="number">18</span>, <span class="string">'充电宝'</span>: <span class="number">19</span>, <span class="string">'农药瓶'</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="string">'冲泡饮料粉'</span>: <span class="number">21</span>, <span class="string">'创可贴'</span>: <span class="number">22</span>, <span class="string">'利乐包'</span>: <span class="number">23</span>, <span class="string">'动物内脏'</span>: <span class="number">24</span>, <span class="string">'动物蹄'</span>: <span class="number">25</span>,</span><br><span class="line">          <span class="string">'勺子'</span>: <span class="number">26</span>, <span class="string">'化妆品塑料瓶'</span>: <span class="number">27</span>, <span class="string">'化妆品玻璃瓶'</span>: <span class="number">28</span>, <span class="string">'卫生纸'</span>: <span class="number">29</span>, <span class="string">'叉子'</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="string">'口服液瓶'</span>: <span class="number">31</span>, <span class="string">'口红'</span>: <span class="number">32</span>, <span class="string">'吸铁石'</span>: <span class="number">33</span>, <span class="string">'咖啡渣'</span>: <span class="number">34</span>, <span class="string">'固体杀虫剂'</span>: <span class="number">35</span>,</span><br><span class="line">          <span class="string">'图书期刊'</span>: <span class="number">36</span>, <span class="string">'坚果壳'</span>: <span class="number">37</span>, <span class="string">'塑料包装'</span>: <span class="number">38</span>, <span class="string">'塑料杯'</span>: <span class="number">39</span>, <span class="string">'塑料泡沫'</span>: <span class="number">40</span>,</span><br><span class="line">          <span class="string">'塑料玩具'</span>: <span class="number">41</span>, <span class="string">'塑料盆'</span>: <span class="number">42</span>, <span class="string">'塑料衣架'</span>: <span class="number">43</span>, <span class="string">'墨盒'</span>: <span class="number">44</span>, <span class="string">'大骨棒'</span>: <span class="number">45</span>,</span><br><span class="line">         <span class="string">'奶酪'</span>: <span class="number">46</span>, <span class="string">'宠物饲料'</span>: <span class="number">47</span>, <span class="string">'密胺餐具'</span>: <span class="number">48</span>, <span class="string">'小龙虾'</span>: <span class="number">49</span>, <span class="string">'尼龙制品'</span>: <span class="number">50</span>,</span><br><span class="line">         <span class="string">'尿片'</span>: <span class="number">51</span>, <span class="string">'带胶制品'</span>: <span class="number">52</span>, <span class="string">'干果'</span>: <span class="number">53</span>, <span class="string">'广告单'</span>: <span class="number">54</span>, <span class="string">'床上用品'</span>: <span class="number">55</span>,</span><br><span class="line">         <span class="string">'废弃衣服'</span>: <span class="number">56</span>, <span class="string">'废弃针管'</span>: <span class="number">57</span>, <span class="string">'快递纸袋'</span>: <span class="number">58</span>, <span class="string">'手机电池'</span>: <span class="number">59</span>, <span class="string">'打印纸'</span>: <span class="number">60</span>,</span><br><span class="line">         <span class="string">'报纸'</span>: <span class="number">61</span>, <span class="string">'指甲油瓶'</span>: <span class="number">62</span>, <span class="string">'排骨-小肋排'</span>: <span class="number">63</span>, <span class="string">'插座'</span>: <span class="number">64</span>, <span class="string">'数据线'</span>: <span class="number">65</span>,</span><br><span class="line">         <span class="string">'日历'</span>: <span class="number">66</span>, <span class="string">'旧毛巾'</span>: <span class="number">67</span>, <span class="string">'易拉罐'</span>: <span class="number">68</span>, <span class="string">'木制品'</span>: <span class="number">69</span>, <span class="string">'杀虫剂及罐'</span>: <span class="number">70</span>,</span><br><span class="line">         <span class="string">'杂草'</span>: <span class="number">71</span>, <span class="string">'枕头'</span>: <span class="number">72</span>, <span class="string">'枣核'</span>: <span class="number">73</span>, <span class="string">'染发剂壳'</span>: <span class="number">74</span>, <span class="string">'柚子皮'</span>: <span class="number">75</span>,</span><br><span class="line">         <span class="string">'柿子皮'</span>: <span class="number">76</span>, <span class="string">'树叶'</span>: <span class="number">77</span>, <span class="string">'核桃'</span>: <span class="number">78</span>, <span class="string">'桔子皮'</span>: <span class="number">79</span>, <span class="string">'棉签'</span>: <span class="number">80</span>,</span><br><span class="line">         <span class="string">'棉被'</span>: <span class="number">81</span>, <span class="string">'椰子壳'</span>: <span class="number">82</span>, <span class="string">'榴莲壳'</span>: <span class="number">83</span>, <span class="string">'橡皮泥'</span>: <span class="number">84</span>, <span class="string">'毛发'</span>: <span class="number">85</span>,</span><br><span class="line">         <span class="string">'毛绒玩具'</span>: <span class="number">86</span>, <span class="string">'毛豆壳'</span>: <span class="number">87</span>, <span class="string">'水银温度计'</span>: <span class="number">88</span>, <span class="string">'水银血压计'</span>: <span class="number">89</span>, <span class="string">'油漆桶'</span>: <span class="number">90</span>,</span><br><span class="line">         <span class="string">'消毒液瓶'</span>: <span class="number">91</span>, <span class="string">'湿巾'</span>: <span class="number">92</span>, <span class="string">'灯管灯泡'</span>: <span class="number">93</span>, <span class="string">'灰土'</span>: <span class="number">94</span>, <span class="string">'烟头'</span>: <span class="number">95</span>,</span><br><span class="line">         <span class="string">'烟盒'</span>: <span class="number">96</span>, <span class="string">'照片'</span>: <span class="number">97</span>, <span class="string">'牙刷'</span>: <span class="number">98</span>, <span class="string">'牙膏皮'</span>: <span class="number">99</span>, <span class="string">'狗尿布'</span>: <span class="number">100</span>,</span><br><span class="line">         <span class="string">'猫砂'</span>: <span class="number">101</span>, <span class="string">'玉米棒'</span>: <span class="number">102</span>, <span class="string">'玻璃制品'</span>: <span class="number">103</span>, <span class="string">'玻璃杯'</span>: <span class="number">104</span>, <span class="string">'瓜子壳'</span>: <span class="number">105</span>,</span><br><span class="line">         <span class="string">'甘蔗皮'</span>: <span class="number">106</span>, <span class="string">'电线'</span>: <span class="number">107</span>, <span class="string">'电路板'</span>: <span class="number">108</span>, <span class="string">'皮带'</span>: <span class="number">109</span>, <span class="string">'眼影'</span>: <span class="number">110</span>,</span><br><span class="line">         <span class="string">'眼药水瓶'</span>: <span class="number">111</span>, <span class="string">'睫毛膏'</span>: <span class="number">112</span>, <span class="string">'矿泉水瓶'</span>: <span class="number">113</span>, <span class="string">'破碗碟'</span>: <span class="number">114</span>, <span class="string">'硬塑料'</span>: <span class="number">115</span>,</span><br><span class="line">         <span class="string">'碎玻璃片'</span>: <span class="number">116</span>, <span class="string">'窗玻璃'</span>: <span class="number">117</span>, <span class="string">'竹制品'</span>: <span class="number">118</span>, <span class="string">'笔'</span>: <span class="number">119</span>, <span class="string">'篮球'</span>: <span class="number">120</span>,</span><br><span class="line">         <span class="string">'粉底液'</span>: <span class="number">121</span>, <span class="string">'粉扑'</span>: <span class="number">122</span>, <span class="string">'粉笔'</span>: <span class="number">123</span>, <span class="string">'粽子'</span>: <span class="number">124</span>, <span class="string">'糕饼'</span>: <span class="number">125</span>,</span><br><span class="line">         <span class="string">'糖果'</span>: <span class="number">126</span>, <span class="string">'纸巾'</span>: <span class="number">127</span>, <span class="string">'纽扣电池'</span>: <span class="number">128</span>, <span class="string">'绿植'</span>: <span class="number">129</span>, <span class="string">'罐头'</span>: <span class="number">130</span>,</span><br><span class="line">         <span class="string">'罐头盒'</span>: <span class="number">131</span>, <span class="string">'肉干'</span>: <span class="number">132</span>, <span class="string">'肉类'</span>: <span class="number">133</span>, <span class="string">'胶卷'</span>: <span class="number">134</span>, <span class="string">'胶囊'</span>: <span class="number">135</span>,</span><br><span class="line">         <span class="string">'胶带'</span>: <span class="number">136</span>, <span class="string">'节能灯'</span>: <span class="number">137</span>, <span class="string">'芒果皮'</span>: <span class="number">138</span>, <span class="string">'花生壳'</span>: <span class="number">139</span>, <span class="string">'苹果核'</span>: <span class="number">140</span>,</span><br><span class="line">         <span class="string">'苹果皮'</span>: <span class="number">141</span>, <span class="string">'茶叶渣'</span>: <span class="number">142</span>, <span class="string">'荔枝壳'</span>: <span class="number">143</span>, <span class="string">'药品包装'</span>: <span class="number">144</span>, <span class="string">'药片'</span>: <span class="number">145</span>,</span><br><span class="line">         <span class="string">'药瓶'</span>: <span class="number">146</span>, <span class="string">'菌菇类'</span>: <span class="number">147</span>, <span class="string">'菜刀'</span>: <span class="number">148</span>, <span class="string">'菜叶'</span>: <span class="number">149</span>, <span class="string">'菜根'</span>: <span class="number">150</span>,</span><br><span class="line">         <span class="string">'蓄电池'</span>: <span class="number">151</span>, <span class="string">'薯片'</span>: <span class="number">152</span>, <span class="string">'虾'</span>: <span class="number">153</span>, <span class="string">'蛋壳'</span>: <span class="number">154</span>, <span class="string">'蜜饯'</span>: <span class="number">155</span>,</span><br><span class="line">         <span class="string">'螺蛳'</span>: <span class="number">156</span>, <span class="string">'蟹壳'</span>: <span class="number">157</span>, <span class="string">'西瓜子'</span>: <span class="number">158</span>, <span class="string">'西瓜皮'</span>: <span class="number">159</span>, <span class="string">'话梅核'</span>: <span class="number">160</span>,</span><br><span class="line">         <span class="string">'调料'</span>: <span class="number">161</span>, <span class="string">'谷类及加工物'</span>: <span class="number">162</span>, <span class="string">'豆类'</span>: <span class="number">163</span>, <span class="string">'贝类去硬壳'</span>: <span class="number">164</span>, <span class="string">'购物纸袋'</span>: <span class="number">165</span>,</span><br><span class="line">         <span class="string">'足球'</span>: <span class="number">166</span>, <span class="string">'输液管'</span>: <span class="number">167</span>, <span class="string">'酱料'</span>: <span class="number">168</span>, <span class="string">'金属制品'</span>: <span class="number">169</span>, <span class="string">'金属工具'</span>: <span class="number">170</span>,</span><br><span class="line">         <span class="string">'金属瓶罐'</span>: <span class="number">171</span>, <span class="string">'铝制品'</span>: <span class="number">172</span>, <span class="string">'锂电池'</span>: <span class="number">173</span>, <span class="string">'锅'</span>: <span class="number">174</span>, <span class="string">'镍镉电池'</span>: <span class="number">175</span>,</span><br><span class="line">         <span class="string">'镜子'</span>: <span class="number">176</span>, <span class="string">'防碎气泡膜'</span>: <span class="number">177</span>, <span class="string">'陶瓷'</span>: <span class="number">178</span>, <span class="string">'雨伞'</span>: <span class="number">179</span>, <span class="string">'面包'</span>: <span class="number">180</span>,</span><br><span class="line">         <span class="string">'面食'</span>: <span class="number">181</span>, <span class="string">'鞋'</span>: <span class="number">182</span>, <span class="string">'鞋盒'</span>: <span class="number">183</span>, <span class="string">'风干食品'</span>: <span class="number">184</span>, <span class="string">'食品及日用品玻璃瓶罐'</span>: <span class="number">185</span>,</span><br><span class="line">         <span class="string">'食品塑料盒'</span>: <span class="number">186</span>, <span class="string">'食品外包装盒'</span>: <span class="number">187</span>, <span class="string">'食用油桶'</span>: <span class="number">188</span>, <span class="string">'饼干'</span>: <span class="number">189</span>, <span class="string">'香蕉皮'</span>: <span class="number">190</span>,</span><br><span class="line">         <span class="string">'鱼'</span>: <span class="number">191</span>, <span class="string">'鱼骨头'</span>: <span class="number">192</span>, <span class="string">'鱼鳞'</span>: <span class="number">193</span>, <span class="string">'鲜花'</span>: <span class="number">194</span>, <span class="string">'鸡'</span>: <span class="number">195</span>,</span><br><span class="line">         <span class="string">'鸡骨头'</span>: <span class="number">196</span>, <span class="string">'鸭'</span>: <span class="number">197</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getname</span><span class="params">(index)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(names)[index]</span><br></pre></td></tr></table></figure>

<h2 id="Define-get-category-id-function"><a href="#Define-get-category-id-function" class="headerlink" title="Define get_category_id() function"></a>Define <code>get_category_id()</code> function</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'./dataset/resizedFullGarbageDataset/train.json'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    train_labels = json.load(f)</span><br><span class="line">names_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> train_labels[<span class="string">'categories'</span>]:</span><br><span class="line">    names_dict.update(&#123;label[<span class="string">'name'</span>] : label[<span class="string">'id'</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_category_id</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> names_dict[name]</span><br></pre></td></tr></table></figure>

<h2 id="Make-prediction-and-post-process"><a href="#Make-prediction-and-post-process" class="headerlink" title="Make prediction and post process"></a>Make prediction and post process</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results_name = []</span><br><span class="line">results_label = [] <span class="comment"># category_id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(valiset_filenames)):</span><br><span class="line">    image_path = valiset_path + <span class="string">'/'</span> + valiset_filenames[i]</span><br><span class="line">    img = image.load_img(image_path, target_size=(<span class="number">112</span>, <span class="number">112</span>))</span><br><span class="line">    x = image.img_to_array(img)</span><br><span class="line">    x = np.expand_dims(x, axis=<span class="number">0</span>) /<span class="number">255</span></span><br><span class="line"></span><br><span class="line">    pred = model.predict(x)</span><br><span class="line">    </span><br><span class="line">    index = np.argmax(pred)</span><br><span class="line">    result_name = getname(index)</span><br><span class="line">    result_label = get_category_id(result_name)</span><br><span class="line">    </span><br><span class="line">    results_name.append(result_name)</span><br><span class="line">    results_label.append(result_label)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((i+<span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>):</span><br><span class="line">        print(<span class="string">"finished %d predictions"</span>%(i+<span class="number">1</span>)) <span class="comment">#to show the process</span></span><br></pre></td></tr></table></figure>

<h2 id="Observe-random-20-images"><a href="#Observe-random-20-images" class="headerlink" title="Observe random 20 images"></a>Observe random 20 images</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">randNums = random.sample(range(<span class="number">0</span>, len(valiset_filenames)), <span class="number">20</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">18</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">    filename = valiset_filenames[randNums[i]]</span><br><span class="line">    image_path = valiset_path + <span class="string">'/'</span> + filename</span><br><span class="line">    img = image.load_img(image_path, target_size=(<span class="number">112</span>, <span class="number">112</span>))</span><br><span class="line">    x = image.img_to_array(img)</span><br><span class="line">    x = np.expand_dims(x, axis=<span class="number">0</span>) /<span class="number">255</span></span><br><span class="line">    pred = model.predict(x)</span><br><span class="line">    index = np.argmax(pred)</span><br><span class="line">    result_name = getname(index)</span><br><span class="line">    result_label = get_category_id(result_name)</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">4</span>,<span class="number">5</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(x[<span class="number">0</span>])</span><br><span class="line">    plt.title(filename)</span><br><span class="line">    plt.xlabel(<span class="string">"Prediction: %d-%s"</span>%(result_label, result_name))</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/23/87OS7d.png" alt="87OS7d.png"></p>
<h2 id="Save-results"><a href="#Save-results" class="headerlink" title="Save results"></a>Save results</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">resultName = <span class="string">'test0'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./PredictResults/'</span> + resultName + <span class="string">'.csv'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"id,label\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(valiset_filenames)):</span><br><span class="line">        vali_id = str(valiset_filenames[i]).replace(<span class="string">'.jpg'</span>,<span class="string">''</span>)</span><br><span class="line">        f.write(<span class="string">"%s,%s\n"</span>%(vali_id, str(results_label[i])))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关海华AI比赛thought</title>
    <url>/2020/04/18/%E6%9C%89%E5%85%B3%E6%B5%B7%E5%8D%8EAI%E6%AF%94%E8%B5%9Bthought/</url>
    <content><![CDATA[<h1 id="海华AI比赛感受-Haihua-AI-garbage-classification-competition"><a href="#海华AI比赛感受-Haihua-AI-garbage-classification-competition" class="headerlink" title="海华AI比赛感受 Haihua AI garbage classification competition"></a>海华AI比赛感受 Haihua AI garbage classification competition</h1><p>看到垃圾分类这个标题时我就决定要参加这个比赛。我之前也参加过类似的项目课题研究，只是并不专业，更注重社科题材的研究。那时我请教老师，老师说用机器学习构建神经网络然后图像识别进行垃圾分类其实是个很简单的事情。于是我变很好奇到底是怎么做到的。</p>
<p>What was it? I decided to take part in Haihua Al rubbish classification competition when I saw the title ‘rubbish classification’, which is to use computer classify the rubbish. After all, computer science is the major I have chosen. At that time, I asked my teacher for some advice, and he said that it was actually just using the machine learning to build neural networks and then use image recognition to classify garbage. Then, I truly became curious about how it could be done.</p>
<p>参加比赛前，我们进行了学习。老师从如何预测简单的商店营业额一直教到图像处理，看似无关的知识点之间环环相扣，最终实现了创建模型，识别图片并垃圾分类。刚学完时，我都不敢相信课程已经结束了，原来创建模型真的不是一件难事。安装配备tensorflow等包（也可以尝试其他环境），导入数据和图片，用图片信息进行编号，分成训练集和测试集，合理运用Keras官网上准确度较高的模型，训练自己的模型，最终运行模型获得预测数据，整过程便结束了。</p>
<p>My group learnt some relevant knowledge before we took part in the competition, being taught from how to predict the turnover of a store by plotting graph to how to do image processing, from simple to difficult. Seemingly irrelevant knowledge points were interlinked, such as which PS skills can be realized by using the image processing codes, and finally the model, which was suitable for the competition, was created and images were recognized and rubbish classification was realized. When I finished, I couldn’t believe the course was over, because there were too many things for me to learn that the time really flew. It turned out that it wasn’t so hard to create models. Installing packages such as tensorflow (you can also try other environments), importing data and pictures, numbering them with picture information …… and finally running the model to obtain the prediction data, the whole process is over.</p>
<p>别看只写了两三行字，这中间可是用了几周的时间，训练模型确实是件苦差事。从开始二三十遍为一循环，到十次一循环，到最后一次一循环，准确度始终在99.7徘徊，却始终没有更好的成绩，确实是一件令人着急的事。还有上学的缘故，家里电脑硬件不足，我还学会了远程操控电脑。其中还有不少困难：电脑硬件出现问题，电脑无法连接，硬盘内存满了要换一个盘，环境未匹配上，下载官网模型时间过长通过其他办法下载……虽然有困难，但我们都一一解决了。这也有助于我对这一块知识的了解，比如在学习编程之前，我可以说是对电脑一无所知，只会上网。而现在，不论是编程语言的更加熟练，还是对电脑的更加熟悉，都有助于我将来的学习，毕竟这是我选定的专业方向。当然，经历了这么多，我也逐渐能做到做事时能不像以前那么着急，不能图快，一件一件慢慢处理才能达到最高的效率。</p>
<p>Despite writing only two or three lines of codes, it took weeks to train the model. From the beginning with 20 or 30 times for a cycle of training, to 10 times a cycle, to at last once a cycle, the accuracy was always hovering in 99.7 percent. But that there is no more better accuracy is really a matter of urgency. Also because of school schedule and the insufficient home computer hardware, I also learned to operate the computer remotely, which can save my time on the way. Meanwhile, there were also many difficulties, such as computer hardware problems, Internet connection difficulties, the hard disk memory is full, the environment is not matched, and so on. Although there were difficulties, we solved them one by one which added to my deeper understanding of the programme. For instance, before learning programming, I can say that I knew nothing about computers, except the Internet. Now,being more proficient in the programming language and more familiar with the computer can absolutely help me in my future studies. By taking part in this competition I learn a lot of important skills such as time management and working in a methodical and reflective way.</p>
<p>曾经，我觉得这是一个多么遥远的专业，因为不了解，所以觉得简直是不可能的事情。但如今回头再看，其实没有我想的那么难。学习就是这样，是一个上升的阶梯，从下往上看时感觉遥不可及，但当不知不觉爬上去后往下看，似乎也没那么遥远。</p>
<p>In the past, I thought learning this programme would be beyond my capabilities because I was not familiar with it and it felt impossible for me to understand. However, looking back now, it was not as hard as I thought. Learning is just like this, a ladder: when I get from the bottom to the top, I feel it far away; when unwittingly climbing up and looking down, it seems not so far away.</p>
]]></content>
      <categories>
        <category>海华AI competition</category>
      </categories>
      <tags>
        <tag>project-based learning</tag>
      </tags>
  </entry>
</search>
